
WiSe2223_GruppeK3_s_Projektaufgabe_Digitaluhr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001234  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f6c  080013c8  080013c8  000113c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002338  08002338  00012338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  0800233c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  7 .bss          00000c54  2000001c  2000001c  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c70  20000c70  0002001c  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002424  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000009e8  00000000  00000000  0002246a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000001b8  00000000  00000000  00022e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000148  00000000  00000000  00023010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00018808  00000000  00000000  00023158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00002c0d  00000000  00000000  0003b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00086e2e  00000000  00000000  0003e56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c539b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000054c  00000000  00000000  000c53ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013b0 	.word	0x080013b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	080013b0 	.word	0x080013b0

080001d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	db0a      	blt.n	80001fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	490c      	ldr	r1, [pc, #48]	; (8000220 <__NVIC_SetPriority+0x4c>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	0112      	lsls	r2, r2, #4
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	440b      	add	r3, r1
 80001f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001fc:	e00a      	b.n	8000214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4908      	ldr	r1, [pc, #32]	; (8000224 <__NVIC_SetPriority+0x50>)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	3b04      	subs	r3, #4
 800020c:	0112      	lsls	r2, r2, #4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	440b      	add	r3, r1
 8000212:	761a      	strb	r2, [r3, #24]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <main>:
OLED_t lcd1 ;
OLED_t lcd2 ;
OLED_t lcd3 ;

int main()
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af04      	add	r7, sp, #16

  	while ((RCC->CR & 2) == 0);  //wait until HSI is Ready
 800022e:	bf00      	nop
 8000230:	4b4e      	ldr	r3, [pc, #312]	; (800036c <main+0x144>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f003 0302 	and.w	r3, r3, #2
 8000238:	2b00      	cmp	r3, #0
 800023a:	d0f9      	beq.n	8000230 <main+0x8>

	systick_enable() ;
 800023c:	f000 f8ae 	bl	800039c <systick_enable>

	RCC->CFGR &= ~(1<<7)  ; //reset HPRE4 The AHB clock frequency == sys clk
 8000240:	4b4a      	ldr	r3, [pc, #296]	; (800036c <main+0x144>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a49      	ldr	r2, [pc, #292]	; (800036c <main+0x144>)
 8000246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800024a:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<12) ; // APB1 clock no division
 800024c:	4b47      	ldr	r3, [pc, #284]	; (800036c <main+0x144>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a46      	ldr	r2, [pc, #280]	; (800036c <main+0x144>)
 8000252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000256:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<15) ; // APB2 clock no division
 8000258:	4b44      	ldr	r3, [pc, #272]	; (800036c <main+0x144>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	4a43      	ldr	r2, [pc, #268]	; (800036c <main+0x144>)
 800025e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000262:	6053      	str	r3, [r2, #4]

	gpio_clock_enable(GPIOA) ;
 8000264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000268:	f000 fc98 	bl	8000b9c <gpio_clock_enable>

	gpio_config_pin(GPIOA,5,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 800026c:	2300      	movs	r3, #0
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	2300      	movs	r3, #0
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2300      	movs	r3, #0
 8000276:	2201      	movs	r2, #1
 8000278:	2105      	movs	r1, #5
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f000 fd12 	bl	8000ca6 <gpio_config_pin>

	gpio_set_pinState(GPIOA , 5 , LOW) ;
 8000282:	2201      	movs	r2, #1
 8000284:	2105      	movs	r1, #5
 8000286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028a:	f000 fd43 	bl	8000d14 <gpio_set_pinState>
	//SYSCFG->CFGR1 |= (1<<16) |(1<<17) ;// set PB6 and PB7 I2C mode
#ifdef I2C_WRITE_READ_BM

	 uint8_t buff[3] ;

	 I2C_Init(I2C1) ;
 800028e:	4838      	ldr	r0, [pc, #224]	; (8000370 <main+0x148>)
 8000290:	f000 fd64 	bl	8000d5c <I2C_Init>


	 data = search_address(I2C1 , buff) ;
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	4619      	mov	r1, r3
 8000298:	4835      	ldr	r0, [pc, #212]	; (8000370 <main+0x148>)
 800029a:	f000 fe4d 	bl	8000f38 <search_address>
 800029e:	4603      	mov	r3, r0
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4b34      	ldr	r3, [pc, #208]	; (8000374 <main+0x14c>)
 80002a4:	701a      	strb	r2, [r3, #0]
//	 I2C_Read(I2C2 ,0x57 , buff , 2) ;

     //128*64
#endif

	 lcd1.dev = I2C1 ;
 80002a6:	4b34      	ldr	r3, [pc, #208]	; (8000378 <main+0x150>)
 80002a8:	4a31      	ldr	r2, [pc, #196]	; (8000370 <main+0x148>)
 80002aa:	601a      	str	r2, [r3, #0]
	 lcd2.dev = I2C2 ;
 80002ac:	4b33      	ldr	r3, [pc, #204]	; (800037c <main+0x154>)
 80002ae:	4a34      	ldr	r2, [pc, #208]	; (8000380 <main+0x158>)
 80002b0:	601a      	str	r2, [r3, #0]
	 lcd3.dev = I2C3 ;
 80002b2:	4b34      	ldr	r3, [pc, #208]	; (8000384 <main+0x15c>)
 80002b4:	4a34      	ldr	r2, [pc, #208]	; (8000388 <main+0x160>)
 80002b6:	601a      	str	r2, [r3, #0]

	 I2C_Init(I2C1) ;
 80002b8:	482d      	ldr	r0, [pc, #180]	; (8000370 <main+0x148>)
 80002ba:	f000 fd4f 	bl	8000d5c <I2C_Init>
	 I2C_Init(I2C2) ;
 80002be:	4830      	ldr	r0, [pc, #192]	; (8000380 <main+0x158>)
 80002c0:	f000 fd4c 	bl	8000d5c <I2C_Init>
	 I2C_Init(I2C3) ;
 80002c4:	4830      	ldr	r0, [pc, #192]	; (8000388 <main+0x160>)
 80002c6:	f000 fd49 	bl	8000d5c <I2C_Init>

	 //rtc_init(I2C1) ;

	// rtc_I2C_TimeOffset() ;

	 Display_Init(&lcd3);	//Configure Display
 80002ca:	482e      	ldr	r0, [pc, #184]	; (8000384 <main+0x15c>)
 80002cc:	f000 f939 	bl	8000542 <Display_Init>
	 Display_Init(&lcd2);	//Configure Display
 80002d0:	482a      	ldr	r0, [pc, #168]	; (800037c <main+0x154>)
 80002d2:	f000 f936 	bl	8000542 <Display_Init>
	 Display_Init(&lcd1);	//Configure Display
 80002d6:	4828      	ldr	r0, [pc, #160]	; (8000378 <main+0x150>)
 80002d8:	f000 f933 	bl	8000542 <Display_Init>
	 keypad_init(GPIOC , 0) ;
 80002dc:	2100      	movs	r1, #0
 80002de:	482b      	ldr	r0, [pc, #172]	; (800038c <main+0x164>)
 80002e0:	f000 fe96 	bl	8001010 <keypad_init>
	 //Example: print a picture on screen
		Display_Fill(&lcd3, Display_COLOR_BLACK);	//the entire Display is white (written to RAM)
 80002e4:	2100      	movs	r1, #0
 80002e6:	4827      	ldr	r0, [pc, #156]	; (8000384 <main+0x15c>)
 80002e8:	f000 fa71 	bl	80007ce <Display_Fill>
		Display_DrawBitmap(&lcd3 ,0, 0, horse_image, 128, 64, Display_COLOR_WHITE);	//data of picture into RAM	(available pictures: helix & looping)
 80002ec:	2301      	movs	r3, #1
 80002ee:	9302      	str	r3, [sp, #8]
 80002f0:	2340      	movs	r3, #64	; 0x40
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2380      	movs	r3, #128	; 0x80
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	4b25      	ldr	r3, [pc, #148]	; (8000390 <main+0x168>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	2100      	movs	r1, #0
 80002fe:	4821      	ldr	r0, [pc, #132]	; (8000384 <main+0x15c>)
 8000300:	f000 f8bf 	bl	8000482 <Display_DrawBitmap>
		Display_UpdateScreen(&lcd3);
 8000304:	481f      	ldr	r0, [pc, #124]	; (8000384 <main+0x15c>)
 8000306:	f000 fa2a 	bl	800075e <Display_UpdateScreen>

		Display_Fill(&lcd2, Display_COLOR_WHITE );	//the entire Display is white (written to RAM)
 800030a:	2101      	movs	r1, #1
 800030c:	481b      	ldr	r0, [pc, #108]	; (800037c <main+0x154>)
 800030e:	f000 fa5e 	bl	80007ce <Display_Fill>
	    Display_UpdateScreen(&lcd2);
 8000312:	481a      	ldr	r0, [pc, #104]	; (800037c <main+0x154>)
 8000314:	f000 fa23 	bl	800075e <Display_UpdateScreen>

	    Display_Fill(&lcd1, Display_COLOR_BLACK );	//the entire Display is white (written to RAM)
 8000318:	2100      	movs	r1, #0
 800031a:	4817      	ldr	r0, [pc, #92]	; (8000378 <main+0x150>)
 800031c:	f000 fa57 	bl	80007ce <Display_Fill>
	    Display_DrawBitmap(&lcd1 ,0, 0, alarm_logo, 128, 64, Display_COLOR_WHITE);	//data of picture into RAM	(available pictures: helix & looping)
 8000320:	2301      	movs	r3, #1
 8000322:	9302      	str	r3, [sp, #8]
 8000324:	2340      	movs	r3, #64	; 0x40
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	2380      	movs	r3, #128	; 0x80
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <main+0x16c>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4811      	ldr	r0, [pc, #68]	; (8000378 <main+0x150>)
 8000334:	f000 f8a5 	bl	8000482 <Display_DrawBitmap>
	    Display_UpdateScreen(&lcd1);
 8000338:	480f      	ldr	r0, [pc, #60]	; (8000378 <main+0x150>)
 800033a:	f000 fa10 	bl	800075e <Display_UpdateScreen>
	//Display_printTime(&lcd3 , out_buffer,&Font_7x10 );
	//Display_UpdateScreen(&lcd3);
	while(1)
	{

		char c = keypad_get_pressedkey() ;
 800033e:	f000 ff59 	bl	80011f4 <keypad_get_pressedkey>
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]

		if(c != 0)
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f8      	beq.n	800033e <main+0x116>
		{
			gpio_set_pinState(GPIOA , 5 , HIGH) ;
 800034c:	2200      	movs	r2, #0
 800034e:	2105      	movs	r1, #5
 8000350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000354:	f000 fcde 	bl	8000d14 <gpio_set_pinState>
			Display_Putc(&lcd2 , c , &Font_7x10 , Display_COLOR_BLACK) ;
 8000358:	79f9      	ldrb	r1, [r7, #7]
 800035a:	2300      	movs	r3, #0
 800035c:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <main+0x170>)
 800035e:	4807      	ldr	r0, [pc, #28]	; (800037c <main+0x154>)
 8000360:	f000 fab1 	bl	80008c6 <Display_Putc>
			Display_UpdateScreen(&lcd2);
 8000364:	4805      	ldr	r0, [pc, #20]	; (800037c <main+0x154>)
 8000366:	f000 f9fa 	bl	800075e <Display_UpdateScreen>
	{
 800036a:	e7e8      	b.n	800033e <main+0x116>
 800036c:	40021000 	.word	0x40021000
 8000370:	40005400 	.word	0x40005400
 8000374:	2000003c 	.word	0x2000003c
 8000378:	20000040 	.word	0x20000040
 800037c:	2000044c 	.word	0x2000044c
 8000380:	40005800 	.word	0x40005800
 8000384:	20000858 	.word	0x20000858
 8000388:	40007800 	.word	0x40007800
 800038c:	48000800 	.word	0x48000800
 8000390:	080017c8 	.word	0x080017c8
 8000394:	080013c8 	.word	0x080013c8
 8000398:	20000004 	.word	0x20000004

0800039c <systick_enable>:
	}
}


void systick_enable()
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	SysTick->LOAD  = (SystemCoreClock_/1000) - 1;                  /* set reload register */
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <systick_enable+0x30>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <systick_enable+0x34>)
 80003a6:	fba2 2303 	umull	r2, r3, r2, r3
 80003aa:	099b      	lsrs	r3, r3, #6
 80003ac:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <systick_enable+0x38>)
 80003ae:	3b01      	subs	r3, #1
 80003b0:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80003b2:	210f      	movs	r1, #15
 80003b4:	f04f 30ff 	mov.w	r0, #4294967295
 80003b8:	f7ff ff0c 	bl	80001d4 <__NVIC_SetPriority>
	SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <systick_enable+0x38>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c2:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <systick_enable+0x38>)
 80003c4:	2207      	movs	r2, #7
 80003c6:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_TICKINT_Msk   |
					 SysTick_CTRL_ENABLE_Msk;
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000000 	.word	0x20000000
 80003d0:	10624dd3 	.word	0x10624dd3
 80003d4:	e000e010 	.word	0xe000e010

080003d8 <SysTick_Handler>:


void SysTick_Handler()
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  mtick++;
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <SysTick_Handler+0x18>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3301      	adds	r3, #1
 80003e2:	4a03      	ldr	r2, [pc, #12]	; (80003f0 <SysTick_Handler+0x18>)
 80003e4:	6013      	str	r3, [r2, #0]
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000038 	.word	0x20000038

080003f4 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  uint32_t st = get_mtick();
 80003fc:	f000 f810 	bl	8000420 <get_mtick>
 8000400:	60f8      	str	r0, [r7, #12]

  while( get_mtick() - st <ms);
 8000402:	bf00      	nop
 8000404:	f000 f80c 	bl	8000420 <get_mtick>
 8000408:	4602      	mov	r2, r0
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	429a      	cmp	r2, r3
 8000412:	d8f7      	bhi.n	8000404 <delay_ms+0x10>
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <get_mtick>:

uint32_t get_mtick()
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  return mtick;
 8000424:	4b02      	ldr	r3, [pc, #8]	; (8000430 <get_mtick+0x10>)
 8000426:	681b      	ldr	r3, [r3, #0]
}
 8000428:	4618      	mov	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000038 	.word	0x20000038

08000434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000434:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000468 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000438:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800043a:	e003      	b.n	8000444 <LoopCopyDataInit>

0800043c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800043c:	4b0b      	ldr	r3, [pc, #44]	; (800046c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800043e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000440:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000442:	3104      	adds	r1, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000444:	480a      	ldr	r0, [pc, #40]	; (8000470 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000448:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800044a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800044c:	d3f6      	bcc.n	800043c <CopyDataInit>
	ldr	r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000450:	e002      	b.n	8000458 <LoopFillZerobss>

08000452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000452:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000454:	f842 3b04 	str.w	r3, [r2], #4

08000458 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <LoopForever+0x16>)
	cmp	r2, r3
 800045a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800045c:	d3f9      	bcc.n	8000452 <FillZerobss>

/* Call the clock system intitialization function.*/
    //bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 800045e:	f000 ff7b 	bl	8001358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000462:	f7ff fee1 	bl	8000228 <main>

08000466 <LoopForever>:

LoopForever:
    b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000468:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800046c:	0800233c 	.word	0x0800233c
	ldr	r0, =_sdata
 8000470:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000474:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000478:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 800047c:	20000c70 	.word	0x20000c70

08000480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC1_2_IRQHandler>

08000482 <Display_DrawBitmap>:




void Display_DrawBitmap(OLED_t *oled ,uint16_t x, uint16_t y, const unsigned char *bitmap, uint16_t w, uint16_t h, Display_COLOR_t color)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b086      	sub	sp, #24
 8000486:	af00      	add	r7, sp, #0
 8000488:	60f8      	str	r0, [r7, #12]
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	460b      	mov	r3, r1
 800048e:	817b      	strh	r3, [r7, #10]
 8000490:	4613      	mov	r3, r2
 8000492:	813b      	strh	r3, [r7, #8]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000494:	8c3b      	ldrh	r3, [r7, #32]
 8000496:	3307      	adds	r3, #7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <Display_DrawBitmap+0x1c>
 800049c:	3307      	adds	r3, #7
 800049e:	10db      	asrs	r3, r3, #3
 80004a0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80004a6:	2300      	movs	r3, #0
 80004a8:	82bb      	strh	r3, [r7, #20]
 80004aa:	e040      	b.n	800052e <Display_DrawBitmap+0xac>
    {
        for(int16_t i=0; i<w; i++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	827b      	strh	r3, [r7, #18]
 80004b0:	e02f      	b.n	8000512 <Display_DrawBitmap+0x90>
        {
            if(i & 7)
 80004b2:	8a7b      	ldrh	r3, [r7, #18]
 80004b4:	f003 0307 	and.w	r3, r3, #7
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d003      	beq.n	80004c4 <Display_DrawBitmap+0x42>
            {
               byte <<= 1;
 80004bc:	7dfb      	ldrb	r3, [r7, #23]
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	75fb      	strb	r3, [r7, #23]
 80004c2:	e012      	b.n	80004ea <Display_DrawBitmap+0x68>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80004c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80004c8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80004cc:	fb03 f202 	mul.w	r2, r3, r2
 80004d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	da00      	bge.n	80004da <Display_DrawBitmap+0x58>
 80004d8:	3307      	adds	r3, #7
 80004da:	10db      	asrs	r3, r3, #3
 80004dc:	b21b      	sxth	r3, r3
 80004de:	4413      	add	r3, r2
 80004e0:	461a      	mov	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80)
 80004ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	da09      	bge.n	8000506 <Display_DrawBitmap+0x84>
            	Display_DrawPixel(oled ,x+i, y, color);
 80004f2:	8a7a      	ldrh	r2, [r7, #18]
 80004f4:	897b      	ldrh	r3, [r7, #10]
 80004f6:	4413      	add	r3, r2
 80004f8:	b299      	uxth	r1, r3
 80004fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80004fe:	893a      	ldrh	r2, [r7, #8]
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	f000 f97b 	bl	80007fc <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000506:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800050a:	b29b      	uxth	r3, r3
 800050c:	3301      	adds	r3, #1
 800050e:	b29b      	uxth	r3, r3
 8000510:	827b      	strh	r3, [r7, #18]
 8000512:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000516:	8c3b      	ldrh	r3, [r7, #32]
 8000518:	429a      	cmp	r2, r3
 800051a:	dbca      	blt.n	80004b2 <Display_DrawBitmap+0x30>
    for(int16_t j=0; j<h; j++, y++)
 800051c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000520:	b29b      	uxth	r3, r3
 8000522:	3301      	adds	r3, #1
 8000524:	b29b      	uxth	r3, r3
 8000526:	82bb      	strh	r3, [r7, #20]
 8000528:	893b      	ldrh	r3, [r7, #8]
 800052a:	3301      	adds	r3, #1
 800052c:	813b      	strh	r3, [r7, #8]
 800052e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000534:	429a      	cmp	r2, r3
 8000536:	dbb9      	blt.n	80004ac <Display_DrawBitmap+0x2a>
        }
    }
}
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <Display_Init>:




uint8_t Display_Init(OLED_t * oled) {
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af02      	add	r7, sp, #8
 8000548:	6078      	str	r0, [r7, #4]

	//delay
	uint32_t p = 2500;
 800054a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800054e:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000550:	e002      	b.n	8000558 <Display_Init+0x16>
		p--;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3b01      	subs	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d1f9      	bne.n	8000552 <Display_Init+0x10>

	Display_WriteCommand(oled , 0xAE); //display off
 800055e:	2302      	movs	r3, #2
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	23ae      	movs	r3, #174	; 0xae
 8000564:	2200      	movs	r2, #0
 8000566:	213c      	movs	r1, #60	; 0x3c
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f000 fac0 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //Set Memory Addressing Mode
 800056e:	2302      	movs	r3, #2
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2320      	movs	r3, #32
 8000574:	2200      	movs	r2, #0
 8000576:	213c      	movs	r1, #60	; 0x3c
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 fab8 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800057e:	2302      	movs	r3, #2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2310      	movs	r3, #16
 8000584:	2200      	movs	r2, #0
 8000586:	213c      	movs	r1, #60	; 0x3c
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f000 fab0 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	23b0      	movs	r3, #176	; 0xb0
 8000594:	2200      	movs	r2, #0
 8000596:	213c      	movs	r1, #60	; 0x3c
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 faa8 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xC8); //Set COM Output Scan Direction
 800059e:	2302      	movs	r3, #2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	23c8      	movs	r3, #200	; 0xc8
 80005a4:	2200      	movs	r2, #0
 80005a6:	213c      	movs	r1, #60	; 0x3c
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 faa0 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //---set low column address
 80005ae:	2302      	movs	r3, #2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	213c      	movs	r1, #60	; 0x3c
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 fa98 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //---set high column address
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2310      	movs	r3, #16
 80005c4:	2200      	movs	r2, #0
 80005c6:	213c      	movs	r1, #60	; 0x3c
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 fa90 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x40); //--set start line address
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2340      	movs	r3, #64	; 0x40
 80005d4:	2200      	movs	r2, #0
 80005d6:	213c      	movs	r1, #60	; 0x3c
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 fa88 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x81); //--set contrast control register
 80005de:	2302      	movs	r3, #2
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2381      	movs	r3, #129	; 0x81
 80005e4:	2200      	movs	r2, #0
 80005e6:	213c      	movs	r1, #60	; 0x3c
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 fa80 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xFF);
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	23ff      	movs	r3, #255	; 0xff
 80005f4:	2200      	movs	r2, #0
 80005f6:	213c      	movs	r1, #60	; 0x3c
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 fa78 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA1); //--set segment re-map 0 to 127
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	23a1      	movs	r3, #161	; 0xa1
 8000604:	2200      	movs	r2, #0
 8000606:	213c      	movs	r1, #60	; 0x3c
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 fa70 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA6); //--set normal display
 800060e:	2302      	movs	r3, #2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	23a6      	movs	r3, #166	; 0xa6
 8000614:	2200      	movs	r2, #0
 8000616:	213c      	movs	r1, #60	; 0x3c
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 fa68 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA8); //--set multiplex ratio(1 to 64)
 800061e:	2302      	movs	r3, #2
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	23a8      	movs	r3, #168	; 0xa8
 8000624:	2200      	movs	r2, #0
 8000626:	213c      	movs	r1, #60	; 0x3c
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 fa60 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x3F); //
 800062e:	2302      	movs	r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	233f      	movs	r3, #63	; 0x3f
 8000634:	2200      	movs	r2, #0
 8000636:	213c      	movs	r1, #60	; 0x3c
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 fa58 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	23a4      	movs	r3, #164	; 0xa4
 8000644:	2200      	movs	r2, #0
 8000646:	213c      	movs	r1, #60	; 0x3c
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 fa50 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD3); //-set display offset
 800064e:	2302      	movs	r3, #2
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	23d3      	movs	r3, #211	; 0xd3
 8000654:	2200      	movs	r2, #0
 8000656:	213c      	movs	r1, #60	; 0x3c
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 fa48 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //-not offset
 800065e:	2302      	movs	r3, #2
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	2200      	movs	r2, #0
 8000666:	213c      	movs	r1, #60	; 0x3c
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 fa40 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD5); //--set display clock divide ratio/oscillator frequency
 800066e:	2302      	movs	r3, #2
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	23d5      	movs	r3, #213	; 0xd5
 8000674:	2200      	movs	r2, #0
 8000676:	213c      	movs	r1, #60	; 0x3c
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 fa38 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xF0); //--set divide ratio
 800067e:	2302      	movs	r3, #2
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	23f0      	movs	r3, #240	; 0xf0
 8000684:	2200      	movs	r2, #0
 8000686:	213c      	movs	r1, #60	; 0x3c
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 fa30 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD9); //--set pre-charge period
 800068e:	2302      	movs	r3, #2
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	23d9      	movs	r3, #217	; 0xd9
 8000694:	2200      	movs	r2, #0
 8000696:	213c      	movs	r1, #60	; 0x3c
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 fa28 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x22); //
 800069e:	2302      	movs	r3, #2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2322      	movs	r3, #34	; 0x22
 80006a4:	2200      	movs	r2, #0
 80006a6:	213c      	movs	r1, #60	; 0x3c
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 fa20 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDA); //--set Com pins hardware configuration
 80006ae:	2302      	movs	r3, #2
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	23da      	movs	r3, #218	; 0xda
 80006b4:	2200      	movs	r2, #0
 80006b6:	213c      	movs	r1, #60	; 0x3c
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 fa18 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x12);
 80006be:	2302      	movs	r3, #2
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2312      	movs	r3, #18
 80006c4:	2200      	movs	r2, #0
 80006c6:	213c      	movs	r1, #60	; 0x3c
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 fa10 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDB); //--set vcomh
 80006ce:	2302      	movs	r3, #2
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	23db      	movs	r3, #219	; 0xdb
 80006d4:	2200      	movs	r2, #0
 80006d6:	213c      	movs	r1, #60	; 0x3c
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 fa08 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //0x20,0.77xVcc
 80006de:	2302      	movs	r3, #2
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2320      	movs	r3, #32
 80006e4:	2200      	movs	r2, #0
 80006e6:	213c      	movs	r1, #60	; 0x3c
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 fa00 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x8D); //--set DC-DC enable
 80006ee:	2302      	movs	r3, #2
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	238d      	movs	r3, #141	; 0x8d
 80006f4:	2200      	movs	r2, #0
 80006f6:	213c      	movs	r1, #60	; 0x3c
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f000 f9f8 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0x14); //
 80006fe:	2302      	movs	r3, #2
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2314      	movs	r3, #20
 8000704:	2200      	movs	r2, #0
 8000706:	213c      	movs	r1, #60	; 0x3c
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f9f0 	bl	8000aee <Display_I2C_Write>
	Display_WriteCommand(oled , 0xAF); //--turn on SSD1306 panel
 800070e:	2302      	movs	r3, #2
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	23af      	movs	r3, #175	; 0xaf
 8000714:	2200      	movs	r2, #0
 8000716:	213c      	movs	r1, #60	; 0x3c
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f9e8 	bl	8000aee <Display_I2C_Write>


	Display_WriteCommand(oled ,Display_DEACTIVATE_SCROLL);
 800071e:	2302      	movs	r3, #2
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	232e      	movs	r3, #46	; 0x2e
 8000724:	2200      	movs	r2, #0
 8000726:	213c      	movs	r1, #60	; 0x3c
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 f9e0 	bl	8000aee <Display_I2C_Write>
	//Display_Fill(Display_COLOR_WHITE);	// Clear screen
	Display_Fill(oled ,Display_COLOR_BLACK);	// Clear screen
 800072e:	2100      	movs	r1, #0
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 f84c 	bl	80007ce <Display_Fill>
	Display_UpdateScreen(oled);		// Update screen
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f811 	bl	800075e <Display_UpdateScreen>

	// Set default values
	oled->CurrentX = 0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = 0;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

	// Initialized OK
	oled->Initialized = 1;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2201      	movs	r2, #1
 8000750:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409

	// Return OK
	return 1;
 8000754:	2301      	movs	r3, #1
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <Display_UpdateScreen>:

void Display_UpdateScreen(OLED_t * oled) {
 800075e:	b580      	push	{r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af02      	add	r7, sp, #8
 8000764:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e028      	b.n	80007be <Display_UpdateScreen+0x60>
		Display_WriteCommand(oled , 0xB0 + m);
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3b50      	subs	r3, #80	; 0x50
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2202      	movs	r2, #2
 8000774:	9200      	str	r2, [sp, #0]
 8000776:	2200      	movs	r2, #0
 8000778:	213c      	movs	r1, #60	; 0x3c
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f000 f9b7 	bl	8000aee <Display_I2C_Write>
		Display_WriteCommand(oled , 0x00);
 8000780:	2302      	movs	r3, #2
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	2200      	movs	r2, #0
 8000788:	213c      	movs	r1, #60	; 0x3c
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 f9af 	bl	8000aee <Display_I2C_Write>
		Display_WriteCommand(oled , 0x10);
 8000790:	2302      	movs	r3, #2
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2310      	movs	r3, #16
 8000796:	2200      	movs	r2, #0
 8000798:	213c      	movs	r1, #60	; 0x3c
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f9a7 	bl	8000aee <Display_I2C_Write>

		Display_I2C_WriteMulti(oled , 0x3C, 0x40, &(oled->Display_Buffer[Display_WIDTH * m]), Display_WIDTH);
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	01db      	lsls	r3, r3, #7
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	3304      	adds	r3, #4
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	9200      	str	r2, [sp, #0]
 80007ae:	2240      	movs	r2, #64	; 0x40
 80007b0:	213c      	movs	r1, #60	; 0x3c
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 f90e 	bl	80009d4 <Display_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	3301      	adds	r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	2b07      	cmp	r3, #7
 80007c2:	d9d3      	bls.n	800076c <Display_UpdateScreen+0xe>

	}
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <Display_Fill>:


void Display_Fill(OLED_t * oled , Display_COLOR_t color) {
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	460b      	mov	r3, r1
 80007d8:	70fb      	strb	r3, [r7, #3]
	// Set memory, fill a block of memory with value
	memset(oled->Display_Buffer, (color == Display_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(oled->Display_Buffer));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1d18      	adds	r0, r3, #4
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d101      	bne.n	80007e8 <Display_Fill+0x1a>
 80007e4:	2300      	movs	r3, #0
 80007e6:	e000      	b.n	80007ea <Display_Fill+0x1c>
 80007e8:	23ff      	movs	r3, #255	; 0xff
 80007ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ee:	4619      	mov	r1, r3
 80007f0:	f000 fdd6 	bl	80013a0 <memset>
  //memset(starting address, value to be filled, number of bytes to be filled)
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <Display_DrawPixel>:


void Display_DrawPixel(OLED_t * oled ,uint16_t x, uint16_t y, Display_COLOR_t color) {
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	4608      	mov	r0, r1
 8000806:	4611      	mov	r1, r2
 8000808:	461a      	mov	r2, r3
 800080a:	4603      	mov	r3, r0
 800080c:	817b      	strh	r3, [r7, #10]
 800080e:	460b      	mov	r3, r1
 8000810:	813b      	strh	r3, [r7, #8]
 8000812:	4613      	mov	r3, r2
 8000814:	71fb      	strb	r3, [r7, #7]

	if (x >= Display_WIDTH || y >= Display_HEIGHT)
 8000816:	897b      	ldrh	r3, [r7, #10]
 8000818:	2b7f      	cmp	r3, #127	; 0x7f
 800081a:	d84f      	bhi.n	80008bc <Display_DrawPixel+0xc0>
 800081c:	893b      	ldrh	r3, [r7, #8]
 800081e:	2b3f      	cmp	r3, #63	; 0x3f
 8000820:	d84c      	bhi.n	80008bc <Display_DrawPixel+0xc0>
		// Error
		return;
	}

	// Check if pixels are inverted
	if (oled->Inverted) {
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8000828:	2b00      	cmp	r3, #0
 800082a:	d006      	beq.n	800083a <Display_DrawPixel+0x3e>
		color = (Display_COLOR_t)!color;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	71fb      	strb	r3, [r7, #7]
	}

	// Set color
	if (color == Display_COLOR_WHITE) {
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d11d      	bne.n	800087c <Display_DrawPixel+0x80>
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] |= 1 << (y % 8);
 8000840:	897a      	ldrh	r2, [r7, #10]
 8000842:	893b      	ldrh	r3, [r7, #8]
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	b298      	uxth	r0, r3
 8000848:	4603      	mov	r3, r0
 800084a:	01db      	lsls	r3, r3, #7
 800084c:	4413      	add	r3, r2
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	4413      	add	r3, r2
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	b25a      	sxtb	r2, r3
 8000856:	893b      	ldrh	r3, [r7, #8]
 8000858:	f003 0307 	and.w	r3, r3, #7
 800085c:	2101      	movs	r1, #1
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	b25b      	sxtb	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b259      	sxtb	r1, r3
 8000868:	897a      	ldrh	r2, [r7, #10]
 800086a:	4603      	mov	r3, r0
 800086c:	01db      	lsls	r3, r3, #7
 800086e:	4413      	add	r3, r2
 8000870:	b2c9      	uxtb	r1, r1
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	460a      	mov	r2, r1
 8000878:	711a      	strb	r2, [r3, #4]
 800087a:	e020      	b.n	80008be <Display_DrawPixel+0xc2>
	} else {
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] &= ~(1 << (y % 8));
 800087c:	897a      	ldrh	r2, [r7, #10]
 800087e:	893b      	ldrh	r3, [r7, #8]
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	b298      	uxth	r0, r3
 8000884:	4603      	mov	r3, r0
 8000886:	01db      	lsls	r3, r3, #7
 8000888:	4413      	add	r3, r2
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	4413      	add	r3, r2
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	b25a      	sxtb	r2, r3
 8000892:	893b      	ldrh	r3, [r7, #8]
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	2101      	movs	r1, #1
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	4013      	ands	r3, r2
 80008a6:	b259      	sxtb	r1, r3
 80008a8:	897a      	ldrh	r2, [r7, #10]
 80008aa:	4603      	mov	r3, r0
 80008ac:	01db      	lsls	r3, r3, #7
 80008ae:	4413      	add	r3, r2
 80008b0:	b2c9      	uxtb	r1, r1
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4413      	add	r3, r2
 80008b6:	460a      	mov	r2, r1
 80008b8:	711a      	strb	r2, [r3, #4]
 80008ba:	e000      	b.n	80008be <Display_DrawPixel+0xc2>
		return;
 80008bc:	bf00      	nop
	}
}
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <Display_Putc>:
	oled->CurrentX = x;
	oled->CurrentY = y;
}


char Display_Putc(OLED_t * oled ,char ch, FontDef_t *Font, Display_COLOR_t color) {
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b088      	sub	sp, #32
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	461a      	mov	r2, r3
 80008d2:	460b      	mov	r3, r1
 80008d4:	72fb      	strb	r3, [r7, #11]
 80008d6:	4613      	mov	r3, r2
 80008d8:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	// Check available space in LCD
	if (
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80008e0:	461a      	mov	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
	if (
 80008e8:	2b7f      	cmp	r3, #127	; 0x7f
 80008ea:	dc08      	bgt.n	80008fe <Display_Putc+0x38>
		Display_HEIGHT <= (oled->CurrentY + Font->FontHeight)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80008f2:	461a      	mov	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	785b      	ldrb	r3, [r3, #1]
 80008f8:	4413      	add	r3, r2
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 80008fa:	2b3f      	cmp	r3, #63	; 0x3f
 80008fc:	dd01      	ble.n	8000902 <Display_Putc+0x3c>
	) {
		// Error
		return 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	e064      	b.n	80009cc <Display_Putc+0x106>
	}

	// Go through font
	for (i = 0; i < Font->FontHeight; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	e04f      	b.n	80009a8 <Display_Putc+0xe2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	7afb      	ldrb	r3, [r7, #11]
 800090e:	3b20      	subs	r3, #32
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	7849      	ldrb	r1, [r1, #1]
 8000914:	fb01 f303 	mul.w	r3, r1, r3
 8000918:	4619      	mov	r1, r3
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	440b      	add	r3, r1
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
 800092a:	e034      	b.n	8000996 <Display_Putc+0xd0>
			if ((b << j) & 0x8000) {
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d012      	beq.n	8000962 <Display_Putc+0x9c>
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t) color);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	b29b      	uxth	r3, r3
 8000946:	4413      	add	r3, r2
 8000948:	b299      	uxth	r1, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	b29b      	uxth	r3, r3
 8000954:	4413      	add	r3, r2
 8000956:	b29a      	uxth	r2, r3
 8000958:	7abb      	ldrb	r3, [r7, #10]
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f7ff ff4e 	bl	80007fc <Display_DrawPixel>
 8000960:	e016      	b.n	8000990 <Display_Putc+0xca>
			} else {
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t)!color);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	b29b      	uxth	r3, r3
 800096c:	4413      	add	r3, r2
 800096e:	b299      	uxth	r1, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	b29b      	uxth	r3, r3
 800097a:	4413      	add	r3, r2
 800097c:	b29a      	uxth	r2, r3
 800097e:	7abb      	ldrb	r3, [r7, #10]
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf0c      	ite	eq
 8000984:	2301      	moveq	r3, #1
 8000986:	2300      	movne	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f7ff ff36 	bl	80007fc <Display_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	3301      	adds	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	4293      	cmp	r3, r2
 80009a0:	d3c4      	bcc.n	800092c <Display_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3301      	adds	r3, #1
 80009a6:	61fb      	str	r3, [r7, #28]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	785b      	ldrb	r3, [r3, #1]
 80009ac:	461a      	mov	r2, r3
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d3a9      	bcc.n	8000908 <Display_Putc+0x42>
			}
		}
	}

	// Increase pointer
	oled->CurrentX += Font->FontWidth;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	4413      	add	r3, r2
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

	// Return character written
	return ch;
 80009ca:	7afb      	ldrb	r3, [r7, #11]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <Display_I2C_WriteMulti>:




void Display_I2C_WriteMulti(OLED_t * oled,uint8_t address, uint8_t dataRegister, uint8_t *data , uint16_t numBytes)	//data is a pointer
{
 80009d4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80009d8:	b089      	sub	sp, #36	; 0x24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	72fb      	strb	r3, [r7, #11]
 80009e4:	4613      	mov	r3, r2
 80009e6:	72bb      	strb	r3, [r7, #10]
 80009e8:	466b      	mov	r3, sp
 80009ea:	4618      	mov	r0, r3
	uint8_t i;
	uint8_t j;
	uint8_t dt[numBytes];		//necessary for multi Write
 80009ec:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80009ee:	460b      	mov	r3, r1
 80009f0:	3b01      	subs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	b28b      	uxth	r3, r1
 80009f6:	2200      	movs	r2, #0
 80009f8:	4698      	mov	r8, r3
 80009fa:	4691      	mov	r9, r2
 80009fc:	f04f 0200 	mov.w	r2, #0
 8000a00:	f04f 0300 	mov.w	r3, #0
 8000a04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a10:	b28b      	uxth	r3, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	461c      	mov	r4, r3
 8000a16:	4615      	mov	r5, r2
 8000a18:	f04f 0200 	mov.w	r2, #0
 8000a1c:	f04f 0300 	mov.w	r3, #0
 8000a20:	00eb      	lsls	r3, r5, #3
 8000a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a26:	00e2      	lsls	r2, r4, #3
 8000a28:	460b      	mov	r3, r1
 8000a2a:	3307      	adds	r3, #7
 8000a2c:	08db      	lsrs	r3, r3, #3
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	ebad 0d03 	sub.w	sp, sp, r3
 8000a34:	466b      	mov	r3, sp
 8000a36:	3300      	adds	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
	I2C_TypeDef *  i2c = oled->dev;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	613b      	str	r3, [r7, #16]
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8000a40:	7afb      	ldrb	r3, [r7, #11]
 8000a42:	005a      	lsls	r2, r3, #1
 8000a44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a46:	041b      	lsls	r3, r3, #16
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000a5e:	e007      	b.n	8000a70 <Display_I2C_WriteMulti+0x9c>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <Display_I2C_WriteMulti+0x9c>
 8000a6c:	4685      	mov	sp, r0
 8000a6e:	e039      	b.n	8000ae4 <Display_I2C_WriteMulti+0x110>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f1      	beq.n	8000a60 <Display_I2C_WriteMulti+0x8c>
			return;}}

	dt[0] = dataRegister;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	7aba      	ldrb	r2, [r7, #10]
 8000a80:	701a      	strb	r2, [r3, #0]
	for(i=0; i<numBytes; i++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	77bb      	strb	r3, [r7, #30]
 8000a86:	e00a      	b.n	8000a9e <Display_I2C_WriteMulti+0xca>
	{
	dt[i+1] = data[i];	//necessary for multi Write
 8000a88:	7fbb      	ldrb	r3, [r7, #30]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	441a      	add	r2, r3
 8000a8e:	7fbb      	ldrb	r3, [r7, #30]
 8000a90:	3301      	adds	r3, #1
 8000a92:	7811      	ldrb	r1, [r2, #0]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<numBytes; i++)
 8000a98:	7fbb      	ldrb	r3, [r7, #30]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	77bb      	strb	r3, [r7, #30]
 8000a9e:	7fbb      	ldrb	r3, [r7, #30]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d8ef      	bhi.n	8000a88 <Display_I2C_WriteMulti+0xb4>
	}

	for(j=0; j <= (numBytes-1); j++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	77fb      	strb	r3, [r7, #31]
 8000aac:	e014      	b.n	8000ad8 <Display_I2C_WriteMulti+0x104>
	{
		i2c->TXDR = dt[j];
 8000aae:	7ffb      	ldrb	r3, [r7, #31]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	5cd3      	ldrb	r3, [r2, r3]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000aba:	7ffa      	ldrb	r2, [r7, #31]
 8000abc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	da06      	bge.n	8000ad2 <Display_I2C_WriteMulti+0xfe>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}		//ggf TXIS mit TXE ergänzen
 8000ac4:	bf00      	nop
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f9      	beq.n	8000ac6 <Display_I2C_WriteMulti+0xf2>
	for(j=0; j <= (numBytes-1); j++)
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	77fb      	strb	r3, [r7, #31]
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d8e5      	bhi.n	8000aae <Display_I2C_WriteMulti+0xda>
 8000ae2:	4685      	mov	sp, r0
		}
	}
}
 8000ae4:	3724      	adds	r7, #36	; 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000aec:	4770      	bx	lr

08000aee <Display_I2C_Write>:


void Display_I2C_Write(OLED_t * oled, uint8_t address, uint8_t dataRegister, uint8_t data , uint8_t numBytes)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b087      	sub	sp, #28
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	4608      	mov	r0, r1
 8000af8:	4611      	mov	r1, r2
 8000afa:	461a      	mov	r2, r3
 8000afc:	4603      	mov	r3, r0
 8000afe:	70fb      	strb	r3, [r7, #3]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70bb      	strb	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	707b      	strb	r3, [r7, #1]
	uint8_t j;
	uint8_t dt[2];
	I2C_TypeDef *  i2c = oled->dev;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	613b      	str	r3, [r7, #16]
	dt[0] = dataRegister;
 8000b0e:	78bb      	ldrb	r3, [r7, #2]
 8000b10:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b12:	787b      	ldrb	r3, [r7, #1]
 8000b14:	737b      	strb	r3, [r7, #13]

	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	005a      	lsls	r2, r3, #1
 8000b1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	4313      	orrs	r3, r2
 8000b22:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000b36:	e005      	b.n	8000b44 <Display_I2C_Write+0x56>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0310 	and.w	r3, r3, #16
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d126      	bne.n	8000b92 <Display_I2C_Write+0xa4>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0f3      	beq.n	8000b38 <Display_I2C_Write+0x4a>
			return;}}

	for(j=0; j <= (numBytes-1); j++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	75fb      	strb	r3, [r7, #23]
 8000b54:	e017      	b.n	8000b86 <Display_I2C_Write+0x98>
	{
		i2c->TXDR = dt[j];
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	3318      	adds	r3, #24
 8000b5a:	443b      	add	r3, r7
 8000b5c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000b60:	461a      	mov	r2, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000b66:	7dfa      	ldrb	r2, [r7, #23]
 8000b68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	da06      	bge.n	8000b80 <Display_I2C_Write+0x92>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}
 8000b72:	bf00      	nop
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f9      	beq.n	8000b74 <Display_I2C_Write+0x86>
	for(j=0; j <= (numBytes-1); j++)
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	3301      	adds	r3, #1
 8000b84:	75fb      	strb	r3, [r7, #23]
 8000b86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8e2      	bhi.n	8000b56 <Display_I2C_Write+0x68>
 8000b90:	e000      	b.n	8000b94 <Display_I2C_Write+0xa6>
			return;}}
 8000b92:	bf00      	nop
		}
	}
}
 8000b94:	371c      	adds	r7, #28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <gpio_clock_enable>:
 * After each device reset, all peripheral clocks are disabled (except for the SRAM and FLITF).
Before using a peripheral user has to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.  s.50
 */
void gpio_clock_enable(GPIO_TypeDef * Port)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	if(Port == GPIOA)        //  Bit 17 IOPAEN: I/O port A clock enable
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000baa:	d106      	bne.n	8000bba <gpio_clock_enable+0x1e>
	{
		RCC->AHBENR |= (1 << GPIOA_CLOCK_ENABLE_BIT) ;
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb6:	6153      	str	r3, [r2, #20]
	}
	*/
	else{

	}
}
 8000bb8:	e04b      	b.n	8000c52 <gpio_clock_enable+0xb6>
	else if(Port == GPIOB)  //    Bit 18 IOPBEN: I/O port B  clock enable
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <gpio_clock_enable+0xc4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d106      	bne.n	8000bd0 <gpio_clock_enable+0x34>
		RCC->AHBENR |= (1 << GPIOB_CLOCK_ENABLE_BIT) ;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a25      	ldr	r2, [pc, #148]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bcc:	6153      	str	r3, [r2, #20]
}
 8000bce:	e040      	b.n	8000c52 <gpio_clock_enable+0xb6>
	else if(Port == GPIOC)   //  Bit 19 IOPCEN: I/O port C clock enable
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <gpio_clock_enable+0xc8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d106      	bne.n	8000be6 <gpio_clock_enable+0x4a>
		RCC->AHBENR |= (1 << GPIOC_CLOCK_ENABLE_BIT) ;
 8000bd8:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000be2:	6153      	str	r3, [r2, #20]
}
 8000be4:	e035      	b.n	8000c52 <gpio_clock_enable+0xb6>
	else if(Port == GPIOD)    //  Bit 20 IOPDEN: I/O port D clock enable
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <gpio_clock_enable+0xcc>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d106      	bne.n	8000bfc <gpio_clock_enable+0x60>
		RCC->AHBENR |= (1 << GPIOD_CLOCK_ENABLE_BIT) ;
 8000bee:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a1a      	ldr	r2, [pc, #104]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bf8:	6153      	str	r3, [r2, #20]
}
 8000bfa:	e02a      	b.n	8000c52 <gpio_clock_enable+0xb6>
	else if(Port == GPIOE)    //  Bit 21 IOPEEN: I/O port E clock enable
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <gpio_clock_enable+0xd0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d106      	bne.n	8000c12 <gpio_clock_enable+0x76>
		RCC->AHBENR |= (1 << GPIOE_CLOCK_ENABLE_BIT) ;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0e:	6153      	str	r3, [r2, #20]
}
 8000c10:	e01f      	b.n	8000c52 <gpio_clock_enable+0xb6>
	else if(Port == GPIOF)   //  Bit 22 IOPFEN: I/O port F clock enable
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <gpio_clock_enable+0xd4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d106      	bne.n	8000c28 <gpio_clock_enable+0x8c>
		RCC->AHBENR |= (1 << GPIOF_CLOCK_ENABLE_BIT) ;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000c20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c24:	6153      	str	r3, [r2, #20]
}
 8000c26:	e014      	b.n	8000c52 <gpio_clock_enable+0xb6>
	else if(Port == GPIOG)    //  Bit 23 IOPGEN: I/O port G clock enable
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <gpio_clock_enable+0xd8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d106      	bne.n	8000c3e <gpio_clock_enable+0xa2>
		RCC->AHBENR |= (1 << GPIOG_CLOCK_ENABLE_BIT) ;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c3a:	6153      	str	r3, [r2, #20]
}
 8000c3c:	e009      	b.n	8000c52 <gpio_clock_enable+0xb6>
	else if(Port == GPIOH)    //  Bit 16 IOPHEN: I/O port H clock enable
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <gpio_clock_enable+0xdc>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d105      	bne.n	8000c52 <gpio_clock_enable+0xb6>
		RCC->AHBENR |= (1 << GPIOH_CLOCK_ENABLE_BIT) ;
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <gpio_clock_enable+0xc0>)
 8000c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c50:	6153      	str	r3, [r2, #20]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000400 	.word	0x48000400
 8000c64:	48000800 	.word	0x48000800
 8000c68:	48000c00 	.word	0x48000c00
 8000c6c:	48001000 	.word	0x48001000
 8000c70:	48001400 	.word	0x48001400
 8000c74:	48001800 	.word	0x48001800
 8000c78:	48001c00 	.word	0x48001c00

08000c7c <reset_io>:

void reset_io(GPIO_TypeDef * Port ) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	Port->MODER   = 0x00 ;             // set  pin Mode
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
	Port->OTYPER  = 0x00 ;             //set output type OD/PP
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR = 0x00 ;             //set output speed
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  = 0x00 ;             //set pin Pull
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <gpio_config_pin>:

void gpio_config_pin(GPIO_TypeDef * Port , int Pin , GPIO_Mode_t Mode ,
					   GPIO_Speed_t speed ,GPIO_Pull_t pull, GPIO_out_type_t otype)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b085      	sub	sp, #20
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
	Port->MODER   |= (Mode  << 2 * Pin) ; // set  pin Mode
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	79f9      	ldrb	r1, [r7, #7]
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	0052      	lsls	r2, r2, #1
 8000cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	601a      	str	r2, [r3, #0]
	Port->OTYPER  |= (otype << Pin)     ; //set output type OD/PP
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	7f39      	ldrb	r1, [r7, #28]
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR |= (speed << 2 * Pin) ; //set output speed
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	79b9      	ldrb	r1, [r7, #6]
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	0052      	lsls	r2, r2, #1
 8000cec:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  |= (pull  << 2 * Pin) ; //set pin Pull
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	7e39      	ldrb	r1, [r7, #24]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	0052      	lsls	r2, r2, #1
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	431a      	orrs	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	60da      	str	r2, [r3, #12]
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <gpio_set_pinState>:

void gpio_set_pinState(GPIO_TypeDef * Port , int Pin , Pin_State State)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71fb      	strb	r3, [r7, #7]
	//assert pin < 16
	if(State == HIGH)
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d109      	bne.n	8000d3c <gpio_set_pinState+0x28>
	{
		Port->ODR |= (1 << Pin) ;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	431a      	orrs	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	615a      	str	r2, [r3, #20]
	}
	else {
		Port->ODR &= ~(1 << Pin) ;
	}
}
 8000d3a:	e009      	b.n	8000d50 <gpio_set_pinState+0x3c>
		Port->ODR &= ~(1 << Pin) ;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	2101      	movs	r1, #1
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	fa01 f202 	lsl.w	r2, r1, r2
 8000d48:	43d2      	mvns	r2, r2
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	615a      	str	r2, [r3, #20]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
	...

08000d5c <I2C_Init>:

/*
 * TESTED
 */
void I2C_Init(I2C_TypeDef * i2c)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]


 	 if( i2c == I2C1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a6e      	ldr	r2, [pc, #440]	; (8000f20 <I2C_Init+0x1c4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d118      	bne.n	8000d9e <I2C_Init+0x42>
 	 {
 		// PB6  I2C1_SCL, PB7   I2C1_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000d6c:	4b6d      	ldr	r3, [pc, #436]	; (8000f24 <I2C_Init+0x1c8>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	4a6c      	ldr	r2, [pc, #432]	; (8000f24 <I2C_Init+0x1c8>)
 8000d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d76:	6153      	str	r3, [r2, #20]
 		GPIOB->MODER |= (0b10 << GPIO_MODER_MODER6_Pos) |
 8000d78:	4b6b      	ldr	r3, [pc, #428]	; (8000f28 <I2C_Init+0x1cc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a6a      	ldr	r2, [pc, #424]	; (8000f28 <I2C_Init+0x1cc>)
 8000d7e:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000d82:	6013      	str	r3, [r2, #0]
		   (0b10 << GPIO_MODER_MODER7_Pos); // PB6, PB7: Alternate function
		 GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFRL6_Pos) |
 8000d84:	4b68      	ldr	r3, [pc, #416]	; (8000f28 <I2C_Init+0x1cc>)
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	4a67      	ldr	r2, [pc, #412]	; (8000f28 <I2C_Init+0x1cc>)
 8000d8a:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000d8e:	6213      	str	r3, [r2, #32]
		   (4 << GPIO_AFRL_AFRL7_Pos);         // 0100: AF4

		 RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //i2c clock enable
 8000d90:	4b64      	ldr	r3, [pc, #400]	; (8000f24 <I2C_Init+0x1c8>)
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	4a63      	ldr	r2, [pc, #396]	; (8000f24 <I2C_Init+0x1c8>)
 8000d96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9a:	61d3      	str	r3, [r2, #28]
 8000d9c:	e0ac      	b.n	8000ef8 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C2 )
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a62      	ldr	r2, [pc, #392]	; (8000f2c <I2C_Init+0x1d0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d14c      	bne.n	8000e40 <I2C_Init+0xe4>
 	 {
 		//PA9 I2C2_SCL , PA10 I2C2_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000da6:	4b5f      	ldr	r3, [pc, #380]	; (8000f24 <I2C_Init+0x1c8>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a5e      	ldr	r2, [pc, #376]	; (8000f24 <I2C_Init+0x1c8>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	6153      	str	r3, [r2, #20]
 		GPIOA->MODER |= (2 << 18) ;// PA9 10: Alternate function mode
 8000db2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dc0:	6013      	str	r3, [r2, #0]
 		GPIOA->MODER |= (2 << 20) ;//PA10 10: Alternate function mode
 8000dc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd0:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER |= (1 << 9 ) ;//PA9  GPIO port output type register 1: Output open-drain
 8000dd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ddc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de0:	6053      	str	r3, [r2, #4]
 		GPIOA->OTYPER |= (1 << 10) ;//PA10 Oepn Drain
 8000de2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df0:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 18) | (3 << 20) ; //PA9,PA10  GPIO port output speed register 11: High speed
 8000df2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dfc:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8000e00:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR  |= (1<<18) | (1<<20) ;//PA9 ,PA10 GPIO port pull-up/pull-down register 01: Pull-up
 8000e02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e0c:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8000e10:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1] |= ( 4 << 4 );   //select GPIO alternate function high register  PA9  0100: AF4
 8000e12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e18:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e20:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOA->AFR[1] |= (4 << 8);   //select GPIO alternate function high register  PA10   0100: AF4
 8000e22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e30:	6253      	str	r3, [r2, #36]	; 0x24

 		RCC->APB1ENR |=RCC_APB1ENR_I2C2EN ; //i2c clock enable
 8000e32:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <I2C_Init+0x1c8>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a3b      	ldr	r2, [pc, #236]	; (8000f24 <I2C_Init+0x1c8>)
 8000e38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	e05b      	b.n	8000ef8 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C3 )
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a3b      	ldr	r2, [pc, #236]	; (8000f30 <I2C_Init+0x1d4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d157      	bne.n	8000ef8 <I2C_Init+0x19c>
 	 {
 		//PA8 I2C3_SCL , PB5 I2C3_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <I2C_Init+0x1c8>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	4a35      	ldr	r2, [pc, #212]	; (8000f24 <I2C_Init+0x1c8>)
 8000e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e52:	6153      	str	r3, [r2, #20]
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <I2C_Init+0x1c8>)
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	4a32      	ldr	r2, [pc, #200]	; (8000f24 <I2C_Init+0x1c8>)
 8000e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5e:	6153      	str	r3, [r2, #20]

 		GPIOA->MODER   |= (2 << 16) ;// PA8 ALF
 8000e60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6e:	6013      	str	r3, [r2, #0]
 		GPIOB->MODER   |= (2 << 10) ;//PB5 ALF
 8000e70:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <I2C_Init+0x1cc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a2c      	ldr	r2, [pc, #176]	; (8000f28 <I2C_Init+0x1cc>)
 8000e76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e7a:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER  |= (1 << 8 ) ;//PA8 Open Drain
 8000e7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8a:	6053      	str	r3, [r2, #4]
 		GPIOB->OTYPER  |= (1 << 5 ) ;//PB5 Oepn Drain
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <I2C_Init+0x1cc>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a25      	ldr	r2, [pc, #148]	; (8000f28 <I2C_Init+0x1cc>)
 8000e92:	f043 0320 	orr.w	r3, r3, #32
 8000e96:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 16) ;//PA8 High Speed
 8000e98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ea2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000ea6:	6093      	str	r3, [r2, #8]
 		GPIOB->OSPEEDR |= (3 << 10) ; //PB5 High Speed
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <I2C_Init+0x1cc>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <I2C_Init+0x1cc>)
 8000eae:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000eb2:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR   |= (1 << 16) ;//PA8 PULL up
 8000eb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec2:	60d3      	str	r3, [r2, #12]
 		GPIOB->PUPDR   |= (1 << 10) ;//PB5 PULL up
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <I2C_Init+0x1cc>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <I2C_Init+0x1cc>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1]  |= ( 3 << 0 );//select Alf PA8    0011: AF3
 8000ed0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000eda:	f043 0303 	orr.w	r3, r3, #3
 8000ede:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOB->AFR[0]  |= (8 << 20) ;//select Alf PB5     1000: AF8
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <I2C_Init+0x1cc>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <I2C_Init+0x1cc>)
 8000ee6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eea:	6213      	str	r3, [r2, #32]

 		RCC->APB1ENR |=RCC_APB1ENR_I2C3EN ; //i2c clock enable
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <I2C_Init+0x1c8>)
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <I2C_Init+0x1c8>)
 8000ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ef6:	61d3      	str	r3, [r2, #28]
	 * Enabling and disabling the peripheral
	 * The I2C peripheral clock must be configured and enabled in the clock controller.
	 * Then the I2C can be enabled by setting the PE bit in the I2C_CR1 register.
	 * When the I2C is disabled (PE=0), the I2C performs a software reset.
	 */
	 i2c->CR1 &= ~I2C_CR1_PE;                // disable the i2c peripheral clock  (clear PE bit in I2C_CR1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f023 0201 	bic.w	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	601a      	str	r2, [r3, #0]
	/*
	 * I2C timings
	 * The timings must be configured in order to guarantee a correct data hold and setup time,
	 * used in master and slave modes. This is done by programming the PRESC,SCLDEL and SDADEL bits in the I2C_TIMINGR register.
	 */
	 i2c->TIMINGR = (1 << I2C_TIMINGR_PRESC_Pos) | // Standard mode 100 kHz @ 8 MHz (page 849/1141)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <I2C_Init+0x1d8>)
 8000f08:	611a      	str	r2, [r3, #16]
	             (0x13 << I2C_TIMINGR_SCLL_Pos)  |
	             (0xF << I2C_TIMINGR_SCLH_Pos)   |
	             (0x2 << I2C_TIMINGR_SDADEL_Pos) |
	             (0x4 << I2C_TIMINGR_SCLDEL_Pos);

	 i2c->CR1 |= I2C_CR1_PE;// enable the i2c peripheral clock (set PE bit inI2C_CR1)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f043 0201 	orr.w	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]

}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	40005400 	.word	0x40005400
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000400 	.word	0x48000400
 8000f2c:	40005800 	.word	0x40005800
 8000f30:	40007800 	.word	0x40007800
 8000f34:	10420f13 	.word	0x10420f13

08000f38 <search_address>:
/**
 * TETSED
 * return the first found address , -1 if no address found
 */
int8_t search_address(I2C_TypeDef * i2c , uint8_t * address)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	int cnt = 0 ;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
	// 7 bits
	for(int j = 0 ; j < 127 ;j++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	e051      	b.n	8000ff0 <search_address+0xb8>
		{

		i2c->CR2 = ((j << 1) << I2C_CR2_SADD_Pos) |
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	605a      	str	r2, [r3, #4]
		   (1 << I2C_CR2_NBYTES_Pos);
		 i2c->CR2 |= I2C_CR2_START;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	605a      	str	r2, [r3, #4]

		 uint32_t st = get_mtick() ;
 8000f66:	f7ff fa5b 	bl	8000420 <get_mtick>
 8000f6a:	60f8      	str	r0, [r7, #12]

		 while (get_mtick() - st < 20)
 8000f6c:	e034      	b.n	8000fd8 <search_address+0xa0>
		 {
			  if (i2c->ISR & I2C_ISR_NACKF)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <search_address+0x50>
			  {
				  i2c->ICR |= (1<<3)|(1<<4); //clear addr and clear start
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f043 0218 	orr.w	r2, r3, #24
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	61da      	str	r2, [r3, #28]
				 break ;// while(1) ;
 8000f86:	e030      	b.n	8000fea <search_address+0xb2>
			  }
			  if((i2c->ISR & I2C_ISR_TXIS) > 0)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d021      	beq.n	8000fd8 <search_address+0xa0>
			  {
				  //data = j ;
				  address[cnt] = j ;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	701a      	strb	r2, [r3, #0]
				  cnt++ ;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
				  //i2c->CR2 &= ~(1<<I2C_CR2_NBYTES_Pos) ;
				  i2c->TXDR = 0x00 ;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
				  while ((i2c->ISR & I2C_ISR_TC) == 0) ;
 8000fac:	bf00      	nop
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <search_address+0x76>

				  i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	605a      	str	r2, [r3, #4]
				  delay_ms(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f7ff fa14 	bl	80003f4 <delay_ms>
				  if(cnt > 3 )
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	dd0a      	ble.n	8000fe8 <search_address+0xb0>
				  {
					  return -1 ;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e016      	b.n	8001006 <search_address+0xce>
		 while (get_mtick() - st < 20)
 8000fd8:	f7ff fa22 	bl	8000420 <get_mtick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b13      	cmp	r3, #19
 8000fe4:	d9c3      	bls.n	8000f6e <search_address+0x36>
 8000fe6:	e000      	b.n	8000fea <search_address+0xb2>
				  }
				  //return j ;
				  break ;
 8000fe8:	bf00      	nop
	for(int j = 0 ; j < 127 ;j++)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	3301      	adds	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b7e      	cmp	r3, #126	; 0x7e
 8000ff4:	ddaa      	ble.n	8000f4c <search_address+0x14>

			  }
		 }

		}
	i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	605a      	str	r2, [r3, #4]

	return cnt ;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	b25b      	sxtb	r3, r3
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <keypad_init>:
 * Let's assume your program switches all four columns to low and then switches the first row to high.
 * Then it reads the input states of each column and reads pin 1 high.
 * This means that a contact has been made between column 4 and row 1, so the 'A' key has been pressed.
 */
void keypad_init(GPIO_TypeDef * port , int s_pin)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	keypad_port = port   ;
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <keypad_init+0x2c>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6013      	str	r3, [r2, #0]
	start_pin   = s_pin  ;
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <keypad_init+0x30>)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	6013      	str	r3, [r2, #0]
	gpio_clock_enable(port) ;
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fdb8 	bl	8000b9c <gpio_clock_enable>
	keypad_config_key_direction(port , s_pin) ;////set  the first 4 pins as output and the second 4 pins as input
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f808 	bl	8001044 <keypad_config_key_direction>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000c64 	.word	0x20000c64
 8001040:	20000c68 	.word	0x20000c68

08001044 <keypad_config_key_direction>:
 */



static void keypad_config_key_direction( GPIO_TypeDef * port , int s_pin)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af02      	add	r7, sp, #8
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fe14 	bl	8000c7c <reset_io>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r1  1
 8001054:	6839      	ldr	r1, [r7, #0]
 8001056:	1c4b      	adds	r3, r1, #1
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	2300      	movs	r3, #0
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2300      	movs	r3, #0
 8001064:	2201      	movs	r2, #1
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fe1d 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r2  0
 800106c:	6839      	ldr	r1, [r7, #0]
 800106e:	1c4b      	adds	r3, r1, #1
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	2300      	movs	r3, #0
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2300      	movs	r3, #0
 800107c:	2201      	movs	r2, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fe11 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r3  0
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	1c4b      	adds	r3, r1, #1
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	2300      	movs	r3, #0
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	2300      	movs	r3, #0
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2300      	movs	r3, #0
 8001094:	2201      	movs	r2, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fe05 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r4  0
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	1c4b      	adds	r3, r1, #1
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	2300      	movs	r3, #0
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	2300      	movs	r3, #0
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2300      	movs	r3, #0
 80010ac:	2201      	movs	r2, #1
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fdf9 	bl	8000ca6 <gpio_config_pin>
	//configure the pins as Intput with pull-up
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C1  1
 80010b4:	6839      	ldr	r1, [r7, #0]
 80010b6:	1c4b      	adds	r3, r1, #1
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	2300      	movs	r3, #0
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	2301      	movs	r3, #1
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2300      	movs	r3, #0
 80010c4:	2200      	movs	r2, #0
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fded 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C2  0
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	1c4b      	adds	r3, r1, #1
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	2301      	movs	r3, #1
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2300      	movs	r3, #0
 80010dc:	2200      	movs	r2, #0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fde1 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C3  1
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	1c4b      	adds	r3, r1, #1
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	2300      	movs	r3, #0
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	2200      	movs	r2, #0
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fdd5 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C4  1
 80010fc:	6839      	ldr	r1, [r7, #0]
 80010fe:	1c4b      	adds	r3, r1, #1
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	2301      	movs	r3, #1
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	2200      	movs	r2, #0
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fdc9 	bl	8000ca6 <gpio_config_pin>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <keypad_inverse_pin_direction>:

static void keypad_inverse_pin_direction( GPIO_TypeDef * port , int s_pin)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af02      	add	r7, sp, #8
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fda8 	bl	8000c7c <reset_io>
	//configure the pins as Intput with pull-down
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R1     0
 800112c:	6839      	ldr	r1, [r7, #0]
 800112e:	1c4b      	adds	r3, r1, #1
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	2300      	movs	r3, #0
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	2302      	movs	r3, #2
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2300      	movs	r3, #0
 800113c:	2200      	movs	r2, #0
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fdb1 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R2     1
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	1c4b      	adds	r3, r1, #1
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	2302      	movs	r3, #2
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2300      	movs	r3, #0
 8001154:	2200      	movs	r2, #0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fda5 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R3     1
 800115c:	6839      	ldr	r1, [r7, #0]
 800115e:	1c4b      	adds	r3, r1, #1
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	2302      	movs	r3, #2
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2300      	movs	r3, #0
 800116c:	2200      	movs	r2, #0
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fd99 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN  , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R4     1
 8001174:	6839      	ldr	r1, [r7, #0]
 8001176:	1c4b      	adds	r3, r1, #1
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	2300      	movs	r3, #0
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	2302      	movs	r3, #2
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	2200      	movs	r2, #0
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fd8d 	bl	8000ca6 <gpio_config_pin>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C1     0
 800118c:	6839      	ldr	r1, [r7, #0]
 800118e:	1c4b      	adds	r3, r1, #1
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	2300      	movs	r3, #0
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	2201      	movs	r2, #1
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fd81 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C2     1
 80011a4:	6839      	ldr	r1, [r7, #0]
 80011a6:	1c4b      	adds	r3, r1, #1
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2300      	movs	r3, #0
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	2201      	movs	r2, #1
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fd75 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C3     0
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	1c4b      	adds	r3, r1, #1
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	2300      	movs	r3, #0
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	2300      	movs	r3, #0
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2300      	movs	r3, #0
 80011cc:	2201      	movs	r2, #1
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fd69 	bl	8000ca6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C4     0
 80011d4:	6839      	ldr	r1, [r7, #0]
 80011d6:	1c4b      	adds	r3, r1, #1
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	2300      	movs	r3, #0
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	2300      	movs	r3, #0
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2300      	movs	r3, #0
 80011e4:	2201      	movs	r2, #1
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fd5d 	bl	8000ca6 <gpio_config_pin>

}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <keypad_get_pressedkey>:

/**
 * return the pressedkey other wise 0
 */
char keypad_get_pressedkey()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

	uint16_t porte = 0;   // set porte to zero where the pins of the used GPIO port (C , Pins : 0-15) will be stored.
 80011fa:	2300      	movs	r3, #0
 80011fc:	817b      	strh	r3, [r7, #10]
	porte = GPIOC->IDR ; /* IDR is one of the GPIO registers that contains the input states of the pins of a GPIO port.
 80011fe:	4b51      	ldr	r3, [pc, #324]	; (8001344 <keypad_get_pressedkey+0x150>)
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	817b      	strh	r3, [r7, #10]
	                      * We can read the whole pin status of a GPIO port with the IDR register.
	                      */
    uint8_t  eidr  = 0;  // set eidr to zero where only the 8 used pins will be stored.
 8001204:	2300      	movs	r3, #0
 8001206:	727b      	strb	r3, [r7, #9]
	uint8_t  ch    = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	723b      	strb	r3, [r7, #8]
	char ret = 0 ;
 800120c:	2300      	movs	r3, #0
 800120e:	75fb      	strb	r3, [r7, #23]

    switch(state)
 8001210:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <keypad_get_pressedkey+0x154>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b02      	cmp	r3, #2
 8001216:	f000 8087 	beq.w	8001328 <keypad_get_pressedkey+0x134>
 800121a:	2b02      	cmp	r3, #2
 800121c:	f300 8088 	bgt.w	8001330 <keypad_get_pressedkey+0x13c>
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <keypad_get_pressedkey+0x36>
 8001224:	2b01      	cmp	r3, #1
 8001226:	d072      	beq.n	800130e <keypad_get_pressedkey+0x11a>

				state = State_free ;
				break ;
			}
		default :
			break ;
 8001228:	e082      	b.n	8001330 <keypad_get_pressedkey+0x13c>
				eidr = (porte >> start_pin) ;//  & 0xff ; // get the state od the keypad pins
 800122a:	897a      	ldrh	r2, [r7, #10]
 800122c:	4b47      	ldr	r3, [pc, #284]	; (800134c <keypad_get_pressedkey+0x158>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	fa42 f303 	asr.w	r3, r2, r3
 8001234:	727b      	strb	r3, [r7, #9]
				if(eidr != DEFAULT_KEYPAD_PORT_INP)       // if now the value is different than the DEFAULT_KEYPAD_PORT_INP 0xf0
 8001236:	7a7b      	ldrb	r3, [r7, #9]
 8001238:	2bf0      	cmp	r3, #240	; 0xf0
 800123a:	d07b      	beq.n	8001334 <keypad_get_pressedkey+0x140>
					ch = ~eidr;                           // set the inverse of eidr in ch
 800123c:	7a7b      	ldrb	r3, [r7, #9]
 800123e:	43db      	mvns	r3, r3
 8001240:	723b      	strb	r3, [r7, #8]
					ch = ch & DEFAULT_KEYPAD_PORT_INP;    // with the addition of 0xf0 we get 1 in the changed bit position
 8001242:	7a3b      	ldrb	r3, [r7, #8]
 8001244:	f023 030f 	bic.w	r3, r3, #15
 8001248:	723b      	strb	r3, [r7, #8]
					keypad_inverse_pin_direction(keypad_port ,start_pin ) ;
 800124a:	4b41      	ldr	r3, [pc, #260]	; (8001350 <keypad_get_pressedkey+0x15c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a3f      	ldr	r2, [pc, #252]	; (800134c <keypad_get_pressedkey+0x158>)
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff61 	bl	800111c <keypad_inverse_pin_direction>
					uint16_t out = (ch << start_pin) ;  //
 800125a:	7a3a      	ldrb	r2, [r7, #8]
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <keypad_get_pressedkey+0x158>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	80fb      	strh	r3, [r7, #6]
					keypad_port->ODR = out ;
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <keypad_get_pressedkey+0x15c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	88fa      	ldrh	r2, [r7, #6]
 800126c:	615a      	str	r2, [r3, #20]
					delay_ms(1) ;
 800126e:	2001      	movs	r0, #1
 8001270:	f7ff f8c0 	bl	80003f4 <delay_ms>
					porte = keypad_port->IDR ;//get the state of input port
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <keypad_get_pressedkey+0x15c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	817b      	strh	r3, [r7, #10]
					eidr = (porte >> start_pin) ;//& 0xff ; //get the state of keypad pins
 800127c:	897a      	ldrh	r2, [r7, #10]
 800127e:	4b33      	ldr	r3, [pc, #204]	; (800134c <keypad_get_pressedkey+0x158>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	fa42 f303 	asr.w	r3, r2, r3
 8001286:	727b      	strb	r3, [r7, #9]
					int col = 0 ;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
					for(col = 0 ; col <4 ; col++)
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	e00d      	b.n	80012ae <keypad_get_pressedkey+0xba>
						if(   (((eidr & 0xf0) >> 4) &  (1<<col)) != 0 )
 8001292:	7a7b      	ldrb	r3, [r7, #9]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fa42 f303 	asr.w	r3, r2, r3
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d106      	bne.n	80012b6 <keypad_get_pressedkey+0xc2>
					for(col = 0 ; col <4 ; col++)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	3301      	adds	r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	ddee      	ble.n	8001292 <keypad_get_pressedkey+0x9e>
 80012b4:	e000      	b.n	80012b8 <keypad_get_pressedkey+0xc4>
							break ;
 80012b6:	bf00      	nop
					int row = 0 ;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
					for(row = 0 ; row <4 ; row++)
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	e00c      	b.n	80012dc <keypad_get_pressedkey+0xe8>
						if( ((eidr & 0x0f) & (1<<row)) != 0)
 80012c2:	7a7b      	ldrb	r3, [r7, #9]
 80012c4:	f003 020f 	and.w	r2, r3, #15
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	fa42 f303 	asr.w	r3, r2, r3
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d106      	bne.n	80012e4 <keypad_get_pressedkey+0xf0>
					for(row = 0 ; row <4 ; row++)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	ddef      	ble.n	80012c2 <keypad_get_pressedkey+0xce>
 80012e2:	e000      	b.n	80012e6 <keypad_get_pressedkey+0xf2>
							break ;
 80012e4:	bf00      	nop
					ret = keys[row][col] ;
 80012e6:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <keypad_get_pressedkey+0x160>)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	441a      	add	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	75fb      	strb	r3, [r7, #23]
					keypad_config_key_direction(keypad_port ,start_pin ) ;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <keypad_get_pressedkey+0x15c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <keypad_get_pressedkey+0x158>)
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fe9f 	bl	8001044 <keypad_config_key_direction>
					state = State_key_pressed ;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <keypad_get_pressedkey+0x154>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
				break ;
 800130c:	e012      	b.n	8001334 <keypad_get_pressedkey+0x140>
				eidr = (porte >> start_pin) & 0xff ;
 800130e:	897a      	ldrh	r2, [r7, #10]
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <keypad_get_pressedkey+0x158>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	fa42 f303 	asr.w	r3, r2, r3
 8001318:	727b      	strb	r3, [r7, #9]
				if(eidr == DEFAULT_KEYPAD_PORT_INP)
 800131a:	7a7b      	ldrb	r3, [r7, #9]
 800131c:	2bf0      	cmp	r3, #240	; 0xf0
 800131e:	d10b      	bne.n	8001338 <keypad_get_pressedkey+0x144>
					state = State_key_released ;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <keypad_get_pressedkey+0x154>)
 8001322:	2202      	movs	r2, #2
 8001324:	701a      	strb	r2, [r3, #0]
				break ;
 8001326:	e007      	b.n	8001338 <keypad_get_pressedkey+0x144>
				state = State_free ;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <keypad_get_pressedkey+0x154>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
				break ;
 800132e:	e004      	b.n	800133a <keypad_get_pressedkey+0x146>
			break ;
 8001330:	bf00      	nop
 8001332:	e002      	b.n	800133a <keypad_get_pressedkey+0x146>
				break ;
 8001334:	bf00      	nop
 8001336:	e000      	b.n	800133a <keypad_get_pressedkey+0x146>
				break ;
 8001338:	bf00      	nop

	}


	return ret ;
 800133a:	7dfb      	ldrb	r3, [r7, #23]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	48000800 	.word	0x48000800
 8001348:	20000c6c 	.word	0x20000c6c
 800134c:	20000c68 	.word	0x20000c68
 8001350:	20000c64 	.word	0x20000c64
 8001354:	2000000c 	.word	0x2000000c

08001358 <__libc_init_array>:
 8001358:	b570      	push	{r4, r5, r6, lr}
 800135a:	4d0d      	ldr	r5, [pc, #52]	; (8001390 <__libc_init_array+0x38>)
 800135c:	4c0d      	ldr	r4, [pc, #52]	; (8001394 <__libc_init_array+0x3c>)
 800135e:	1b64      	subs	r4, r4, r5
 8001360:	10a4      	asrs	r4, r4, #2
 8001362:	2600      	movs	r6, #0
 8001364:	42a6      	cmp	r6, r4
 8001366:	d109      	bne.n	800137c <__libc_init_array+0x24>
 8001368:	4d0b      	ldr	r5, [pc, #44]	; (8001398 <__libc_init_array+0x40>)
 800136a:	4c0c      	ldr	r4, [pc, #48]	; (800139c <__libc_init_array+0x44>)
 800136c:	f000 f820 	bl	80013b0 <_init>
 8001370:	1b64      	subs	r4, r4, r5
 8001372:	10a4      	asrs	r4, r4, #2
 8001374:	2600      	movs	r6, #0
 8001376:	42a6      	cmp	r6, r4
 8001378:	d105      	bne.n	8001386 <__libc_init_array+0x2e>
 800137a:	bd70      	pop	{r4, r5, r6, pc}
 800137c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001380:	4798      	blx	r3
 8001382:	3601      	adds	r6, #1
 8001384:	e7ee      	b.n	8001364 <__libc_init_array+0xc>
 8001386:	f855 3b04 	ldr.w	r3, [r5], #4
 800138a:	4798      	blx	r3
 800138c:	3601      	adds	r6, #1
 800138e:	e7f2      	b.n	8001376 <__libc_init_array+0x1e>
 8001390:	08002334 	.word	0x08002334
 8001394:	08002334 	.word	0x08002334
 8001398:	08002334 	.word	0x08002334
 800139c:	08002338 	.word	0x08002338

080013a0 <memset>:
 80013a0:	4402      	add	r2, r0
 80013a2:	4603      	mov	r3, r0
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d100      	bne.n	80013aa <memset+0xa>
 80013a8:	4770      	bx	lr
 80013aa:	f803 1b01 	strb.w	r1, [r3], #1
 80013ae:	e7f9      	b.n	80013a4 <memset+0x4>

080013b0 <_init>:
 80013b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b2:	bf00      	nop
 80013b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b6:	bc08      	pop	{r3}
 80013b8:	469e      	mov	lr, r3
 80013ba:	4770      	bx	lr

080013bc <_fini>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	bf00      	nop
 80013c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c2:	bc08      	pop	{r3}
 80013c4:	469e      	mov	lr, r3
 80013c6:	4770      	bx	lr
