
WiSe2223_GruppeK3_s_Projektaufgabe_Digitaluhr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fac  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08002eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          00000c64  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000ce4  20000ce4  00020080  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002b3f  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000c2e  00000000  00000000  00022be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000230  00000000  00000000  00023818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000001b0  00000000  00000000  00023a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00018f1f  00000000  00000000  00023bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000356f  00000000  00000000  0003cb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00087f5b  00000000  00000000  00040086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c7fe1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000b30  00000000  00000000  000c8034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001ee0 	.word	0x08001ee0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08001ee0 	.word	0x08001ee0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	db0a      	blt.n	80002aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	490c      	ldr	r1, [pc, #48]	; (80002cc <__NVIC_SetPriority+0x4c>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	0112      	lsls	r2, r2, #4
 80002a0:	b2d2      	uxtb	r2, r2
 80002a2:	440b      	add	r3, r1
 80002a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a8:	e00a      	b.n	80002c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4908      	ldr	r1, [pc, #32]	; (80002d0 <__NVIC_SetPriority+0x50>)
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	3b04      	subs	r3, #4
 80002b8:	0112      	lsls	r2, r2, #4
 80002ba:	b2d2      	uxtb	r2, r2
 80002bc:	440b      	add	r3, r1
 80002be:	761a      	strb	r2, [r3, #24]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e100 	.word	0xe000e100
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <main>:
OLED_t lcd1 ;
OLED_t lcd2 ;
OLED_t lcd3 ;

int main()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08c      	sub	sp, #48	; 0x30
 80002d8:	af04      	add	r7, sp, #16

  	while ((RCC->CR & 2) == 0);  //wait until HSI is Ready
 80002da:	bf00      	nop
 80002dc:	4b62      	ldr	r3, [pc, #392]	; (8000468 <main+0x194>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f003 0302 	and.w	r3, r3, #2
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0f9      	beq.n	80002dc <main+0x8>

	systick_enable() ;
 80002e8:	f000 f8d6 	bl	8000498 <systick_enable>

	RCC->CFGR &= ~(1<<7)  ; //reset HPRE4 The AHB clock frequency == sys clk
 80002ec:	4b5e      	ldr	r3, [pc, #376]	; (8000468 <main+0x194>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	4a5d      	ldr	r2, [pc, #372]	; (8000468 <main+0x194>)
 80002f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002f6:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<12) ; // APB1 clock no division
 80002f8:	4b5b      	ldr	r3, [pc, #364]	; (8000468 <main+0x194>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a5a      	ldr	r2, [pc, #360]	; (8000468 <main+0x194>)
 80002fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000302:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<15) ; // APB2 clock no division
 8000304:	4b58      	ldr	r3, [pc, #352]	; (8000468 <main+0x194>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4a57      	ldr	r2, [pc, #348]	; (8000468 <main+0x194>)
 800030a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800030e:	6053      	str	r3, [r2, #4]

	gpio_clock_enable(GPIOA) ;
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f000 fcfa 	bl	8000d0c <gpio_clock_enable>

	gpio_config_pin(GPIOA,5,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 8000318:	2300      	movs	r3, #0
 800031a:	9301      	str	r3, [sp, #4]
 800031c:	2300      	movs	r3, #0
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	2300      	movs	r3, #0
 8000322:	2201      	movs	r2, #1
 8000324:	2105      	movs	r1, #5
 8000326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032a:	f000 fd74 	bl	8000e16 <gpio_config_pin>

	gpio_set_pinState(GPIOA , 5 , LOW) ;
 800032e:	2201      	movs	r2, #1
 8000330:	2105      	movs	r1, #5
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f000 fda5 	bl	8000e84 <gpio_set_pinState>

	 data = search_address(I2C1 , buff) ;

#endif

	 lcd1.dev = I2C1 ;
 800033a:	4b4c      	ldr	r3, [pc, #304]	; (800046c <main+0x198>)
 800033c:	4a4c      	ldr	r2, [pc, #304]	; (8000470 <main+0x19c>)
 800033e:	601a      	str	r2, [r3, #0]
	 lcd2.dev = I2C2 ;
 8000340:	4b4c      	ldr	r3, [pc, #304]	; (8000474 <main+0x1a0>)
 8000342:	4a4d      	ldr	r2, [pc, #308]	; (8000478 <main+0x1a4>)
 8000344:	601a      	str	r2, [r3, #0]
	 lcd3.dev = I2C3 ;
 8000346:	4b4d      	ldr	r3, [pc, #308]	; (800047c <main+0x1a8>)
 8000348:	4a4d      	ldr	r2, [pc, #308]	; (8000480 <main+0x1ac>)
 800034a:	601a      	str	r2, [r3, #0]

	 I2C_Init(I2C1) ;
 800034c:	4848      	ldr	r0, [pc, #288]	; (8000470 <main+0x19c>)
 800034e:	f000 fdbd 	bl	8000ecc <I2C_Init>
	 I2C_Init(I2C2) ;
 8000352:	4849      	ldr	r0, [pc, #292]	; (8000478 <main+0x1a4>)
 8000354:	f000 fdba 	bl	8000ecc <I2C_Init>
	 I2C_Init(I2C3) ;
 8000358:	4849      	ldr	r0, [pc, #292]	; (8000480 <main+0x1ac>)
 800035a:	f000 fdb7 	bl	8000ecc <I2C_Init>


	 uint8_t buff1[5] = {0};
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
 8000362:	2300      	movs	r3, #0
 8000364:	773b      	strb	r3, [r7, #28]
	 buff1[4] = 0x91 ;
 8000366:	2391      	movs	r3, #145	; 0x91
 8000368:	773b      	strb	r3, [r7, #28]
	 buff1[0] = RTC_REG_MINUTE ;
 800036a:	2301      	movs	r3, #1
 800036c:	763b      	strb	r3, [r7, #24]




	 I2C_Write(I2C1 , 0x68 , buff1 , 1) ;
 800036e:	f107 0218 	add.w	r2, r7, #24
 8000372:	2301      	movs	r3, #1
 8000374:	2168      	movs	r1, #104	; 0x68
 8000376:	483e      	ldr	r0, [pc, #248]	; (8000470 <main+0x19c>)
 8000378:	f000 fe96 	bl	80010a8 <I2C_Write>
	 I2C_Read(I2C1 , 0x68 , buff1 , 1) ;
 800037c:	f107 0218 	add.w	r2, r7, #24
 8000380:	2301      	movs	r3, #1
 8000382:	2168      	movs	r1, #104	; 0x68
 8000384:	483a      	ldr	r0, [pc, #232]	; (8000470 <main+0x19c>)
 8000386:	f000 fed8 	bl	800113a <I2C_Read>



	 Display_Init(&lcd3);	//Configure Display
 800038a:	483c      	ldr	r0, [pc, #240]	; (800047c <main+0x1a8>)
 800038c:	f000 f957 	bl	800063e <Display_Init>
	 Display_Init(&lcd2);	//Configure Display
 8000390:	4838      	ldr	r0, [pc, #224]	; (8000474 <main+0x1a0>)
 8000392:	f000 f954 	bl	800063e <Display_Init>
	 Display_Init(&lcd1);	//Configure Display
 8000396:	4835      	ldr	r0, [pc, #212]	; (800046c <main+0x198>)
 8000398:	f000 f951 	bl	800063e <Display_Init>
	 keypad_init(GPIOC , 0) ;
 800039c:	2100      	movs	r1, #0
 800039e:	4839      	ldr	r0, [pc, #228]	; (8000484 <main+0x1b0>)
 80003a0:	f000 ff1c 	bl	80011dc <keypad_init>
	 //Example: print a picture on screen
	Display_Fill(&lcd3, Display_COLOR_BLACK);	//the entire Display is white (written to RAM)
 80003a4:	2100      	movs	r1, #0
 80003a6:	4835      	ldr	r0, [pc, #212]	; (800047c <main+0x1a8>)
 80003a8:	f000 fa8f 	bl	80008ca <Display_Fill>
	Display_DrawBitmap(&lcd3 ,0, 0, image_data, 128, 64, Display_COLOR_WHITE);	//data of picture into RAM	(available pictures: helix & looping)
 80003ac:	2301      	movs	r3, #1
 80003ae:	9302      	str	r3, [sp, #8]
 80003b0:	2340      	movs	r3, #64	; 0x40
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	4b33      	ldr	r3, [pc, #204]	; (8000488 <main+0x1b4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	482f      	ldr	r0, [pc, #188]	; (800047c <main+0x1a8>)
 80003c0:	f000 f8dd 	bl	800057e <Display_DrawBitmap>
	Display_UpdateScreen(&lcd3);
 80003c4:	482d      	ldr	r0, [pc, #180]	; (800047c <main+0x1a8>)
 80003c6:	f000 fa48 	bl	800085a <Display_UpdateScreen>

	Display_Fill(&lcd2, Display_COLOR_WHITE );	//the entire Display is white (written to RAM)
 80003ca:	2101      	movs	r1, #1
 80003cc:	4829      	ldr	r0, [pc, #164]	; (8000474 <main+0x1a0>)
 80003ce:	f000 fa7c 	bl	80008ca <Display_Fill>
	Display_UpdateScreen(&lcd2);
 80003d2:	4828      	ldr	r0, [pc, #160]	; (8000474 <main+0x1a0>)
 80003d4:	f000 fa41 	bl	800085a <Display_UpdateScreen>

	Display_Fill(&lcd1, Display_COLOR_BLACK );	//the entire Display is white (written to RAM)
 80003d8:	2100      	movs	r1, #0
 80003da:	4824      	ldr	r0, [pc, #144]	; (800046c <main+0x198>)
 80003dc:	f000 fa75 	bl	80008ca <Display_Fill>
	Display_DrawBitmap(&lcd1 ,0, 0, alarm_logo, 128, 64, Display_COLOR_WHITE);	//data of picture into RAM	(available pictures: helix & looping)
 80003e0:	2301      	movs	r3, #1
 80003e2:	9302      	str	r3, [sp, #8]
 80003e4:	2340      	movs	r3, #64	; 0x40
 80003e6:	9301      	str	r3, [sp, #4]
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	4b27      	ldr	r3, [pc, #156]	; (800048c <main+0x1b8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	2100      	movs	r1, #0
 80003f2:	481e      	ldr	r0, [pc, #120]	; (800046c <main+0x198>)
 80003f4:	f000 f8c3 	bl	800057e <Display_DrawBitmap>
	Display_UpdateScreen(&lcd1);
 80003f8:	481c      	ldr	r0, [pc, #112]	; (800046c <main+0x198>)
 80003fa:	f000 fa2e 	bl	800085a <Display_UpdateScreen>
	rtc_time_t t ;

	char my_time[20] ;
	while(1)
	{
		rtc_get_time(&t) ;
 80003fe:	f107 0314 	add.w	r3, r7, #20
 8000402:	4618      	mov	r0, r3
 8000404:	f001 f8a8 	bl	8001558 <rtc_get_time>

		sprintf(my_time , "%d:%d:%d",t.hr , t.min , t.sec) ;
 8000408:	7dbb      	ldrb	r3, [r7, #22]
 800040a:	461a      	mov	r2, r3
 800040c:	7d7b      	ldrb	r3, [r7, #21]
 800040e:	4619      	mov	r1, r3
 8000410:	7d3b      	ldrb	r3, [r7, #20]
 8000412:	4638      	mov	r0, r7
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	460b      	mov	r3, r1
 8000418:	491d      	ldr	r1, [pc, #116]	; (8000490 <main+0x1bc>)
 800041a:	f001 f8e7 	bl	80015ec <siprintf>


		Display_GotoXY(&lcd2 , 20,5);
 800041e:	2205      	movs	r2, #5
 8000420:	2114      	movs	r1, #20
 8000422:	4814      	ldr	r0, [pc, #80]	; (8000474 <main+0x1a0>)
 8000424:	f000 facd 	bl	80009c2 <Display_GotoXY>
		Display_Puts(&lcd2 ,my_time ,& Font_7x10 , Display_COLOR_BLACK ) ;
 8000428:	4639      	mov	r1, r7
 800042a:	2300      	movs	r3, #0
 800042c:	4a19      	ldr	r2, [pc, #100]	; (8000494 <main+0x1c0>)
 800042e:	4811      	ldr	r0, [pc, #68]	; (8000474 <main+0x1a0>)
 8000430:	f000 fb63 	bl	8000afa <Display_Puts>
		Display_UpdateScreen(&lcd2);
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <main+0x1a0>)
 8000436:	f000 fa10 	bl	800085a <Display_UpdateScreen>
		char c = keypad_get_pressedkey() ;
 800043a:	f000 ffc1 	bl	80013c0 <keypad_get_pressedkey>
 800043e:	4603      	mov	r3, r0
 8000440:	77fb      	strb	r3, [r7, #31]

		if(c != 0)
 8000442:	7ffb      	ldrb	r3, [r7, #31]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0da      	beq.n	80003fe <main+0x12a>
		{
			gpio_set_pinState(GPIOA , 5 , HIGH) ;
 8000448:	2200      	movs	r2, #0
 800044a:	2105      	movs	r1, #5
 800044c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000450:	f000 fd18 	bl	8000e84 <gpio_set_pinState>
			Display_Putc(&lcd2 , c , &Font_7x10 , Display_COLOR_BLACK) ;
 8000454:	7ff9      	ldrb	r1, [r7, #31]
 8000456:	2300      	movs	r3, #0
 8000458:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <main+0x1c0>)
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <main+0x1a0>)
 800045c:	f000 fac6 	bl	80009ec <Display_Putc>
			Display_UpdateScreen(&lcd2);
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <main+0x1a0>)
 8000462:	f000 f9fa 	bl	800085a <Display_UpdateScreen>
	{
 8000466:	e7ca      	b.n	80003fe <main+0x12a>
 8000468:	40021000 	.word	0x40021000
 800046c:	200000a0 	.word	0x200000a0
 8000470:	40005400 	.word	0x40005400
 8000474:	200004ac 	.word	0x200004ac
 8000478:	40005800 	.word	0x40005800
 800047c:	200008b8 	.word	0x200008b8
 8000480:	40007800 	.word	0x40007800
 8000484:	48000800 	.word	0x48000800
 8000488:	08002304 	.word	0x08002304
 800048c:	08001f04 	.word	0x08001f04
 8000490:	08001ef8 	.word	0x08001ef8
 8000494:	20000004 	.word	0x20000004

08000498 <systick_enable>:
	}
}


void systick_enable()
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	SysTick->LOAD  = (SystemCoreClock_/1000) - 1;                  /* set reload register */
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <systick_enable+0x30>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <systick_enable+0x34>)
 80004a2:	fba2 2303 	umull	r2, r3, r2, r3
 80004a6:	099b      	lsrs	r3, r3, #6
 80004a8:	4a09      	ldr	r2, [pc, #36]	; (80004d0 <systick_enable+0x38>)
 80004aa:	3b01      	subs	r3, #1
 80004ac:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80004ae:	210f      	movs	r1, #15
 80004b0:	f04f 30ff 	mov.w	r0, #4294967295
 80004b4:	f7ff fee4 	bl	8000280 <__NVIC_SetPriority>
	SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <systick_enable+0x38>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <systick_enable+0x38>)
 80004c0:	2207      	movs	r2, #7
 80004c2:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_TICKINT_Msk   |
					 SysTick_CTRL_ENABLE_Msk;
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000000 	.word	0x20000000
 80004cc:	10624dd3 	.word	0x10624dd3
 80004d0:	e000e010 	.word	0xe000e010

080004d4 <SysTick_Handler>:


void SysTick_Handler()
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  mtick++;
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <SysTick_Handler+0x18>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	4a03      	ldr	r2, [pc, #12]	; (80004ec <SysTick_Handler+0x18>)
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000009c 	.word	0x2000009c

080004f0 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t st = get_mtick();
 80004f8:	f000 f810 	bl	800051c <get_mtick>
 80004fc:	60f8      	str	r0, [r7, #12]

  while( get_mtick() - st <ms);
 80004fe:	bf00      	nop
 8000500:	f000 f80c 	bl	800051c <get_mtick>
 8000504:	4602      	mov	r2, r0
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	d8f7      	bhi.n	8000500 <delay_ms+0x10>
}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <get_mtick>:

uint32_t get_mtick()
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  return mtick;
 8000520:	4b02      	ldr	r3, [pc, #8]	; (800052c <get_mtick+0x10>)
 8000522:	681b      	ldr	r3, [r3, #0]
}
 8000524:	4618      	mov	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	2000009c 	.word	0x2000009c

08000530 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000530:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000564 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000534:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000536:	e003      	b.n	8000540 <LoopCopyDataInit>

08000538 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800053a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800053c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800053e:	3104      	adds	r1, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000540:	480a      	ldr	r0, [pc, #40]	; (800056c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000544:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000546:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000548:	d3f6      	bcc.n	8000538 <CopyDataInit>
	ldr	r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <LoopForever+0x12>)
	b	LoopFillZerobss
 800054c:	e002      	b.n	8000554 <LoopFillZerobss>

0800054e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800054e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000550:	f842 3b04 	str.w	r3, [r2], #4

08000554 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <LoopForever+0x16>)
	cmp	r2, r3
 8000556:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000558:	d3f9      	bcc.n	800054e <FillZerobss>

/* Call the clock system intitialization function.*/
    //bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 800055a:	f001 f81b 	bl	8001594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800055e:	f7ff feb9 	bl	80002d4 <main>

08000562 <LoopForever>:

LoopForever:
    b LoopForever
 8000562:	e7fe      	b.n	8000562 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000564:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000568:	08002eac 	.word	0x08002eac
	ldr	r0, =_sdata
 800056c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000570:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8000574:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8000578:	20000ce4 	.word	0x20000ce4

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>

0800057e <Display_DrawBitmap>:




void Display_DrawBitmap(OLED_t *oled ,uint16_t x, uint16_t y, const unsigned char *bitmap, uint16_t w, uint16_t h, Display_COLOR_t color)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b086      	sub	sp, #24
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	817b      	strh	r3, [r7, #10]
 800058c:	4613      	mov	r3, r2
 800058e:	813b      	strh	r3, [r7, #8]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000590:	8c3b      	ldrh	r3, [r7, #32]
 8000592:	3307      	adds	r3, #7
 8000594:	2b00      	cmp	r3, #0
 8000596:	da00      	bge.n	800059a <Display_DrawBitmap+0x1c>
 8000598:	3307      	adds	r3, #7
 800059a:	10db      	asrs	r3, r3, #3
 800059c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	82bb      	strh	r3, [r7, #20]
 80005a6:	e040      	b.n	800062a <Display_DrawBitmap+0xac>
    {
        for(int16_t i=0; i<w; i++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	827b      	strh	r3, [r7, #18]
 80005ac:	e02f      	b.n	800060e <Display_DrawBitmap+0x90>
        {
            if(i & 7)
 80005ae:	8a7b      	ldrh	r3, [r7, #18]
 80005b0:	f003 0307 	and.w	r3, r3, #7
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d003      	beq.n	80005c0 <Display_DrawBitmap+0x42>
            {
               byte <<= 1;
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	75fb      	strb	r3, [r7, #23]
 80005be:	e012      	b.n	80005e6 <Display_DrawBitmap+0x68>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80005c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80005c4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80005c8:	fb03 f202 	mul.w	r2, r3, r2
 80005cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da00      	bge.n	80005d6 <Display_DrawBitmap+0x58>
 80005d4:	3307      	adds	r3, #7
 80005d6:	10db      	asrs	r3, r3, #3
 80005d8:	b21b      	sxth	r3, r3
 80005da:	4413      	add	r3, r2
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80)
 80005e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	da09      	bge.n	8000602 <Display_DrawBitmap+0x84>
            	Display_DrawPixel(oled ,x+i, y, color);
 80005ee:	8a7a      	ldrh	r2, [r7, #18]
 80005f0:	897b      	ldrh	r3, [r7, #10]
 80005f2:	4413      	add	r3, r2
 80005f4:	b299      	uxth	r1, r3
 80005f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005fa:	893a      	ldrh	r2, [r7, #8]
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f000 f97b 	bl	80008f8 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000602:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000606:	b29b      	uxth	r3, r3
 8000608:	3301      	adds	r3, #1
 800060a:	b29b      	uxth	r3, r3
 800060c:	827b      	strh	r3, [r7, #18]
 800060e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000612:	8c3b      	ldrh	r3, [r7, #32]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbca      	blt.n	80005ae <Display_DrawBitmap+0x30>
    for(int16_t j=0; j<h; j++, y++)
 8000618:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800061c:	b29b      	uxth	r3, r3
 800061e:	3301      	adds	r3, #1
 8000620:	b29b      	uxth	r3, r3
 8000622:	82bb      	strh	r3, [r7, #20]
 8000624:	893b      	ldrh	r3, [r7, #8]
 8000626:	3301      	adds	r3, #1
 8000628:	813b      	strh	r3, [r7, #8]
 800062a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800062e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000630:	429a      	cmp	r2, r3
 8000632:	dbb9      	blt.n	80005a8 <Display_DrawBitmap+0x2a>
        }
    }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <Display_Init>:




uint8_t Display_Init(OLED_t * oled) {
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af02      	add	r7, sp, #8
 8000644:	6078      	str	r0, [r7, #4]

	//delay
	uint32_t p = 2500;
 8000646:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800064a:	60fb      	str	r3, [r7, #12]
	while(p>0)
 800064c:	e002      	b.n	8000654 <Display_Init+0x16>
		p--;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3b01      	subs	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f9      	bne.n	800064e <Display_Init+0x10>

	Display_WriteCommand(oled , 0xAE); //display off
 800065a:	2302      	movs	r3, #2
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	23ae      	movs	r3, #174	; 0xae
 8000660:	2200      	movs	r2, #0
 8000662:	213c      	movs	r1, #60	; 0x3c
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 fafa 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //Set Memory Addressing Mode
 800066a:	2302      	movs	r3, #2
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2320      	movs	r3, #32
 8000670:	2200      	movs	r2, #0
 8000672:	213c      	movs	r1, #60	; 0x3c
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 faf2 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2310      	movs	r3, #16
 8000680:	2200      	movs	r2, #0
 8000682:	213c      	movs	r1, #60	; 0x3c
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 faea 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800068a:	2302      	movs	r3, #2
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	23b0      	movs	r3, #176	; 0xb0
 8000690:	2200      	movs	r2, #0
 8000692:	213c      	movs	r1, #60	; 0x3c
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 fae2 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xC8); //Set COM Output Scan Direction
 800069a:	2302      	movs	r3, #2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	23c8      	movs	r3, #200	; 0xc8
 80006a0:	2200      	movs	r2, #0
 80006a2:	213c      	movs	r1, #60	; 0x3c
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 fada 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //---set low column address
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	2200      	movs	r2, #0
 80006b2:	213c      	movs	r1, #60	; 0x3c
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 fad2 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //---set high column address
 80006ba:	2302      	movs	r3, #2
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2310      	movs	r3, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	213c      	movs	r1, #60	; 0x3c
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 faca 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x40); //--set start line address
 80006ca:	2302      	movs	r3, #2
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2340      	movs	r3, #64	; 0x40
 80006d0:	2200      	movs	r2, #0
 80006d2:	213c      	movs	r1, #60	; 0x3c
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 fac2 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x81); //--set contrast control register
 80006da:	2302      	movs	r3, #2
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2381      	movs	r3, #129	; 0x81
 80006e0:	2200      	movs	r2, #0
 80006e2:	213c      	movs	r1, #60	; 0x3c
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 faba 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xFF);
 80006ea:	2302      	movs	r3, #2
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	23ff      	movs	r3, #255	; 0xff
 80006f0:	2200      	movs	r2, #0
 80006f2:	213c      	movs	r1, #60	; 0x3c
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 fab2 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA1); //--set segment re-map 0 to 127
 80006fa:	2302      	movs	r3, #2
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	23a1      	movs	r3, #161	; 0xa1
 8000700:	2200      	movs	r2, #0
 8000702:	213c      	movs	r1, #60	; 0x3c
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f000 faaa 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA6); //--set normal display
 800070a:	2302      	movs	r3, #2
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	23a6      	movs	r3, #166	; 0xa6
 8000710:	2200      	movs	r2, #0
 8000712:	213c      	movs	r1, #60	; 0x3c
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 faa2 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA8); //--set multiplex ratio(1 to 64)
 800071a:	2302      	movs	r3, #2
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	23a8      	movs	r3, #168	; 0xa8
 8000720:	2200      	movs	r2, #0
 8000722:	213c      	movs	r1, #60	; 0x3c
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 fa9a 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x3F); //
 800072a:	2302      	movs	r3, #2
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	233f      	movs	r3, #63	; 0x3f
 8000730:	2200      	movs	r2, #0
 8000732:	213c      	movs	r1, #60	; 0x3c
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 fa92 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800073a:	2302      	movs	r3, #2
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	23a4      	movs	r3, #164	; 0xa4
 8000740:	2200      	movs	r2, #0
 8000742:	213c      	movs	r1, #60	; 0x3c
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 fa8a 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD3); //-set display offset
 800074a:	2302      	movs	r3, #2
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	23d3      	movs	r3, #211	; 0xd3
 8000750:	2200      	movs	r2, #0
 8000752:	213c      	movs	r1, #60	; 0x3c
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 fa82 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //-not offset
 800075a:	2302      	movs	r3, #2
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2300      	movs	r3, #0
 8000760:	2200      	movs	r2, #0
 8000762:	213c      	movs	r1, #60	; 0x3c
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 fa7a 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD5); //--set display clock divide ratio/oscillator frequency
 800076a:	2302      	movs	r3, #2
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	23d5      	movs	r3, #213	; 0xd5
 8000770:	2200      	movs	r2, #0
 8000772:	213c      	movs	r1, #60	; 0x3c
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 fa72 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xF0); //--set divide ratio
 800077a:	2302      	movs	r3, #2
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	23f0      	movs	r3, #240	; 0xf0
 8000780:	2200      	movs	r2, #0
 8000782:	213c      	movs	r1, #60	; 0x3c
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 fa6a 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD9); //--set pre-charge period
 800078a:	2302      	movs	r3, #2
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	23d9      	movs	r3, #217	; 0xd9
 8000790:	2200      	movs	r2, #0
 8000792:	213c      	movs	r1, #60	; 0x3c
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 fa62 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x22); //
 800079a:	2302      	movs	r3, #2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2322      	movs	r3, #34	; 0x22
 80007a0:	2200      	movs	r2, #0
 80007a2:	213c      	movs	r1, #60	; 0x3c
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 fa5a 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDA); //--set Com pins hardware configuration
 80007aa:	2302      	movs	r3, #2
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	23da      	movs	r3, #218	; 0xda
 80007b0:	2200      	movs	r2, #0
 80007b2:	213c      	movs	r1, #60	; 0x3c
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 fa52 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x12);
 80007ba:	2302      	movs	r3, #2
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2312      	movs	r3, #18
 80007c0:	2200      	movs	r2, #0
 80007c2:	213c      	movs	r1, #60	; 0x3c
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 fa4a 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDB); //--set vcomh
 80007ca:	2302      	movs	r3, #2
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	23db      	movs	r3, #219	; 0xdb
 80007d0:	2200      	movs	r2, #0
 80007d2:	213c      	movs	r1, #60	; 0x3c
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 fa42 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //0x20,0.77xVcc
 80007da:	2302      	movs	r3, #2
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2320      	movs	r3, #32
 80007e0:	2200      	movs	r2, #0
 80007e2:	213c      	movs	r1, #60	; 0x3c
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 fa3a 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x8D); //--set DC-DC enable
 80007ea:	2302      	movs	r3, #2
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	238d      	movs	r3, #141	; 0x8d
 80007f0:	2200      	movs	r2, #0
 80007f2:	213c      	movs	r1, #60	; 0x3c
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 fa32 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0x14); //
 80007fa:	2302      	movs	r3, #2
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2314      	movs	r3, #20
 8000800:	2200      	movs	r2, #0
 8000802:	213c      	movs	r1, #60	; 0x3c
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 fa2a 	bl	8000c5e <Display_I2C_Write>
	Display_WriteCommand(oled , 0xAF); //--turn on SSD1306 panel
 800080a:	2302      	movs	r3, #2
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	23af      	movs	r3, #175	; 0xaf
 8000810:	2200      	movs	r2, #0
 8000812:	213c      	movs	r1, #60	; 0x3c
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 fa22 	bl	8000c5e <Display_I2C_Write>


	Display_WriteCommand(oled ,Display_DEACTIVATE_SCROLL);
 800081a:	2302      	movs	r3, #2
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	232e      	movs	r3, #46	; 0x2e
 8000820:	2200      	movs	r2, #0
 8000822:	213c      	movs	r1, #60	; 0x3c
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 fa1a 	bl	8000c5e <Display_I2C_Write>
	//Display_Fill(Display_COLOR_WHITE);	// Clear screen
	Display_Fill(oled ,Display_COLOR_BLACK);	// Clear screen
 800082a:	2100      	movs	r1, #0
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 f84c 	bl	80008ca <Display_Fill>
	Display_UpdateScreen(oled);		// Update screen
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 f811 	bl	800085a <Display_UpdateScreen>

	// Set default values
	oled->CurrentX = 0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = 0;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

	// Initialized OK
	oled->Initialized = 1;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2201      	movs	r2, #1
 800084c:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409

	// Return OK
	return 1;
 8000850:	2301      	movs	r3, #1
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <Display_UpdateScreen>:

void Display_UpdateScreen(OLED_t * oled) {
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af02      	add	r7, sp, #8
 8000860:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]
 8000866:	e028      	b.n	80008ba <Display_UpdateScreen+0x60>
		Display_WriteCommand(oled , 0xB0 + m);
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	3b50      	subs	r3, #80	; 0x50
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2202      	movs	r2, #2
 8000870:	9200      	str	r2, [sp, #0]
 8000872:	2200      	movs	r2, #0
 8000874:	213c      	movs	r1, #60	; 0x3c
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 f9f1 	bl	8000c5e <Display_I2C_Write>
		Display_WriteCommand(oled , 0x00);
 800087c:	2302      	movs	r3, #2
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2300      	movs	r3, #0
 8000882:	2200      	movs	r2, #0
 8000884:	213c      	movs	r1, #60	; 0x3c
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 f9e9 	bl	8000c5e <Display_I2C_Write>
		Display_WriteCommand(oled , 0x10);
 800088c:	2302      	movs	r3, #2
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2310      	movs	r3, #16
 8000892:	2200      	movs	r2, #0
 8000894:	213c      	movs	r1, #60	; 0x3c
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f9e1 	bl	8000c5e <Display_I2C_Write>

		Display_I2C_WriteMulti(oled , 0x3C, 0x40, &(oled->Display_Buffer[Display_WIDTH * m]), Display_WIDTH);
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	01db      	lsls	r3, r3, #7
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	4413      	add	r3, r2
 80008a4:	3304      	adds	r3, #4
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	9200      	str	r2, [sp, #0]
 80008aa:	2240      	movs	r2, #64	; 0x40
 80008ac:	213c      	movs	r1, #60	; 0x3c
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 f948 	bl	8000b44 <Display_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	3301      	adds	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b07      	cmp	r3, #7
 80008be:	d9d3      	bls.n	8000868 <Display_UpdateScreen+0xe>

	}
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <Display_Fill>:


void Display_Fill(OLED_t * oled , Display_COLOR_t color) {
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	460b      	mov	r3, r1
 80008d4:	70fb      	strb	r3, [r7, #3]
	// Set memory, fill a block of memory with value
	memset(oled->Display_Buffer, (color == Display_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(oled->Display_Buffer));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	1d18      	adds	r0, r3, #4
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d101      	bne.n	80008e4 <Display_Fill+0x1a>
 80008e0:	2300      	movs	r3, #0
 80008e2:	e000      	b.n	80008e6 <Display_Fill+0x1c>
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ea:	4619      	mov	r1, r3
 80008ec:	f000 fe76 	bl	80015dc <memset>
  //memset(starting address, value to be filled, number of bytes to be filled)
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Display_DrawPixel>:


void Display_DrawPixel(OLED_t * oled ,uint16_t x, uint16_t y, Display_COLOR_t color) {
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	4608      	mov	r0, r1
 8000902:	4611      	mov	r1, r2
 8000904:	461a      	mov	r2, r3
 8000906:	4603      	mov	r3, r0
 8000908:	817b      	strh	r3, [r7, #10]
 800090a:	460b      	mov	r3, r1
 800090c:	813b      	strh	r3, [r7, #8]
 800090e:	4613      	mov	r3, r2
 8000910:	71fb      	strb	r3, [r7, #7]

	if (x >= Display_WIDTH || y >= Display_HEIGHT)
 8000912:	897b      	ldrh	r3, [r7, #10]
 8000914:	2b7f      	cmp	r3, #127	; 0x7f
 8000916:	d84f      	bhi.n	80009b8 <Display_DrawPixel+0xc0>
 8000918:	893b      	ldrh	r3, [r7, #8]
 800091a:	2b3f      	cmp	r3, #63	; 0x3f
 800091c:	d84c      	bhi.n	80009b8 <Display_DrawPixel+0xc0>
		// Error
		return;
	}

	// Check if pixels are inverted
	if (oled->Inverted) {
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <Display_DrawPixel+0x3e>
		color = (Display_COLOR_t)!color;
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf0c      	ite	eq
 800092e:	2301      	moveq	r3, #1
 8000930:	2300      	movne	r3, #0
 8000932:	b2db      	uxtb	r3, r3
 8000934:	71fb      	strb	r3, [r7, #7]
	}

	// Set color
	if (color == Display_COLOR_WHITE) {
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d11d      	bne.n	8000978 <Display_DrawPixel+0x80>
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] |= 1 << (y % 8);
 800093c:	897a      	ldrh	r2, [r7, #10]
 800093e:	893b      	ldrh	r3, [r7, #8]
 8000940:	08db      	lsrs	r3, r3, #3
 8000942:	b298      	uxth	r0, r3
 8000944:	4603      	mov	r3, r0
 8000946:	01db      	lsls	r3, r3, #7
 8000948:	4413      	add	r3, r2
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	4413      	add	r3, r2
 800094e:	791b      	ldrb	r3, [r3, #4]
 8000950:	b25a      	sxtb	r2, r3
 8000952:	893b      	ldrh	r3, [r7, #8]
 8000954:	f003 0307 	and.w	r3, r3, #7
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	b25b      	sxtb	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b259      	sxtb	r1, r3
 8000964:	897a      	ldrh	r2, [r7, #10]
 8000966:	4603      	mov	r3, r0
 8000968:	01db      	lsls	r3, r3, #7
 800096a:	4413      	add	r3, r2
 800096c:	b2c9      	uxtb	r1, r1
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4413      	add	r3, r2
 8000972:	460a      	mov	r2, r1
 8000974:	711a      	strb	r2, [r3, #4]
 8000976:	e020      	b.n	80009ba <Display_DrawPixel+0xc2>
	} else {
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] &= ~(1 << (y % 8));
 8000978:	897a      	ldrh	r2, [r7, #10]
 800097a:	893b      	ldrh	r3, [r7, #8]
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	b298      	uxth	r0, r3
 8000980:	4603      	mov	r3, r0
 8000982:	01db      	lsls	r3, r3, #7
 8000984:	4413      	add	r3, r2
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	4413      	add	r3, r2
 800098a:	791b      	ldrb	r3, [r3, #4]
 800098c:	b25a      	sxtb	r2, r3
 800098e:	893b      	ldrh	r3, [r7, #8]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	b25b      	sxtb	r3, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	4013      	ands	r3, r2
 80009a2:	b259      	sxtb	r1, r3
 80009a4:	897a      	ldrh	r2, [r7, #10]
 80009a6:	4603      	mov	r3, r0
 80009a8:	01db      	lsls	r3, r3, #7
 80009aa:	4413      	add	r3, r2
 80009ac:	b2c9      	uxtb	r1, r1
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	4413      	add	r3, r2
 80009b2:	460a      	mov	r2, r1
 80009b4:	711a      	strb	r2, [r3, #4]
 80009b6:	e000      	b.n	80009ba <Display_DrawPixel+0xc2>
		return;
 80009b8:	bf00      	nop
	}
}
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <Display_GotoXY>:


void Display_GotoXY(OLED_t * oled ,uint16_t x, uint16_t y) {
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	460b      	mov	r3, r1
 80009cc:	807b      	strh	r3, [r7, #2]
 80009ce:	4613      	mov	r3, r2
 80009d0:	803b      	strh	r3, [r7, #0]
	// Set write pointers
	oled->CurrentX = x;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	887a      	ldrh	r2, [r7, #2]
 80009d6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = y;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	883a      	ldrh	r2, [r7, #0]
 80009de:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <Display_Putc>:


char Display_Putc(OLED_t * oled ,char ch, FontDef_t *Font, Display_COLOR_t color) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	461a      	mov	r2, r3
 80009f8:	460b      	mov	r3, r1
 80009fa:	72fb      	strb	r3, [r7, #11]
 80009fc:	4613      	mov	r3, r2
 80009fe:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	// Check available space in LCD
	if (
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4413      	add	r3, r2
	if (
 8000a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a10:	dc08      	bgt.n	8000a24 <Display_Putc+0x38>
		Display_HEIGHT <= (oled->CurrentY + Font->FontHeight)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000a18:	461a      	mov	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	4413      	add	r3, r2
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 8000a20:	2b3f      	cmp	r3, #63	; 0x3f
 8000a22:	dd01      	ble.n	8000a28 <Display_Putc+0x3c>
	) {
		// Error
		return 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	e064      	b.n	8000af2 <Display_Putc+0x106>
	}

	// Go through font
	for (i = 0; i < Font->FontHeight; i++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	e04f      	b.n	8000ace <Display_Putc+0xe2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	7afb      	ldrb	r3, [r7, #11]
 8000a34:	3b20      	subs	r3, #32
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	7849      	ldrb	r1, [r1, #1]
 8000a3a:	fb01 f303 	mul.w	r3, r1, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	440b      	add	r3, r1
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	e034      	b.n	8000abc <Display_Putc+0xd0>
			if ((b << j) & 0x8000) {
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d012      	beq.n	8000a88 <Display_Putc+0x9c>
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t) color);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	4413      	add	r3, r2
 8000a6e:	b299      	uxth	r1, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	7abb      	ldrb	r3, [r7, #10]
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f7ff ff39 	bl	80008f8 <Display_DrawPixel>
 8000a86:	e016      	b.n	8000ab6 <Display_Putc+0xca>
			} else {
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t)!color);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4413      	add	r3, r2
 8000a94:	b299      	uxth	r1, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	7abb      	ldrb	r3, [r7, #10]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf0c      	ite	eq
 8000aaa:	2301      	moveq	r3, #1
 8000aac:	2300      	movne	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f7ff ff21 	bl	80008f8 <Display_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d3c4      	bcc.n	8000a52 <Display_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	3301      	adds	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	785b      	ldrb	r3, [r3, #1]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d3a9      	bcc.n	8000a2e <Display_Putc+0x42>
			}
		}
	}

	// Increase pointer
	oled->CurrentX += Font->FontWidth;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

	// Return character written
	return ch;
 8000af0:	7afb      	ldrb	r3, [r7, #11]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <Display_Puts>:


char Display_Puts(OLED_t * oled ,char* str, FontDef_t* Font, Display_COLOR_t color) {
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	70fb      	strb	r3, [r7, #3]
	// Write characters
	while (*str) {
 8000b08:	e012      	b.n	8000b30 <Display_Puts+0x36>
		// Write character by character
		if (Display_Putc(oled ,*str, Font, color) != *str) {
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	7819      	ldrb	r1, [r3, #0]
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f7ff ff6a 	bl	80009ec <Display_Putc>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d002      	beq.n	8000b2a <Display_Puts+0x30>
			// Return error
			return *str;
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	e008      	b.n	8000b3c <Display_Puts+0x42>
		}

		// Increase string pointer
		str++;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e8      	bne.n	8000b0a <Display_Puts+0x10>
	}

	// Everything OK, zero should be returned
	return *str;
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <Display_I2C_WriteMulti>:




void Display_I2C_WriteMulti(OLED_t * oled,uint8_t address, uint8_t dataRegister, uint8_t *data , uint16_t numBytes)	//data is a pointer
{
 8000b44:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000b48:	b089      	sub	sp, #36	; 0x24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	60f8      	str	r0, [r7, #12]
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	72fb      	strb	r3, [r7, #11]
 8000b54:	4613      	mov	r3, r2
 8000b56:	72bb      	strb	r3, [r7, #10]
 8000b58:	466b      	mov	r3, sp
 8000b5a:	4618      	mov	r0, r3
	uint8_t i;
	uint8_t j;
	uint8_t dt[numBytes];		//necessary for multi Write
 8000b5c:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8000b5e:	460b      	mov	r3, r1
 8000b60:	3b01      	subs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	b28b      	uxth	r3, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	4698      	mov	r8, r3
 8000b6a:	4691      	mov	r9, r2
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b80:	b28b      	uxth	r3, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	461c      	mov	r4, r3
 8000b86:	4615      	mov	r5, r2
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	00eb      	lsls	r3, r5, #3
 8000b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b96:	00e2      	lsls	r2, r4, #3
 8000b98:	460b      	mov	r3, r1
 8000b9a:	3307      	adds	r3, #7
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ba4:	466b      	mov	r3, sp
 8000ba6:	3300      	adds	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
	I2C_TypeDef *  i2c = oled->dev;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	613b      	str	r3, [r7, #16]
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8000bb0:	7afb      	ldrb	r3, [r7, #11]
 8000bb2:	005a      	lsls	r2, r3, #1
 8000bb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bb6:	041b      	lsls	r3, r3, #16
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000bce:	e007      	b.n	8000be0 <Display_I2C_WriteMulti+0x9c>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <Display_I2C_WriteMulti+0x9c>
 8000bdc:	4685      	mov	sp, r0
 8000bde:	e039      	b.n	8000c54 <Display_I2C_WriteMulti+0x110>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0f1      	beq.n	8000bd0 <Display_I2C_WriteMulti+0x8c>
			return;}}

	dt[0] = dataRegister;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	7aba      	ldrb	r2, [r7, #10]
 8000bf0:	701a      	strb	r2, [r3, #0]
	for(i=0; i<numBytes; i++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	77bb      	strb	r3, [r7, #30]
 8000bf6:	e00a      	b.n	8000c0e <Display_I2C_WriteMulti+0xca>
	{
	dt[i+1] = data[i];	//necessary for multi Write
 8000bf8:	7fbb      	ldrb	r3, [r7, #30]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	441a      	add	r2, r3
 8000bfe:	7fbb      	ldrb	r3, [r7, #30]
 8000c00:	3301      	adds	r3, #1
 8000c02:	7811      	ldrb	r1, [r2, #0]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<numBytes; i++)
 8000c08:	7fbb      	ldrb	r3, [r7, #30]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	77bb      	strb	r3, [r7, #30]
 8000c0e:	7fbb      	ldrb	r3, [r7, #30]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8ef      	bhi.n	8000bf8 <Display_I2C_WriteMulti+0xb4>
	}

	for(j=0; j <= (numBytes-1); j++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	77fb      	strb	r3, [r7, #31]
 8000c1c:	e014      	b.n	8000c48 <Display_I2C_WriteMulti+0x104>
	{
		i2c->TXDR = dt[j];
 8000c1e:	7ffb      	ldrb	r3, [r7, #31]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	5cd3      	ldrb	r3, [r2, r3]
 8000c24:	461a      	mov	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000c2a:	7ffa      	ldrb	r2, [r7, #31]
 8000c2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	429a      	cmp	r2, r3
 8000c32:	da06      	bge.n	8000c42 <Display_I2C_WriteMulti+0xfe>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}		//ggf TXIS mit TXE ergänzen
 8000c34:	bf00      	nop
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f9      	beq.n	8000c36 <Display_I2C_WriteMulti+0xf2>
	for(j=0; j <= (numBytes-1); j++)
 8000c42:	7ffb      	ldrb	r3, [r7, #31]
 8000c44:	3301      	adds	r3, #1
 8000c46:	77fb      	strb	r3, [r7, #31]
 8000c48:	7ffb      	ldrb	r3, [r7, #31]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d8e5      	bhi.n	8000c1e <Display_I2C_WriteMulti+0xda>
 8000c52:	4685      	mov	sp, r0
		}
	}

}
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000c5c:	4770      	bx	lr

08000c5e <Display_I2C_Write>:


void Display_I2C_Write(OLED_t * oled, uint8_t address, uint8_t dataRegister, uint8_t data , uint8_t numBytes)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b087      	sub	sp, #28
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	4608      	mov	r0, r1
 8000c68:	4611      	mov	r1, r2
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	70fb      	strb	r3, [r7, #3]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70bb      	strb	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]


	uint8_t j;
	uint8_t dt[2];
	I2C_TypeDef *  i2c = oled->dev;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	613b      	str	r3, [r7, #16]
	dt[0] = dataRegister;
 8000c7e:	78bb      	ldrb	r3, [r7, #2]
 8000c80:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c82:	787b      	ldrb	r3, [r7, #1]
 8000c84:	737b      	strb	r3, [r7, #13]

	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	005a      	lsls	r2, r3, #1
 8000c8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c8e:	041b      	lsls	r3, r3, #16
 8000c90:	4313      	orrs	r3, r2
 8000c92:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000ca6:	e005      	b.n	8000cb4 <Display_I2C_Write+0x56>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d126      	bne.n	8000d02 <Display_I2C_Write+0xa4>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0f3      	beq.n	8000ca8 <Display_I2C_Write+0x4a>
			return;}}

	for(j=0; j <= (numBytes-1); j++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	75fb      	strb	r3, [r7, #23]
 8000cc4:	e017      	b.n	8000cf6 <Display_I2C_Write+0x98>
	{
		i2c->TXDR = dt[j];
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	443b      	add	r3, r7
 8000ccc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000cd6:	7dfa      	ldrb	r2, [r7, #23]
 8000cd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	da06      	bge.n	8000cf0 <Display_I2C_Write+0x92>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}
 8000ce2:	bf00      	nop
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f9      	beq.n	8000ce4 <Display_I2C_Write+0x86>
	for(j=0; j <= (numBytes-1); j++)
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	75fb      	strb	r3, [r7, #23]
 8000cf6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8e2      	bhi.n	8000cc6 <Display_I2C_Write+0x68>
 8000d00:	e000      	b.n	8000d04 <Display_I2C_Write+0xa6>
			return;}}
 8000d02:	bf00      	nop
		}
	}

}
 8000d04:	371c      	adds	r7, #28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <gpio_clock_enable>:
 * After each device reset, all peripheral clocks are disabled (except for the SRAM and FLITF).
Before using a peripheral user has to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.  s.50
 */
void gpio_clock_enable(GPIO_TypeDef * Port)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	if(Port == GPIOA)        //  Bit 17 IOPAEN: I/O port A clock enable
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d1a:	d106      	bne.n	8000d2a <gpio_clock_enable+0x1e>
	{
		RCC->AHBENR |= (1 << GPIOA_CLOCK_ENABLE_BIT) ;
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d26:	6153      	str	r3, [r2, #20]
	}
	*/
	else{

	}
}
 8000d28:	e04b      	b.n	8000dc2 <gpio_clock_enable+0xb6>
	else if(Port == GPIOB)  //    Bit 18 IOPBEN: I/O port B  clock enable
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a28      	ldr	r2, [pc, #160]	; (8000dd0 <gpio_clock_enable+0xc4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d106      	bne.n	8000d40 <gpio_clock_enable+0x34>
		RCC->AHBENR |= (1 << GPIOB_CLOCK_ENABLE_BIT) ;
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	4a25      	ldr	r2, [pc, #148]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3c:	6153      	str	r3, [r2, #20]
}
 8000d3e:	e040      	b.n	8000dc2 <gpio_clock_enable+0xb6>
	else if(Port == GPIOC)   //  Bit 19 IOPCEN: I/O port C clock enable
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a24      	ldr	r2, [pc, #144]	; (8000dd4 <gpio_clock_enable+0xc8>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d106      	bne.n	8000d56 <gpio_clock_enable+0x4a>
		RCC->AHBENR |= (1 << GPIOC_CLOCK_ENABLE_BIT) ;
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	4a1f      	ldr	r2, [pc, #124]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d52:	6153      	str	r3, [r2, #20]
}
 8000d54:	e035      	b.n	8000dc2 <gpio_clock_enable+0xb6>
	else if(Port == GPIOD)    //  Bit 20 IOPDEN: I/O port D clock enable
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <gpio_clock_enable+0xcc>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d106      	bne.n	8000d6c <gpio_clock_enable+0x60>
		RCC->AHBENR |= (1 << GPIOD_CLOCK_ENABLE_BIT) ;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d68:	6153      	str	r3, [r2, #20]
}
 8000d6a:	e02a      	b.n	8000dc2 <gpio_clock_enable+0xb6>
	else if(Port == GPIOE)    //  Bit 21 IOPEEN: I/O port E clock enable
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <gpio_clock_enable+0xd0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d106      	bne.n	8000d82 <gpio_clock_enable+0x76>
		RCC->AHBENR |= (1 << GPIOE_CLOCK_ENABLE_BIT) ;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d7e:	6153      	str	r3, [r2, #20]
}
 8000d80:	e01f      	b.n	8000dc2 <gpio_clock_enable+0xb6>
	else if(Port == GPIOF)   //  Bit 22 IOPFEN: I/O port F clock enable
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <gpio_clock_enable+0xd4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d106      	bne.n	8000d98 <gpio_clock_enable+0x8c>
		RCC->AHBENR |= (1 << GPIOF_CLOCK_ENABLE_BIT) ;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000d90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d94:	6153      	str	r3, [r2, #20]
}
 8000d96:	e014      	b.n	8000dc2 <gpio_clock_enable+0xb6>
	else if(Port == GPIOG)    //  Bit 23 IOPGEN: I/O port G clock enable
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <gpio_clock_enable+0xd8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d106      	bne.n	8000dae <gpio_clock_enable+0xa2>
		RCC->AHBENR |= (1 << GPIOG_CLOCK_ENABLE_BIT) ;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000da6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000daa:	6153      	str	r3, [r2, #20]
}
 8000dac:	e009      	b.n	8000dc2 <gpio_clock_enable+0xb6>
	else if(Port == GPIOH)    //  Bit 16 IOPHEN: I/O port H clock enable
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <gpio_clock_enable+0xdc>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d105      	bne.n	8000dc2 <gpio_clock_enable+0xb6>
		RCC->AHBENR |= (1 << GPIOH_CLOCK_ENABLE_BIT) ;
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <gpio_clock_enable+0xc0>)
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc0:	6153      	str	r3, [r2, #20]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	48000c00 	.word	0x48000c00
 8000ddc:	48001000 	.word	0x48001000
 8000de0:	48001400 	.word	0x48001400
 8000de4:	48001800 	.word	0x48001800
 8000de8:	48001c00 	.word	0x48001c00

08000dec <reset_io>:

void reset_io(GPIO_TypeDef * Port ) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	Port->MODER   = 0x00 ;             // set  pin Mode
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
	Port->OTYPER  = 0x00 ;             //set output type OD/PP
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR = 0x00 ;             //set output speed
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  = 0x00 ;             //set pin Pull
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <gpio_config_pin>:

void gpio_config_pin(GPIO_TypeDef * Port , int Pin , GPIO_Mode_t Mode ,
					   GPIO_Speed_t speed ,GPIO_Pull_t pull, GPIO_out_type_t otype)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b085      	sub	sp, #20
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	4611      	mov	r1, r2
 8000e22:	461a      	mov	r2, r3
 8000e24:	460b      	mov	r3, r1
 8000e26:	71fb      	strb	r3, [r7, #7]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	71bb      	strb	r3, [r7, #6]
	Port->MODER   |= (Mode  << 2 * Pin) ; // set  pin Mode
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	79f9      	ldrb	r1, [r7, #7]
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	0052      	lsls	r2, r2, #1
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	601a      	str	r2, [r3, #0]
	Port->OTYPER  |= (otype << Pin)     ; //set output type OD/PP
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	7f39      	ldrb	r1, [r7, #28]
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR |= (speed << 2 * Pin) ; //set output speed
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	79b9      	ldrb	r1, [r7, #6]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	0052      	lsls	r2, r2, #1
 8000e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e60:	431a      	orrs	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  |= (pull  << 2 * Pin) ; //set pin Pull
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	7e39      	ldrb	r1, [r7, #24]
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	0052      	lsls	r2, r2, #1
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	431a      	orrs	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	60da      	str	r2, [r3, #12]
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <gpio_set_pinState>:

void gpio_set_pinState(GPIO_TypeDef * Port , int Pin , Pin_State State)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	71fb      	strb	r3, [r7, #7]
	//assert pin < 16
	if(State == HIGH)
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d109      	bne.n	8000eac <gpio_set_pinState+0x28>
	{
		Port->ODR |= (1 << Pin) ;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	615a      	str	r2, [r3, #20]
	}
	else {
		Port->ODR &= ~(1 << Pin) ;
	}
}
 8000eaa:	e009      	b.n	8000ec0 <gpio_set_pinState+0x3c>
		Port->ODR &= ~(1 << Pin) ;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	615a      	str	r2, [r3, #20]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
	...

08000ecc <I2C_Init>:

/*
 * TESTED
 */
void I2C_Init(I2C_TypeDef * i2c)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]


 	 if( i2c == I2C1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a6e      	ldr	r2, [pc, #440]	; (8001090 <I2C_Init+0x1c4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d118      	bne.n	8000f0e <I2C_Init+0x42>
 	 {
 		// PB6  I2C1_SCL, PB7   I2C1_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000edc:	4b6d      	ldr	r3, [pc, #436]	; (8001094 <I2C_Init+0x1c8>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	4a6c      	ldr	r2, [pc, #432]	; (8001094 <I2C_Init+0x1c8>)
 8000ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee6:	6153      	str	r3, [r2, #20]
 		GPIOB->MODER |= (0b10 << GPIO_MODER_MODER6_Pos) |
 8000ee8:	4b6b      	ldr	r3, [pc, #428]	; (8001098 <I2C_Init+0x1cc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a6a      	ldr	r2, [pc, #424]	; (8001098 <I2C_Init+0x1cc>)
 8000eee:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000ef2:	6013      	str	r3, [r2, #0]
		   (0b10 << GPIO_MODER_MODER7_Pos); // PB6, PB7: Alternate function
		 GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFRL6_Pos) |
 8000ef4:	4b68      	ldr	r3, [pc, #416]	; (8001098 <I2C_Init+0x1cc>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4a67      	ldr	r2, [pc, #412]	; (8001098 <I2C_Init+0x1cc>)
 8000efa:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000efe:	6213      	str	r3, [r2, #32]
		   (4 << GPIO_AFRL_AFRL7_Pos);         // 0100: AF4

		 RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //i2c clock enable
 8000f00:	4b64      	ldr	r3, [pc, #400]	; (8001094 <I2C_Init+0x1c8>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	4a63      	ldr	r2, [pc, #396]	; (8001094 <I2C_Init+0x1c8>)
 8000f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f0a:	61d3      	str	r3, [r2, #28]
 8000f0c:	e0ac      	b.n	8001068 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C2 )
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a62      	ldr	r2, [pc, #392]	; (800109c <I2C_Init+0x1d0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d14c      	bne.n	8000fb0 <I2C_Init+0xe4>
 	 {
 		//PA9 I2C2_SCL , PA10 I2C2_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000f16:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <I2C_Init+0x1c8>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a5e      	ldr	r2, [pc, #376]	; (8001094 <I2C_Init+0x1c8>)
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	6153      	str	r3, [r2, #20]
 		GPIOA->MODER |= (2 << 18) ;// PA9 10: Alternate function mode
 8000f22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f30:	6013      	str	r3, [r2, #0]
 		GPIOA->MODER |= (2 << 20) ;//PA10 10: Alternate function mode
 8000f32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f40:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER |= (1 << 9 ) ;//PA9  GPIO port output type register 1: Output open-drain
 8000f42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f50:	6053      	str	r3, [r2, #4]
 		GPIOA->OTYPER |= (1 << 10) ;//PA10 Oepn Drain
 8000f52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f60:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 18) | (3 << 20) ; //PA9,PA10  GPIO port output speed register 11: High speed
 8000f62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f6c:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8000f70:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR  |= (1<<18) | (1<<20) ;//PA9 ,PA10 GPIO port pull-up/pull-down register 01: Pull-up
 8000f72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f7c:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8000f80:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1] |= ( 4 << 4 );   //select GPIO alternate function high register  PA9  0100: AF4
 8000f82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f90:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOA->AFR[1] |= (4 << 8);   //select GPIO alternate function high register  PA10   0100: AF4
 8000f92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa0:	6253      	str	r3, [r2, #36]	; 0x24

 		RCC->APB1ENR |=RCC_APB1ENR_I2C2EN ; //i2c clock enable
 8000fa2:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <I2C_Init+0x1c8>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a3b      	ldr	r2, [pc, #236]	; (8001094 <I2C_Init+0x1c8>)
 8000fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	e05b      	b.n	8001068 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C3 )
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a3b      	ldr	r2, [pc, #236]	; (80010a0 <I2C_Init+0x1d4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d157      	bne.n	8001068 <I2C_Init+0x19c>
 	 {
 		//PA8 I2C3_SCL , PB5 I2C3_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000fb8:	4b36      	ldr	r3, [pc, #216]	; (8001094 <I2C_Init+0x1c8>)
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	4a35      	ldr	r2, [pc, #212]	; (8001094 <I2C_Init+0x1c8>)
 8000fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc2:	6153      	str	r3, [r2, #20]
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000fc4:	4b33      	ldr	r3, [pc, #204]	; (8001094 <I2C_Init+0x1c8>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	4a32      	ldr	r2, [pc, #200]	; (8001094 <I2C_Init+0x1c8>)
 8000fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fce:	6153      	str	r3, [r2, #20]

 		GPIOA->MODER   |= (2 << 16) ;// PA8 ALF
 8000fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fde:	6013      	str	r3, [r2, #0]
 		GPIOB->MODER   |= (2 << 10) ;//PB5 ALF
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <I2C_Init+0x1cc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a2c      	ldr	r2, [pc, #176]	; (8001098 <I2C_Init+0x1cc>)
 8000fe6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fea:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER  |= (1 << 8 ) ;//PA8 Open Drain
 8000fec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffa:	6053      	str	r3, [r2, #4]
 		GPIOB->OTYPER  |= (1 << 5 ) ;//PB5 Oepn Drain
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <I2C_Init+0x1cc>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4a25      	ldr	r2, [pc, #148]	; (8001098 <I2C_Init+0x1cc>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 16) ;//PA8 High Speed
 8001008:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001012:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001016:	6093      	str	r3, [r2, #8]
 		GPIOB->OSPEEDR |= (3 << 10) ; //PB5 High Speed
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <I2C_Init+0x1cc>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <I2C_Init+0x1cc>)
 800101e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001022:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR   |= (1 << 16) ;//PA8 PULL up
 8001024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800102e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001032:	60d3      	str	r3, [r2, #12]
 		GPIOB->PUPDR   |= (1 << 10) ;//PB5 PULL up
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <I2C_Init+0x1cc>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <I2C_Init+0x1cc>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1]  |= ( 3 << 0 );//select Alf PA8    0011: AF3
 8001040:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800104a:	f043 0303 	orr.w	r3, r3, #3
 800104e:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOB->AFR[0]  |= (8 << 20) ;//select Alf PB5     1000: AF8
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <I2C_Init+0x1cc>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a10      	ldr	r2, [pc, #64]	; (8001098 <I2C_Init+0x1cc>)
 8001056:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800105a:	6213      	str	r3, [r2, #32]

 		RCC->APB1ENR |=RCC_APB1ENR_I2C3EN ; //i2c clock enable
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <I2C_Init+0x1c8>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <I2C_Init+0x1c8>)
 8001062:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001066:	61d3      	str	r3, [r2, #28]
	 * Enabling and disabling the peripheral
	 * The I2C peripheral clock must be configured and enabled in the clock controller.
	 * Then the I2C can be enabled by setting the PE bit in the I2C_CR1 register.
	 * When the I2C is disabled (PE=0), the I2C performs a software reset.
	 */
	 i2c->CR1 &= ~I2C_CR1_PE;                // disable the i2c peripheral clock  (clear PE bit in I2C_CR1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 0201 	bic.w	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	601a      	str	r2, [r3, #0]
	/*
	 * I2C timings
	 * The timings must be configured in order to guarantee a correct data hold and setup time,
	 * used in master and slave modes. This is done by programming the PRESC,SCLDEL and SDADEL bits in the I2C_TIMINGR register.
	 */
	 i2c->TIMINGR = (1 << I2C_TIMINGR_PRESC_Pos) | // Standard mode 100 kHz @ 8 MHz (page 849/1141)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <I2C_Init+0x1d8>)
 8001078:	611a      	str	r2, [r3, #16]
	             (0x13 << I2C_TIMINGR_SCLL_Pos)  |
	             (0xF << I2C_TIMINGR_SCLH_Pos)   |
	             (0x2 << I2C_TIMINGR_SDADEL_Pos) |
	             (0x4 << I2C_TIMINGR_SCLDEL_Pos);

	 i2c->CR1 |= I2C_CR1_PE;// enable the i2c peripheral clock (set PE bit inI2C_CR1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f043 0201 	orr.w	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]

}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	40005400 	.word	0x40005400
 8001094:	40021000 	.word	0x40021000
 8001098:	48000400 	.word	0x48000400
 800109c:	40005800 	.word	0x40005800
 80010a0:	40007800 	.word	0x40007800
 80010a4:	10420f13 	.word	0x10420f13

080010a8 <I2C_Write>:

	return cnt ;
}

void I2C_Write(I2C_TypeDef * i2c , uint8_t address , uint8_t * data , uint8_t len)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	461a      	mov	r2, r3
 80010b4:	460b      	mov	r3, r1
 80010b6:	72fb      	strb	r3, [r7, #11]
 80010b8:	4613      	mov	r3, r2
 80010ba:	72bb      	strb	r3, [r7, #10]
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (len << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	005a      	lsls	r2, r3, #1
 80010c0:	7abb      	ldrb	r3, [r7, #10]
 80010c2:	041b      	lsls	r3, r3, #16
 80010c4:	4313      	orrs	r3, r2
 80010c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	605a      	str	r2, [r3, #4]
		i2c->CR2 |= I2C_CR2_START;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	605a      	str	r2, [r3, #4]
		while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 80010da:	e005      	b.n	80010e8 <I2C_Write+0x40>
			if ((i2c->ISR & I2C_ISR_NACKF)){
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d123      	bne.n	8001130 <I2C_Write+0x88>
		while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f3      	beq.n	80010dc <I2C_Write+0x34>
				return;}}

		for(uint8_t j=0; j <= (len-1); j++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	75fb      	strb	r3, [r7, #23]
 80010f8:	e015      	b.n	8001126 <I2C_Write+0x7e>
		{
			i2c->TXDR = data[j];
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
			if(j < (len-1))
 8001108:	7dfa      	ldrb	r2, [r7, #23]
 800110a:	7abb      	ldrb	r3, [r7, #10]
 800110c:	3b01      	subs	r3, #1
 800110e:	429a      	cmp	r2, r3
 8001110:	da06      	bge.n	8001120 <I2C_Write+0x78>
			{
				while((i2c->ISR & I2C_ISR_TXIS)==0){}
 8001112:	bf00      	nop
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f9      	beq.n	8001114 <I2C_Write+0x6c>
		for(uint8_t j=0; j <= (len-1); j++)
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	3301      	adds	r3, #1
 8001124:	75fb      	strb	r3, [r7, #23]
 8001126:	7aba      	ldrb	r2, [r7, #10]
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	429a      	cmp	r2, r3
 800112c:	d8e5      	bhi.n	80010fa <I2C_Write+0x52>
 800112e:	e000      	b.n	8001132 <I2C_Write+0x8a>
				return;}}
 8001130:	bf00      	nop
			}
		}
}
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <I2C_Read>:
	// I2C1->CR2 |= I2C_CR2_NACK;
	 i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
}

void I2C_Read(I2C_TypeDef * i2c ,uint8_t address , uint8_t * buffer , int len)
{
 800113a:	b480      	push	{r7}
 800113c:	b087      	sub	sp, #28
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	460b      	mov	r3, r1
 8001148:	72fb      	strb	r3, [r7, #11]

	i2c->CR2  = ((address << 1) << I2C_CR2_SADD_Pos) ;  // set the slave address
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	605a      	str	r2, [r3, #4]
	i2c->CR2 |=   (len << I2C_CR2_NBYTES_Pos);		   // set the number of bytes to be transmitted
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	0412      	lsls	r2, r2, #16
 800115c:	431a      	orrs	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= (1<<I2C_CR2_RD_WRN_Pos);                            	 // i2c read
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START; 					   	// generate the start condition
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	605a      	str	r2, [r3, #4]


	 for( int i = 0 ;i<len ;i++)
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e01d      	b.n	80011bc <I2C_Read+0x82>
	 {
		 while((i2c->ISR & I2C_ISR_RXNE) == 0) ; //wait for rx data
 8001180:	bf00      	nop
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f9      	beq.n	8001182 <I2C_Read+0x48>

		 *buffer = i2c->RXDR ;     //read rx
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	b2da      	uxtb	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	701a      	strb	r2, [r3, #0]

		 buffer++ ;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3301      	adds	r3, #1
 800119c:	607b      	str	r3, [r7, #4]

		 if(i == len - 1)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d106      	bne.n	80011b6 <I2C_Read+0x7c>
		 {
			 while((i2c->ISR & I2C_ISR_TC) == 0) ; //wait for TC Flag
 80011a8:	bf00      	nop
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f9      	beq.n	80011aa <I2C_Read+0x70>
	 for( int i = 0 ;i<len ;i++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbdd      	blt.n	8001180 <I2C_Read+0x46>
		 else{
			 //nope
		 }
	 }

	 i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	605a      	str	r2, [r3, #4]
}
 80011d0:	bf00      	nop
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
	...

080011dc <keypad_init>:
 * Let's assume your program switches all four columns to low and then switches the first row to high.
 * Then it reads the input states of each column and reads pin 1 high.
 * This means that a contact has been made between column 4 and row 1, so the 'A' key has been pressed.
 */
void keypad_init(GPIO_TypeDef * port , int s_pin)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	keypad_port = port   ;
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <keypad_init+0x2c>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6013      	str	r3, [r2, #0]
	start_pin   = s_pin  ;
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <keypad_init+0x30>)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	6013      	str	r3, [r2, #0]
	gpio_clock_enable(port) ;
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fd8a 	bl	8000d0c <gpio_clock_enable>
	keypad_config_key_direction(port , s_pin) ;////set  the first 4 pins as output and the second 4 pins as input
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f808 	bl	8001210 <keypad_config_key_direction>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000cc4 	.word	0x20000cc4
 800120c:	20000cc8 	.word	0x20000cc8

08001210 <keypad_config_key_direction>:
 */



static void keypad_config_key_direction( GPIO_TypeDef * port , int s_pin)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af02      	add	r7, sp, #8
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fde6 	bl	8000dec <reset_io>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r1  1
 8001220:	6839      	ldr	r1, [r7, #0]
 8001222:	1c4b      	adds	r3, r1, #1
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	2300      	movs	r3, #0
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	2300      	movs	r3, #0
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	2201      	movs	r2, #1
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fdef 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r2  0
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	1c4b      	adds	r3, r1, #1
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	2300      	movs	r3, #0
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	2300      	movs	r3, #0
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2300      	movs	r3, #0
 8001248:	2201      	movs	r2, #1
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fde3 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r3  0
 8001250:	6839      	ldr	r1, [r7, #0]
 8001252:	1c4b      	adds	r3, r1, #1
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	2300      	movs	r3, #0
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2300      	movs	r3, #0
 8001260:	2201      	movs	r2, #1
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fdd7 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r4  0
 8001268:	6839      	ldr	r1, [r7, #0]
 800126a:	1c4b      	adds	r3, r1, #1
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	2300      	movs	r3, #0
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	2300      	movs	r3, #0
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2300      	movs	r3, #0
 8001278:	2201      	movs	r2, #1
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fdcb 	bl	8000e16 <gpio_config_pin>
	//configure the pins as Intput with pull-up
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C1  1
 8001280:	6839      	ldr	r1, [r7, #0]
 8001282:	1c4b      	adds	r3, r1, #1
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	2300      	movs	r3, #0
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	2301      	movs	r3, #1
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fdbf 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C2  0
 8001298:	6839      	ldr	r1, [r7, #0]
 800129a:	1c4b      	adds	r3, r1, #1
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	2301      	movs	r3, #1
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2300      	movs	r3, #0
 80012a8:	2200      	movs	r2, #0
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fdb3 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C3  1
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	1c4b      	adds	r3, r1, #1
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	2301      	movs	r3, #1
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2300      	movs	r3, #0
 80012c0:	2200      	movs	r2, #0
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fda7 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C4  1
 80012c8:	6839      	ldr	r1, [r7, #0]
 80012ca:	1c4b      	adds	r3, r1, #1
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	2200      	movs	r2, #0
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fd9b 	bl	8000e16 <gpio_config_pin>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <keypad_inverse_pin_direction>:

static void keypad_inverse_pin_direction( GPIO_TypeDef * port , int s_pin)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fd7a 	bl	8000dec <reset_io>
	//configure the pins as Intput with pull-down
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R1     0
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	1c4b      	adds	r3, r1, #1
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	2300      	movs	r3, #0
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2302      	movs	r3, #2
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2300      	movs	r3, #0
 8001308:	2200      	movs	r2, #0
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fd83 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R2     1
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	1c4b      	adds	r3, r1, #1
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	2300      	movs	r3, #0
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2302      	movs	r3, #2
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2300      	movs	r3, #0
 8001320:	2200      	movs	r2, #0
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fd77 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R3     1
 8001328:	6839      	ldr	r1, [r7, #0]
 800132a:	1c4b      	adds	r3, r1, #1
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2302      	movs	r3, #2
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	2200      	movs	r2, #0
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fd6b 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN  , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R4     1
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	1c4b      	adds	r3, r1, #1
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2302      	movs	r3, #2
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	2200      	movs	r2, #0
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fd5f 	bl	8000e16 <gpio_config_pin>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C1     0
 8001358:	6839      	ldr	r1, [r7, #0]
 800135a:	1c4b      	adds	r3, r1, #1
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	2300      	movs	r3, #0
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	2201      	movs	r2, #1
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fd53 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C2     1
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	1c4b      	adds	r3, r1, #1
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	2300      	movs	r3, #0
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2300      	movs	r3, #0
 8001380:	2201      	movs	r2, #1
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fd47 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C3     0
 8001388:	6839      	ldr	r1, [r7, #0]
 800138a:	1c4b      	adds	r3, r1, #1
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	2300      	movs	r3, #0
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2300      	movs	r3, #0
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	2201      	movs	r2, #1
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fd3b 	bl	8000e16 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C4     0
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	1c4b      	adds	r3, r1, #1
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	2300      	movs	r3, #0
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2300      	movs	r3, #0
 80013b0:	2201      	movs	r2, #1
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fd2f 	bl	8000e16 <gpio_config_pin>

}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <keypad_get_pressedkey>:

/**
 * return the pressedkey other wise 0
 */
char keypad_get_pressedkey()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0

	uint16_t porte = 0;   // set porte to zero where the pins of the used GPIO port (C , Pins : 0-15) will be stored.
 80013c6:	2300      	movs	r3, #0
 80013c8:	817b      	strh	r3, [r7, #10]
	porte = GPIOC->IDR ; /* IDR is one of the GPIO registers that contains the input states of the pins of a GPIO port.
 80013ca:	4b51      	ldr	r3, [pc, #324]	; (8001510 <keypad_get_pressedkey+0x150>)
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	817b      	strh	r3, [r7, #10]
	                      * We can read the whole pin status of a GPIO port with the IDR register.
	                      */
    uint8_t  eidr  = 0;  // set eidr to zero where only the 8 used pins will be stored.
 80013d0:	2300      	movs	r3, #0
 80013d2:	727b      	strb	r3, [r7, #9]
	uint8_t  ch    = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	723b      	strb	r3, [r7, #8]
	char ret = 0 ;
 80013d8:	2300      	movs	r3, #0
 80013da:	75fb      	strb	r3, [r7, #23]

    switch(state)
 80013dc:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <keypad_get_pressedkey+0x154>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	f000 8087 	beq.w	80014f4 <keypad_get_pressedkey+0x134>
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	f300 8088 	bgt.w	80014fc <keypad_get_pressedkey+0x13c>
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <keypad_get_pressedkey+0x36>
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d072      	beq.n	80014da <keypad_get_pressedkey+0x11a>

				state = State_free ;
				break ;
			}
		default :
			break ;
 80013f4:	e082      	b.n	80014fc <keypad_get_pressedkey+0x13c>
				eidr = (porte >> start_pin) ;//  & 0xff ; // get the state od the keypad pins
 80013f6:	897a      	ldrh	r2, [r7, #10]
 80013f8:	4b47      	ldr	r3, [pc, #284]	; (8001518 <keypad_get_pressedkey+0x158>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	fa42 f303 	asr.w	r3, r2, r3
 8001400:	727b      	strb	r3, [r7, #9]
				if(eidr != DEFAULT_KEYPAD_PORT_INP)       // if now the value is different than the DEFAULT_KEYPAD_PORT_INP 0xf0
 8001402:	7a7b      	ldrb	r3, [r7, #9]
 8001404:	2bf0      	cmp	r3, #240	; 0xf0
 8001406:	d07b      	beq.n	8001500 <keypad_get_pressedkey+0x140>
					ch = ~eidr;                           // set the inverse of eidr in ch
 8001408:	7a7b      	ldrb	r3, [r7, #9]
 800140a:	43db      	mvns	r3, r3
 800140c:	723b      	strb	r3, [r7, #8]
					ch = ch & DEFAULT_KEYPAD_PORT_INP;    // with the addition of 0xf0 we get 1 in the changed bit position
 800140e:	7a3b      	ldrb	r3, [r7, #8]
 8001410:	f023 030f 	bic.w	r3, r3, #15
 8001414:	723b      	strb	r3, [r7, #8]
					keypad_inverse_pin_direction(keypad_port ,start_pin ) ;
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <keypad_get_pressedkey+0x15c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a3f      	ldr	r2, [pc, #252]	; (8001518 <keypad_get_pressedkey+0x158>)
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff61 	bl	80012e8 <keypad_inverse_pin_direction>
					uint16_t out = (ch << start_pin) ;  //
 8001426:	7a3a      	ldrb	r2, [r7, #8]
 8001428:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <keypad_get_pressedkey+0x158>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	80fb      	strh	r3, [r7, #6]
					keypad_port->ODR = out ;
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <keypad_get_pressedkey+0x15c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	615a      	str	r2, [r3, #20]
					delay_ms(1) ;
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff f858 	bl	80004f0 <delay_ms>
					porte = keypad_port->IDR ;//get the state of input port
 8001440:	4b36      	ldr	r3, [pc, #216]	; (800151c <keypad_get_pressedkey+0x15c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	817b      	strh	r3, [r7, #10]
					eidr = (porte >> start_pin) ;//& 0xff ; //get the state of keypad pins
 8001448:	897a      	ldrh	r2, [r7, #10]
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <keypad_get_pressedkey+0x158>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	fa42 f303 	asr.w	r3, r2, r3
 8001452:	727b      	strb	r3, [r7, #9]
					int col = 0 ;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
					for(col = 0 ; col <4 ; col++)
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	e00d      	b.n	800147a <keypad_get_pressedkey+0xba>
						if(   (((eidr & 0xf0) >> 4) &  (1<<col)) != 0 )
 800145e:	7a7b      	ldrb	r3, [r7, #9]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	fa42 f303 	asr.w	r3, r2, r3
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d106      	bne.n	8001482 <keypad_get_pressedkey+0xc2>
					for(col = 0 ; col <4 ; col++)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	3301      	adds	r3, #1
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	2b03      	cmp	r3, #3
 800147e:	ddee      	ble.n	800145e <keypad_get_pressedkey+0x9e>
 8001480:	e000      	b.n	8001484 <keypad_get_pressedkey+0xc4>
							break ;
 8001482:	bf00      	nop
					int row = 0 ;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
					for(row = 0 ; row <4 ; row++)
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	e00c      	b.n	80014a8 <keypad_get_pressedkey+0xe8>
						if( ((eidr & 0x0f) & (1<<row)) != 0)
 800148e:	7a7b      	ldrb	r3, [r7, #9]
 8001490:	f003 020f 	and.w	r2, r3, #15
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	fa42 f303 	asr.w	r3, r2, r3
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <keypad_get_pressedkey+0xf0>
					for(row = 0 ; row <4 ; row++)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	ddef      	ble.n	800148e <keypad_get_pressedkey+0xce>
 80014ae:	e000      	b.n	80014b2 <keypad_get_pressedkey+0xf2>
							break ;
 80014b0:	bf00      	nop
					ret = keys[row][col] ;
 80014b2:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <keypad_get_pressedkey+0x160>)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	441a      	add	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	75fb      	strb	r3, [r7, #23]
					keypad_config_key_direction(keypad_port ,start_pin ) ;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <keypad_get_pressedkey+0x15c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <keypad_get_pressedkey+0x158>)
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe9f 	bl	8001210 <keypad_config_key_direction>
					state = State_key_pressed ;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <keypad_get_pressedkey+0x154>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
				break ;
 80014d8:	e012      	b.n	8001500 <keypad_get_pressedkey+0x140>
				eidr = (porte >> start_pin) & 0xff ;
 80014da:	897a      	ldrh	r2, [r7, #10]
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <keypad_get_pressedkey+0x158>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	fa42 f303 	asr.w	r3, r2, r3
 80014e4:	727b      	strb	r3, [r7, #9]
				if(eidr == DEFAULT_KEYPAD_PORT_INP)
 80014e6:	7a7b      	ldrb	r3, [r7, #9]
 80014e8:	2bf0      	cmp	r3, #240	; 0xf0
 80014ea:	d10b      	bne.n	8001504 <keypad_get_pressedkey+0x144>
					state = State_key_released ;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <keypad_get_pressedkey+0x154>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	701a      	strb	r2, [r3, #0]
				break ;
 80014f2:	e007      	b.n	8001504 <keypad_get_pressedkey+0x144>
				state = State_free ;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <keypad_get_pressedkey+0x154>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
				break ;
 80014fa:	e004      	b.n	8001506 <keypad_get_pressedkey+0x146>
			break ;
 80014fc:	bf00      	nop
 80014fe:	e002      	b.n	8001506 <keypad_get_pressedkey+0x146>
				break ;
 8001500:	bf00      	nop
 8001502:	e000      	b.n	8001506 <keypad_get_pressedkey+0x146>
				break ;
 8001504:	bf00      	nop

	}


	return ret ;
 8001506:	7dfb      	ldrb	r3, [r7, #23]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	48000800 	.word	0x48000800
 8001514:	20000ccc 	.word	0x20000ccc
 8001518:	20000cc8 	.word	0x20000cc8
 800151c:	20000cc4 	.word	0x20000cc4
 8001520:	2000000c 	.word	0x2000000c

08001524 <rtc_get_reg>:

}


static uint8_t rtc_get_reg(uint8_t reg)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	uint8_t val ;

	I2C_Write(I2C1 , 0x68 , reg , 1) ;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	461a      	mov	r2, r3
 8001532:	2301      	movs	r3, #1
 8001534:	2168      	movs	r1, #104	; 0x68
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <rtc_get_reg+0x30>)
 8001538:	f7ff fdb6 	bl	80010a8 <I2C_Write>

	I2C_Read(I2C1 , 0x68 , &val , 1) ;
 800153c:	f107 020f 	add.w	r2, r7, #15
 8001540:	2301      	movs	r3, #1
 8001542:	2168      	movs	r1, #104	; 0x68
 8001544:	4803      	ldr	r0, [pc, #12]	; (8001554 <rtc_get_reg+0x30>)
 8001546:	f7ff fdf8 	bl	800113a <I2C_Read>

	return val ;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40005400 	.word	0x40005400

08001558 <rtc_get_time>:

void rtc_get_time(rtc_time_t * rtc_time )
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	rtc_time->sec = rtc_get_reg(RTC_REG_SECOND) ;
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff ffdf 	bl	8001524 <rtc_get_reg>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	701a      	strb	r2, [r3, #0]
	rtc_time->min  = rtc_get_reg(RTC_REG_MINUTE) ;
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff ffd8 	bl	8001524 <rtc_get_reg>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	705a      	strb	r2, [r3, #1]
	rtc_time->hr  = rtc_get_reg(RTC_REG_HOUR) ;
 800157c:	2002      	movs	r0, #2
 800157e:	f7ff ffd1 	bl	8001524 <rtc_get_reg>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	709a      	strb	r2, [r3, #2]
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <__libc_init_array>:
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	4d0d      	ldr	r5, [pc, #52]	; (80015cc <__libc_init_array+0x38>)
 8001598:	4c0d      	ldr	r4, [pc, #52]	; (80015d0 <__libc_init_array+0x3c>)
 800159a:	1b64      	subs	r4, r4, r5
 800159c:	10a4      	asrs	r4, r4, #2
 800159e:	2600      	movs	r6, #0
 80015a0:	42a6      	cmp	r6, r4
 80015a2:	d109      	bne.n	80015b8 <__libc_init_array+0x24>
 80015a4:	4d0b      	ldr	r5, [pc, #44]	; (80015d4 <__libc_init_array+0x40>)
 80015a6:	4c0c      	ldr	r4, [pc, #48]	; (80015d8 <__libc_init_array+0x44>)
 80015a8:	f000 fc9a 	bl	8001ee0 <_init>
 80015ac:	1b64      	subs	r4, r4, r5
 80015ae:	10a4      	asrs	r4, r4, #2
 80015b0:	2600      	movs	r6, #0
 80015b2:	42a6      	cmp	r6, r4
 80015b4:	d105      	bne.n	80015c2 <__libc_init_array+0x2e>
 80015b6:	bd70      	pop	{r4, r5, r6, pc}
 80015b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015bc:	4798      	blx	r3
 80015be:	3601      	adds	r6, #1
 80015c0:	e7ee      	b.n	80015a0 <__libc_init_array+0xc>
 80015c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015c6:	4798      	blx	r3
 80015c8:	3601      	adds	r6, #1
 80015ca:	e7f2      	b.n	80015b2 <__libc_init_array+0x1e>
 80015cc:	08002ea4 	.word	0x08002ea4
 80015d0:	08002ea4 	.word	0x08002ea4
 80015d4:	08002ea4 	.word	0x08002ea4
 80015d8:	08002ea8 	.word	0x08002ea8

080015dc <memset>:
 80015dc:	4402      	add	r2, r0
 80015de:	4603      	mov	r3, r0
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d100      	bne.n	80015e6 <memset+0xa>
 80015e4:	4770      	bx	lr
 80015e6:	f803 1b01 	strb.w	r1, [r3], #1
 80015ea:	e7f9      	b.n	80015e0 <memset+0x4>

080015ec <siprintf>:
 80015ec:	b40e      	push	{r1, r2, r3}
 80015ee:	b500      	push	{lr}
 80015f0:	b09c      	sub	sp, #112	; 0x70
 80015f2:	ab1d      	add	r3, sp, #116	; 0x74
 80015f4:	9002      	str	r0, [sp, #8]
 80015f6:	9006      	str	r0, [sp, #24]
 80015f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <siprintf+0x38>)
 80015fe:	9107      	str	r1, [sp, #28]
 8001600:	9104      	str	r1, [sp, #16]
 8001602:	4909      	ldr	r1, [pc, #36]	; (8001628 <siprintf+0x3c>)
 8001604:	f853 2b04 	ldr.w	r2, [r3], #4
 8001608:	9105      	str	r1, [sp, #20]
 800160a:	6800      	ldr	r0, [r0, #0]
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	a902      	add	r1, sp, #8
 8001610:	f000 f868 	bl	80016e4 <_svfiprintf_r>
 8001614:	9b02      	ldr	r3, [sp, #8]
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	b01c      	add	sp, #112	; 0x70
 800161c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001620:	b003      	add	sp, #12
 8001622:	4770      	bx	lr
 8001624:	2000001c 	.word	0x2000001c
 8001628:	ffff0208 	.word	0xffff0208

0800162c <__ssputs_r>:
 800162c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001630:	688e      	ldr	r6, [r1, #8]
 8001632:	429e      	cmp	r6, r3
 8001634:	4682      	mov	sl, r0
 8001636:	460c      	mov	r4, r1
 8001638:	4690      	mov	r8, r2
 800163a:	461f      	mov	r7, r3
 800163c:	d838      	bhi.n	80016b0 <__ssputs_r+0x84>
 800163e:	898a      	ldrh	r2, [r1, #12]
 8001640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001644:	d032      	beq.n	80016ac <__ssputs_r+0x80>
 8001646:	6825      	ldr	r5, [r4, #0]
 8001648:	6909      	ldr	r1, [r1, #16]
 800164a:	eba5 0901 	sub.w	r9, r5, r1
 800164e:	6965      	ldr	r5, [r4, #20]
 8001650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001658:	3301      	adds	r3, #1
 800165a:	444b      	add	r3, r9
 800165c:	106d      	asrs	r5, r5, #1
 800165e:	429d      	cmp	r5, r3
 8001660:	bf38      	it	cc
 8001662:	461d      	movcc	r5, r3
 8001664:	0553      	lsls	r3, r2, #21
 8001666:	d531      	bpl.n	80016cc <__ssputs_r+0xa0>
 8001668:	4629      	mov	r1, r5
 800166a:	f000 fb61 	bl	8001d30 <_malloc_r>
 800166e:	4606      	mov	r6, r0
 8001670:	b950      	cbnz	r0, 8001688 <__ssputs_r+0x5c>
 8001672:	230c      	movs	r3, #12
 8001674:	f8ca 3000 	str.w	r3, [sl]
 8001678:	89a3      	ldrh	r3, [r4, #12]
 800167a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800167e:	81a3      	strh	r3, [r4, #12]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001688:	6921      	ldr	r1, [r4, #16]
 800168a:	464a      	mov	r2, r9
 800168c:	f000 fabe 	bl	8001c0c <memcpy>
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169a:	81a3      	strh	r3, [r4, #12]
 800169c:	6126      	str	r6, [r4, #16]
 800169e:	6165      	str	r5, [r4, #20]
 80016a0:	444e      	add	r6, r9
 80016a2:	eba5 0509 	sub.w	r5, r5, r9
 80016a6:	6026      	str	r6, [r4, #0]
 80016a8:	60a5      	str	r5, [r4, #8]
 80016aa:	463e      	mov	r6, r7
 80016ac:	42be      	cmp	r6, r7
 80016ae:	d900      	bls.n	80016b2 <__ssputs_r+0x86>
 80016b0:	463e      	mov	r6, r7
 80016b2:	6820      	ldr	r0, [r4, #0]
 80016b4:	4632      	mov	r2, r6
 80016b6:	4641      	mov	r1, r8
 80016b8:	f000 fab6 	bl	8001c28 <memmove>
 80016bc:	68a3      	ldr	r3, [r4, #8]
 80016be:	1b9b      	subs	r3, r3, r6
 80016c0:	60a3      	str	r3, [r4, #8]
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	4433      	add	r3, r6
 80016c6:	6023      	str	r3, [r4, #0]
 80016c8:	2000      	movs	r0, #0
 80016ca:	e7db      	b.n	8001684 <__ssputs_r+0x58>
 80016cc:	462a      	mov	r2, r5
 80016ce:	f000 fba3 	bl	8001e18 <_realloc_r>
 80016d2:	4606      	mov	r6, r0
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d1e1      	bne.n	800169c <__ssputs_r+0x70>
 80016d8:	6921      	ldr	r1, [r4, #16]
 80016da:	4650      	mov	r0, sl
 80016dc:	f000 fabe 	bl	8001c5c <_free_r>
 80016e0:	e7c7      	b.n	8001672 <__ssputs_r+0x46>
	...

080016e4 <_svfiprintf_r>:
 80016e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e8:	4698      	mov	r8, r3
 80016ea:	898b      	ldrh	r3, [r1, #12]
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	b09d      	sub	sp, #116	; 0x74
 80016f0:	4607      	mov	r7, r0
 80016f2:	460d      	mov	r5, r1
 80016f4:	4614      	mov	r4, r2
 80016f6:	d50e      	bpl.n	8001716 <_svfiprintf_r+0x32>
 80016f8:	690b      	ldr	r3, [r1, #16]
 80016fa:	b963      	cbnz	r3, 8001716 <_svfiprintf_r+0x32>
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	f000 fb17 	bl	8001d30 <_malloc_r>
 8001702:	6028      	str	r0, [r5, #0]
 8001704:	6128      	str	r0, [r5, #16]
 8001706:	b920      	cbnz	r0, 8001712 <_svfiprintf_r+0x2e>
 8001708:	230c      	movs	r3, #12
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	e0d1      	b.n	80018b6 <_svfiprintf_r+0x1d2>
 8001712:	2340      	movs	r3, #64	; 0x40
 8001714:	616b      	str	r3, [r5, #20]
 8001716:	2300      	movs	r3, #0
 8001718:	9309      	str	r3, [sp, #36]	; 0x24
 800171a:	2320      	movs	r3, #32
 800171c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001720:	f8cd 800c 	str.w	r8, [sp, #12]
 8001724:	2330      	movs	r3, #48	; 0x30
 8001726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80018d0 <_svfiprintf_r+0x1ec>
 800172a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800172e:	f04f 0901 	mov.w	r9, #1
 8001732:	4623      	mov	r3, r4
 8001734:	469a      	mov	sl, r3
 8001736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800173a:	b10a      	cbz	r2, 8001740 <_svfiprintf_r+0x5c>
 800173c:	2a25      	cmp	r2, #37	; 0x25
 800173e:	d1f9      	bne.n	8001734 <_svfiprintf_r+0x50>
 8001740:	ebba 0b04 	subs.w	fp, sl, r4
 8001744:	d00b      	beq.n	800175e <_svfiprintf_r+0x7a>
 8001746:	465b      	mov	r3, fp
 8001748:	4622      	mov	r2, r4
 800174a:	4629      	mov	r1, r5
 800174c:	4638      	mov	r0, r7
 800174e:	f7ff ff6d 	bl	800162c <__ssputs_r>
 8001752:	3001      	adds	r0, #1
 8001754:	f000 80aa 	beq.w	80018ac <_svfiprintf_r+0x1c8>
 8001758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800175a:	445a      	add	r2, fp
 800175c:	9209      	str	r2, [sp, #36]	; 0x24
 800175e:	f89a 3000 	ldrb.w	r3, [sl]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80a2 	beq.w	80018ac <_svfiprintf_r+0x1c8>
 8001768:	2300      	movs	r3, #0
 800176a:	f04f 32ff 	mov.w	r2, #4294967295
 800176e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001772:	f10a 0a01 	add.w	sl, sl, #1
 8001776:	9304      	str	r3, [sp, #16]
 8001778:	9307      	str	r3, [sp, #28]
 800177a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800177e:	931a      	str	r3, [sp, #104]	; 0x68
 8001780:	4654      	mov	r4, sl
 8001782:	2205      	movs	r2, #5
 8001784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001788:	4851      	ldr	r0, [pc, #324]	; (80018d0 <_svfiprintf_r+0x1ec>)
 800178a:	f7fe fd29 	bl	80001e0 <memchr>
 800178e:	9a04      	ldr	r2, [sp, #16]
 8001790:	b9d8      	cbnz	r0, 80017ca <_svfiprintf_r+0xe6>
 8001792:	06d0      	lsls	r0, r2, #27
 8001794:	bf44      	itt	mi
 8001796:	2320      	movmi	r3, #32
 8001798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800179c:	0711      	lsls	r1, r2, #28
 800179e:	bf44      	itt	mi
 80017a0:	232b      	movmi	r3, #43	; 0x2b
 80017a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017a6:	f89a 3000 	ldrb.w	r3, [sl]
 80017aa:	2b2a      	cmp	r3, #42	; 0x2a
 80017ac:	d015      	beq.n	80017da <_svfiprintf_r+0xf6>
 80017ae:	9a07      	ldr	r2, [sp, #28]
 80017b0:	4654      	mov	r4, sl
 80017b2:	2000      	movs	r0, #0
 80017b4:	f04f 0c0a 	mov.w	ip, #10
 80017b8:	4621      	mov	r1, r4
 80017ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017be:	3b30      	subs	r3, #48	; 0x30
 80017c0:	2b09      	cmp	r3, #9
 80017c2:	d94e      	bls.n	8001862 <_svfiprintf_r+0x17e>
 80017c4:	b1b0      	cbz	r0, 80017f4 <_svfiprintf_r+0x110>
 80017c6:	9207      	str	r2, [sp, #28]
 80017c8:	e014      	b.n	80017f4 <_svfiprintf_r+0x110>
 80017ca:	eba0 0308 	sub.w	r3, r0, r8
 80017ce:	fa09 f303 	lsl.w	r3, r9, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	9304      	str	r3, [sp, #16]
 80017d6:	46a2      	mov	sl, r4
 80017d8:	e7d2      	b.n	8001780 <_svfiprintf_r+0x9c>
 80017da:	9b03      	ldr	r3, [sp, #12]
 80017dc:	1d19      	adds	r1, r3, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	9103      	str	r1, [sp, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bfbb      	ittet	lt
 80017e6:	425b      	neglt	r3, r3
 80017e8:	f042 0202 	orrlt.w	r2, r2, #2
 80017ec:	9307      	strge	r3, [sp, #28]
 80017ee:	9307      	strlt	r3, [sp, #28]
 80017f0:	bfb8      	it	lt
 80017f2:	9204      	strlt	r2, [sp, #16]
 80017f4:	7823      	ldrb	r3, [r4, #0]
 80017f6:	2b2e      	cmp	r3, #46	; 0x2e
 80017f8:	d10c      	bne.n	8001814 <_svfiprintf_r+0x130>
 80017fa:	7863      	ldrb	r3, [r4, #1]
 80017fc:	2b2a      	cmp	r3, #42	; 0x2a
 80017fe:	d135      	bne.n	800186c <_svfiprintf_r+0x188>
 8001800:	9b03      	ldr	r3, [sp, #12]
 8001802:	1d1a      	adds	r2, r3, #4
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	9203      	str	r2, [sp, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	bfb8      	it	lt
 800180c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001810:	3402      	adds	r4, #2
 8001812:	9305      	str	r3, [sp, #20]
 8001814:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80018d4 <_svfiprintf_r+0x1f0>
 8001818:	7821      	ldrb	r1, [r4, #0]
 800181a:	2203      	movs	r2, #3
 800181c:	4650      	mov	r0, sl
 800181e:	f7fe fcdf 	bl	80001e0 <memchr>
 8001822:	b140      	cbz	r0, 8001836 <_svfiprintf_r+0x152>
 8001824:	2340      	movs	r3, #64	; 0x40
 8001826:	eba0 000a 	sub.w	r0, r0, sl
 800182a:	fa03 f000 	lsl.w	r0, r3, r0
 800182e:	9b04      	ldr	r3, [sp, #16]
 8001830:	4303      	orrs	r3, r0
 8001832:	3401      	adds	r4, #1
 8001834:	9304      	str	r3, [sp, #16]
 8001836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800183a:	4827      	ldr	r0, [pc, #156]	; (80018d8 <_svfiprintf_r+0x1f4>)
 800183c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001840:	2206      	movs	r2, #6
 8001842:	f7fe fccd 	bl	80001e0 <memchr>
 8001846:	2800      	cmp	r0, #0
 8001848:	d038      	beq.n	80018bc <_svfiprintf_r+0x1d8>
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <_svfiprintf_r+0x1f8>)
 800184c:	bb1b      	cbnz	r3, 8001896 <_svfiprintf_r+0x1b2>
 800184e:	9b03      	ldr	r3, [sp, #12]
 8001850:	3307      	adds	r3, #7
 8001852:	f023 0307 	bic.w	r3, r3, #7
 8001856:	3308      	adds	r3, #8
 8001858:	9303      	str	r3, [sp, #12]
 800185a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800185c:	4433      	add	r3, r6
 800185e:	9309      	str	r3, [sp, #36]	; 0x24
 8001860:	e767      	b.n	8001732 <_svfiprintf_r+0x4e>
 8001862:	fb0c 3202 	mla	r2, ip, r2, r3
 8001866:	460c      	mov	r4, r1
 8001868:	2001      	movs	r0, #1
 800186a:	e7a5      	b.n	80017b8 <_svfiprintf_r+0xd4>
 800186c:	2300      	movs	r3, #0
 800186e:	3401      	adds	r4, #1
 8001870:	9305      	str	r3, [sp, #20]
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0c0a 	mov.w	ip, #10
 8001878:	4620      	mov	r0, r4
 800187a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800187e:	3a30      	subs	r2, #48	; 0x30
 8001880:	2a09      	cmp	r2, #9
 8001882:	d903      	bls.n	800188c <_svfiprintf_r+0x1a8>
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0c5      	beq.n	8001814 <_svfiprintf_r+0x130>
 8001888:	9105      	str	r1, [sp, #20]
 800188a:	e7c3      	b.n	8001814 <_svfiprintf_r+0x130>
 800188c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001890:	4604      	mov	r4, r0
 8001892:	2301      	movs	r3, #1
 8001894:	e7f0      	b.n	8001878 <_svfiprintf_r+0x194>
 8001896:	ab03      	add	r3, sp, #12
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	462a      	mov	r2, r5
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_svfiprintf_r+0x1fc>)
 800189e:	a904      	add	r1, sp, #16
 80018a0:	4638      	mov	r0, r7
 80018a2:	f3af 8000 	nop.w
 80018a6:	1c42      	adds	r2, r0, #1
 80018a8:	4606      	mov	r6, r0
 80018aa:	d1d6      	bne.n	800185a <_svfiprintf_r+0x176>
 80018ac:	89ab      	ldrh	r3, [r5, #12]
 80018ae:	065b      	lsls	r3, r3, #25
 80018b0:	f53f af2c 	bmi.w	800170c <_svfiprintf_r+0x28>
 80018b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018b6:	b01d      	add	sp, #116	; 0x74
 80018b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018bc:	ab03      	add	r3, sp, #12
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	462a      	mov	r2, r5
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <_svfiprintf_r+0x1fc>)
 80018c4:	a904      	add	r1, sp, #16
 80018c6:	4638      	mov	r0, r7
 80018c8:	f000 f87a 	bl	80019c0 <_printf_i>
 80018cc:	e7eb      	b.n	80018a6 <_svfiprintf_r+0x1c2>
 80018ce:	bf00      	nop
 80018d0:	08002e70 	.word	0x08002e70
 80018d4:	08002e76 	.word	0x08002e76
 80018d8:	08002e7a 	.word	0x08002e7a
 80018dc:	00000000 	.word	0x00000000
 80018e0:	0800162d 	.word	0x0800162d

080018e4 <_printf_common>:
 80018e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018e8:	4616      	mov	r6, r2
 80018ea:	4699      	mov	r9, r3
 80018ec:	688a      	ldr	r2, [r1, #8]
 80018ee:	690b      	ldr	r3, [r1, #16]
 80018f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018f4:	4293      	cmp	r3, r2
 80018f6:	bfb8      	it	lt
 80018f8:	4613      	movlt	r3, r2
 80018fa:	6033      	str	r3, [r6, #0]
 80018fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001900:	4607      	mov	r7, r0
 8001902:	460c      	mov	r4, r1
 8001904:	b10a      	cbz	r2, 800190a <_printf_common+0x26>
 8001906:	3301      	adds	r3, #1
 8001908:	6033      	str	r3, [r6, #0]
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	0699      	lsls	r1, r3, #26
 800190e:	bf42      	ittt	mi
 8001910:	6833      	ldrmi	r3, [r6, #0]
 8001912:	3302      	addmi	r3, #2
 8001914:	6033      	strmi	r3, [r6, #0]
 8001916:	6825      	ldr	r5, [r4, #0]
 8001918:	f015 0506 	ands.w	r5, r5, #6
 800191c:	d106      	bne.n	800192c <_printf_common+0x48>
 800191e:	f104 0a19 	add.w	sl, r4, #25
 8001922:	68e3      	ldr	r3, [r4, #12]
 8001924:	6832      	ldr	r2, [r6, #0]
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	42ab      	cmp	r3, r5
 800192a:	dc26      	bgt.n	800197a <_printf_common+0x96>
 800192c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001930:	1e13      	subs	r3, r2, #0
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	bf18      	it	ne
 8001936:	2301      	movne	r3, #1
 8001938:	0692      	lsls	r2, r2, #26
 800193a:	d42b      	bmi.n	8001994 <_printf_common+0xb0>
 800193c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001940:	4649      	mov	r1, r9
 8001942:	4638      	mov	r0, r7
 8001944:	47c0      	blx	r8
 8001946:	3001      	adds	r0, #1
 8001948:	d01e      	beq.n	8001988 <_printf_common+0xa4>
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	68e5      	ldr	r5, [r4, #12]
 800194e:	6832      	ldr	r2, [r6, #0]
 8001950:	f003 0306 	and.w	r3, r3, #6
 8001954:	2b04      	cmp	r3, #4
 8001956:	bf08      	it	eq
 8001958:	1aad      	subeq	r5, r5, r2
 800195a:	68a3      	ldr	r3, [r4, #8]
 800195c:	6922      	ldr	r2, [r4, #16]
 800195e:	bf0c      	ite	eq
 8001960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001964:	2500      	movne	r5, #0
 8001966:	4293      	cmp	r3, r2
 8001968:	bfc4      	itt	gt
 800196a:	1a9b      	subgt	r3, r3, r2
 800196c:	18ed      	addgt	r5, r5, r3
 800196e:	2600      	movs	r6, #0
 8001970:	341a      	adds	r4, #26
 8001972:	42b5      	cmp	r5, r6
 8001974:	d11a      	bne.n	80019ac <_printf_common+0xc8>
 8001976:	2000      	movs	r0, #0
 8001978:	e008      	b.n	800198c <_printf_common+0xa8>
 800197a:	2301      	movs	r3, #1
 800197c:	4652      	mov	r2, sl
 800197e:	4649      	mov	r1, r9
 8001980:	4638      	mov	r0, r7
 8001982:	47c0      	blx	r8
 8001984:	3001      	adds	r0, #1
 8001986:	d103      	bne.n	8001990 <_printf_common+0xac>
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001990:	3501      	adds	r5, #1
 8001992:	e7c6      	b.n	8001922 <_printf_common+0x3e>
 8001994:	18e1      	adds	r1, r4, r3
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	2030      	movs	r0, #48	; 0x30
 800199a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800199e:	4422      	add	r2, r4
 80019a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019a8:	3302      	adds	r3, #2
 80019aa:	e7c7      	b.n	800193c <_printf_common+0x58>
 80019ac:	2301      	movs	r3, #1
 80019ae:	4622      	mov	r2, r4
 80019b0:	4649      	mov	r1, r9
 80019b2:	4638      	mov	r0, r7
 80019b4:	47c0      	blx	r8
 80019b6:	3001      	adds	r0, #1
 80019b8:	d0e6      	beq.n	8001988 <_printf_common+0xa4>
 80019ba:	3601      	adds	r6, #1
 80019bc:	e7d9      	b.n	8001972 <_printf_common+0x8e>
	...

080019c0 <_printf_i>:
 80019c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019c4:	7e0f      	ldrb	r7, [r1, #24]
 80019c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80019c8:	2f78      	cmp	r7, #120	; 0x78
 80019ca:	4691      	mov	r9, r2
 80019cc:	4680      	mov	r8, r0
 80019ce:	460c      	mov	r4, r1
 80019d0:	469a      	mov	sl, r3
 80019d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80019d6:	d807      	bhi.n	80019e8 <_printf_i+0x28>
 80019d8:	2f62      	cmp	r7, #98	; 0x62
 80019da:	d80a      	bhi.n	80019f2 <_printf_i+0x32>
 80019dc:	2f00      	cmp	r7, #0
 80019de:	f000 80d8 	beq.w	8001b92 <_printf_i+0x1d2>
 80019e2:	2f58      	cmp	r7, #88	; 0x58
 80019e4:	f000 80a3 	beq.w	8001b2e <_printf_i+0x16e>
 80019e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80019f0:	e03a      	b.n	8001a68 <_printf_i+0xa8>
 80019f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019f6:	2b15      	cmp	r3, #21
 80019f8:	d8f6      	bhi.n	80019e8 <_printf_i+0x28>
 80019fa:	a101      	add	r1, pc, #4	; (adr r1, 8001a00 <_printf_i+0x40>)
 80019fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a00:	08001a59 	.word	0x08001a59
 8001a04:	08001a6d 	.word	0x08001a6d
 8001a08:	080019e9 	.word	0x080019e9
 8001a0c:	080019e9 	.word	0x080019e9
 8001a10:	080019e9 	.word	0x080019e9
 8001a14:	080019e9 	.word	0x080019e9
 8001a18:	08001a6d 	.word	0x08001a6d
 8001a1c:	080019e9 	.word	0x080019e9
 8001a20:	080019e9 	.word	0x080019e9
 8001a24:	080019e9 	.word	0x080019e9
 8001a28:	080019e9 	.word	0x080019e9
 8001a2c:	08001b79 	.word	0x08001b79
 8001a30:	08001a9d 	.word	0x08001a9d
 8001a34:	08001b5b 	.word	0x08001b5b
 8001a38:	080019e9 	.word	0x080019e9
 8001a3c:	080019e9 	.word	0x080019e9
 8001a40:	08001b9b 	.word	0x08001b9b
 8001a44:	080019e9 	.word	0x080019e9
 8001a48:	08001a9d 	.word	0x08001a9d
 8001a4c:	080019e9 	.word	0x080019e9
 8001a50:	080019e9 	.word	0x080019e9
 8001a54:	08001b63 	.word	0x08001b63
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	1d1a      	adds	r2, r3, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	602a      	str	r2, [r5, #0]
 8001a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0a3      	b.n	8001bb4 <_printf_i+0x1f4>
 8001a6c:	6820      	ldr	r0, [r4, #0]
 8001a6e:	6829      	ldr	r1, [r5, #0]
 8001a70:	0606      	lsls	r6, r0, #24
 8001a72:	f101 0304 	add.w	r3, r1, #4
 8001a76:	d50a      	bpl.n	8001a8e <_printf_i+0xce>
 8001a78:	680e      	ldr	r6, [r1, #0]
 8001a7a:	602b      	str	r3, [r5, #0]
 8001a7c:	2e00      	cmp	r6, #0
 8001a7e:	da03      	bge.n	8001a88 <_printf_i+0xc8>
 8001a80:	232d      	movs	r3, #45	; 0x2d
 8001a82:	4276      	negs	r6, r6
 8001a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a88:	485e      	ldr	r0, [pc, #376]	; (8001c04 <_printf_i+0x244>)
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	e019      	b.n	8001ac2 <_printf_i+0x102>
 8001a8e:	680e      	ldr	r6, [r1, #0]
 8001a90:	602b      	str	r3, [r5, #0]
 8001a92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a96:	bf18      	it	ne
 8001a98:	b236      	sxthne	r6, r6
 8001a9a:	e7ef      	b.n	8001a7c <_printf_i+0xbc>
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	6820      	ldr	r0, [r4, #0]
 8001aa0:	1d19      	adds	r1, r3, #4
 8001aa2:	6029      	str	r1, [r5, #0]
 8001aa4:	0601      	lsls	r1, r0, #24
 8001aa6:	d501      	bpl.n	8001aac <_printf_i+0xec>
 8001aa8:	681e      	ldr	r6, [r3, #0]
 8001aaa:	e002      	b.n	8001ab2 <_printf_i+0xf2>
 8001aac:	0646      	lsls	r6, r0, #25
 8001aae:	d5fb      	bpl.n	8001aa8 <_printf_i+0xe8>
 8001ab0:	881e      	ldrh	r6, [r3, #0]
 8001ab2:	4854      	ldr	r0, [pc, #336]	; (8001c04 <_printf_i+0x244>)
 8001ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2308      	moveq	r3, #8
 8001aba:	230a      	movne	r3, #10
 8001abc:	2100      	movs	r1, #0
 8001abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ac2:	6865      	ldr	r5, [r4, #4]
 8001ac4:	60a5      	str	r5, [r4, #8]
 8001ac6:	2d00      	cmp	r5, #0
 8001ac8:	bfa2      	ittt	ge
 8001aca:	6821      	ldrge	r1, [r4, #0]
 8001acc:	f021 0104 	bicge.w	r1, r1, #4
 8001ad0:	6021      	strge	r1, [r4, #0]
 8001ad2:	b90e      	cbnz	r6, 8001ad8 <_printf_i+0x118>
 8001ad4:	2d00      	cmp	r5, #0
 8001ad6:	d04d      	beq.n	8001b74 <_printf_i+0x1b4>
 8001ad8:	4615      	mov	r5, r2
 8001ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8001ade:	fb03 6711 	mls	r7, r3, r1, r6
 8001ae2:	5dc7      	ldrb	r7, [r0, r7]
 8001ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ae8:	4637      	mov	r7, r6
 8001aea:	42bb      	cmp	r3, r7
 8001aec:	460e      	mov	r6, r1
 8001aee:	d9f4      	bls.n	8001ada <_printf_i+0x11a>
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d10b      	bne.n	8001b0c <_printf_i+0x14c>
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	07de      	lsls	r6, r3, #31
 8001af8:	d508      	bpl.n	8001b0c <_printf_i+0x14c>
 8001afa:	6923      	ldr	r3, [r4, #16]
 8001afc:	6861      	ldr	r1, [r4, #4]
 8001afe:	4299      	cmp	r1, r3
 8001b00:	bfde      	ittt	le
 8001b02:	2330      	movle	r3, #48	; 0x30
 8001b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b0c:	1b52      	subs	r2, r2, r5
 8001b0e:	6122      	str	r2, [r4, #16]
 8001b10:	f8cd a000 	str.w	sl, [sp]
 8001b14:	464b      	mov	r3, r9
 8001b16:	aa03      	add	r2, sp, #12
 8001b18:	4621      	mov	r1, r4
 8001b1a:	4640      	mov	r0, r8
 8001b1c:	f7ff fee2 	bl	80018e4 <_printf_common>
 8001b20:	3001      	adds	r0, #1
 8001b22:	d14c      	bne.n	8001bbe <_printf_i+0x1fe>
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	b004      	add	sp, #16
 8001b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b2e:	4835      	ldr	r0, [pc, #212]	; (8001c04 <_printf_i+0x244>)
 8001b30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001b34:	6829      	ldr	r1, [r5, #0]
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b3c:	6029      	str	r1, [r5, #0]
 8001b3e:	061d      	lsls	r5, r3, #24
 8001b40:	d514      	bpl.n	8001b6c <_printf_i+0x1ac>
 8001b42:	07df      	lsls	r7, r3, #31
 8001b44:	bf44      	itt	mi
 8001b46:	f043 0320 	orrmi.w	r3, r3, #32
 8001b4a:	6023      	strmi	r3, [r4, #0]
 8001b4c:	b91e      	cbnz	r6, 8001b56 <_printf_i+0x196>
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	f023 0320 	bic.w	r3, r3, #32
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	2310      	movs	r3, #16
 8001b58:	e7b0      	b.n	8001abc <_printf_i+0xfc>
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	f043 0320 	orr.w	r3, r3, #32
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	2378      	movs	r3, #120	; 0x78
 8001b64:	4828      	ldr	r0, [pc, #160]	; (8001c08 <_printf_i+0x248>)
 8001b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b6a:	e7e3      	b.n	8001b34 <_printf_i+0x174>
 8001b6c:	0659      	lsls	r1, r3, #25
 8001b6e:	bf48      	it	mi
 8001b70:	b2b6      	uxthmi	r6, r6
 8001b72:	e7e6      	b.n	8001b42 <_printf_i+0x182>
 8001b74:	4615      	mov	r5, r2
 8001b76:	e7bb      	b.n	8001af0 <_printf_i+0x130>
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	6826      	ldr	r6, [r4, #0]
 8001b7c:	6961      	ldr	r1, [r4, #20]
 8001b7e:	1d18      	adds	r0, r3, #4
 8001b80:	6028      	str	r0, [r5, #0]
 8001b82:	0635      	lsls	r5, r6, #24
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	d501      	bpl.n	8001b8c <_printf_i+0x1cc>
 8001b88:	6019      	str	r1, [r3, #0]
 8001b8a:	e002      	b.n	8001b92 <_printf_i+0x1d2>
 8001b8c:	0670      	lsls	r0, r6, #25
 8001b8e:	d5fb      	bpl.n	8001b88 <_printf_i+0x1c8>
 8001b90:	8019      	strh	r1, [r3, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	6123      	str	r3, [r4, #16]
 8001b96:	4615      	mov	r5, r2
 8001b98:	e7ba      	b.n	8001b10 <_printf_i+0x150>
 8001b9a:	682b      	ldr	r3, [r5, #0]
 8001b9c:	1d1a      	adds	r2, r3, #4
 8001b9e:	602a      	str	r2, [r5, #0]
 8001ba0:	681d      	ldr	r5, [r3, #0]
 8001ba2:	6862      	ldr	r2, [r4, #4]
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4628      	mov	r0, r5
 8001ba8:	f7fe fb1a 	bl	80001e0 <memchr>
 8001bac:	b108      	cbz	r0, 8001bb2 <_printf_i+0x1f2>
 8001bae:	1b40      	subs	r0, r0, r5
 8001bb0:	6060      	str	r0, [r4, #4]
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	6123      	str	r3, [r4, #16]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bbc:	e7a8      	b.n	8001b10 <_printf_i+0x150>
 8001bbe:	6923      	ldr	r3, [r4, #16]
 8001bc0:	462a      	mov	r2, r5
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	4640      	mov	r0, r8
 8001bc6:	47d0      	blx	sl
 8001bc8:	3001      	adds	r0, #1
 8001bca:	d0ab      	beq.n	8001b24 <_printf_i+0x164>
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	079b      	lsls	r3, r3, #30
 8001bd0:	d413      	bmi.n	8001bfa <_printf_i+0x23a>
 8001bd2:	68e0      	ldr	r0, [r4, #12]
 8001bd4:	9b03      	ldr	r3, [sp, #12]
 8001bd6:	4298      	cmp	r0, r3
 8001bd8:	bfb8      	it	lt
 8001bda:	4618      	movlt	r0, r3
 8001bdc:	e7a4      	b.n	8001b28 <_printf_i+0x168>
 8001bde:	2301      	movs	r3, #1
 8001be0:	4632      	mov	r2, r6
 8001be2:	4649      	mov	r1, r9
 8001be4:	4640      	mov	r0, r8
 8001be6:	47d0      	blx	sl
 8001be8:	3001      	adds	r0, #1
 8001bea:	d09b      	beq.n	8001b24 <_printf_i+0x164>
 8001bec:	3501      	adds	r5, #1
 8001bee:	68e3      	ldr	r3, [r4, #12]
 8001bf0:	9903      	ldr	r1, [sp, #12]
 8001bf2:	1a5b      	subs	r3, r3, r1
 8001bf4:	42ab      	cmp	r3, r5
 8001bf6:	dcf2      	bgt.n	8001bde <_printf_i+0x21e>
 8001bf8:	e7eb      	b.n	8001bd2 <_printf_i+0x212>
 8001bfa:	2500      	movs	r5, #0
 8001bfc:	f104 0619 	add.w	r6, r4, #25
 8001c00:	e7f5      	b.n	8001bee <_printf_i+0x22e>
 8001c02:	bf00      	nop
 8001c04:	08002e81 	.word	0x08002e81
 8001c08:	08002e92 	.word	0x08002e92

08001c0c <memcpy>:
 8001c0c:	440a      	add	r2, r1
 8001c0e:	4291      	cmp	r1, r2
 8001c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c14:	d100      	bne.n	8001c18 <memcpy+0xc>
 8001c16:	4770      	bx	lr
 8001c18:	b510      	push	{r4, lr}
 8001c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c22:	4291      	cmp	r1, r2
 8001c24:	d1f9      	bne.n	8001c1a <memcpy+0xe>
 8001c26:	bd10      	pop	{r4, pc}

08001c28 <memmove>:
 8001c28:	4288      	cmp	r0, r1
 8001c2a:	b510      	push	{r4, lr}
 8001c2c:	eb01 0402 	add.w	r4, r1, r2
 8001c30:	d902      	bls.n	8001c38 <memmove+0x10>
 8001c32:	4284      	cmp	r4, r0
 8001c34:	4623      	mov	r3, r4
 8001c36:	d807      	bhi.n	8001c48 <memmove+0x20>
 8001c38:	1e43      	subs	r3, r0, #1
 8001c3a:	42a1      	cmp	r1, r4
 8001c3c:	d008      	beq.n	8001c50 <memmove+0x28>
 8001c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c46:	e7f8      	b.n	8001c3a <memmove+0x12>
 8001c48:	4402      	add	r2, r0
 8001c4a:	4601      	mov	r1, r0
 8001c4c:	428a      	cmp	r2, r1
 8001c4e:	d100      	bne.n	8001c52 <memmove+0x2a>
 8001c50:	bd10      	pop	{r4, pc}
 8001c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c5a:	e7f7      	b.n	8001c4c <memmove+0x24>

08001c5c <_free_r>:
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	4605      	mov	r5, r0
 8001c60:	2900      	cmp	r1, #0
 8001c62:	d041      	beq.n	8001ce8 <_free_r+0x8c>
 8001c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c68:	1f0c      	subs	r4, r1, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bfb8      	it	lt
 8001c6e:	18e4      	addlt	r4, r4, r3
 8001c70:	f000 f912 	bl	8001e98 <__malloc_lock>
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <_free_r+0x90>)
 8001c76:	6813      	ldr	r3, [r2, #0]
 8001c78:	b933      	cbnz	r3, 8001c88 <_free_r+0x2c>
 8001c7a:	6063      	str	r3, [r4, #4]
 8001c7c:	6014      	str	r4, [r2, #0]
 8001c7e:	4628      	mov	r0, r5
 8001c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c84:	f000 b90e 	b.w	8001ea4 <__malloc_unlock>
 8001c88:	42a3      	cmp	r3, r4
 8001c8a:	d908      	bls.n	8001c9e <_free_r+0x42>
 8001c8c:	6820      	ldr	r0, [r4, #0]
 8001c8e:	1821      	adds	r1, r4, r0
 8001c90:	428b      	cmp	r3, r1
 8001c92:	bf01      	itttt	eq
 8001c94:	6819      	ldreq	r1, [r3, #0]
 8001c96:	685b      	ldreq	r3, [r3, #4]
 8001c98:	1809      	addeq	r1, r1, r0
 8001c9a:	6021      	streq	r1, [r4, #0]
 8001c9c:	e7ed      	b.n	8001c7a <_free_r+0x1e>
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	b10b      	cbz	r3, 8001ca8 <_free_r+0x4c>
 8001ca4:	42a3      	cmp	r3, r4
 8001ca6:	d9fa      	bls.n	8001c9e <_free_r+0x42>
 8001ca8:	6811      	ldr	r1, [r2, #0]
 8001caa:	1850      	adds	r0, r2, r1
 8001cac:	42a0      	cmp	r0, r4
 8001cae:	d10b      	bne.n	8001cc8 <_free_r+0x6c>
 8001cb0:	6820      	ldr	r0, [r4, #0]
 8001cb2:	4401      	add	r1, r0
 8001cb4:	1850      	adds	r0, r2, r1
 8001cb6:	4283      	cmp	r3, r0
 8001cb8:	6011      	str	r1, [r2, #0]
 8001cba:	d1e0      	bne.n	8001c7e <_free_r+0x22>
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	6053      	str	r3, [r2, #4]
 8001cc2:	4401      	add	r1, r0
 8001cc4:	6011      	str	r1, [r2, #0]
 8001cc6:	e7da      	b.n	8001c7e <_free_r+0x22>
 8001cc8:	d902      	bls.n	8001cd0 <_free_r+0x74>
 8001cca:	230c      	movs	r3, #12
 8001ccc:	602b      	str	r3, [r5, #0]
 8001cce:	e7d6      	b.n	8001c7e <_free_r+0x22>
 8001cd0:	6820      	ldr	r0, [r4, #0]
 8001cd2:	1821      	adds	r1, r4, r0
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	bf04      	itt	eq
 8001cd8:	6819      	ldreq	r1, [r3, #0]
 8001cda:	685b      	ldreq	r3, [r3, #4]
 8001cdc:	6063      	str	r3, [r4, #4]
 8001cde:	bf04      	itt	eq
 8001ce0:	1809      	addeq	r1, r1, r0
 8001ce2:	6021      	streq	r1, [r4, #0]
 8001ce4:	6054      	str	r4, [r2, #4]
 8001ce6:	e7ca      	b.n	8001c7e <_free_r+0x22>
 8001ce8:	bd38      	pop	{r3, r4, r5, pc}
 8001cea:	bf00      	nop
 8001cec:	20000cd0 	.word	0x20000cd0

08001cf0 <sbrk_aligned>:
 8001cf0:	b570      	push	{r4, r5, r6, lr}
 8001cf2:	4e0e      	ldr	r6, [pc, #56]	; (8001d2c <sbrk_aligned+0x3c>)
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	6831      	ldr	r1, [r6, #0]
 8001cf8:	4605      	mov	r5, r0
 8001cfa:	b911      	cbnz	r1, 8001d02 <sbrk_aligned+0x12>
 8001cfc:	f000 f8bc 	bl	8001e78 <_sbrk_r>
 8001d00:	6030      	str	r0, [r6, #0]
 8001d02:	4621      	mov	r1, r4
 8001d04:	4628      	mov	r0, r5
 8001d06:	f000 f8b7 	bl	8001e78 <_sbrk_r>
 8001d0a:	1c43      	adds	r3, r0, #1
 8001d0c:	d00a      	beq.n	8001d24 <sbrk_aligned+0x34>
 8001d0e:	1cc4      	adds	r4, r0, #3
 8001d10:	f024 0403 	bic.w	r4, r4, #3
 8001d14:	42a0      	cmp	r0, r4
 8001d16:	d007      	beq.n	8001d28 <sbrk_aligned+0x38>
 8001d18:	1a21      	subs	r1, r4, r0
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f000 f8ac 	bl	8001e78 <_sbrk_r>
 8001d20:	3001      	adds	r0, #1
 8001d22:	d101      	bne.n	8001d28 <sbrk_aligned+0x38>
 8001d24:	f04f 34ff 	mov.w	r4, #4294967295
 8001d28:	4620      	mov	r0, r4
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
 8001d2c:	20000cd4 	.word	0x20000cd4

08001d30 <_malloc_r>:
 8001d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d34:	1ccd      	adds	r5, r1, #3
 8001d36:	f025 0503 	bic.w	r5, r5, #3
 8001d3a:	3508      	adds	r5, #8
 8001d3c:	2d0c      	cmp	r5, #12
 8001d3e:	bf38      	it	cc
 8001d40:	250c      	movcc	r5, #12
 8001d42:	2d00      	cmp	r5, #0
 8001d44:	4607      	mov	r7, r0
 8001d46:	db01      	blt.n	8001d4c <_malloc_r+0x1c>
 8001d48:	42a9      	cmp	r1, r5
 8001d4a:	d905      	bls.n	8001d58 <_malloc_r+0x28>
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	2600      	movs	r6, #0
 8001d52:	4630      	mov	r0, r6
 8001d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d58:	4e2e      	ldr	r6, [pc, #184]	; (8001e14 <_malloc_r+0xe4>)
 8001d5a:	f000 f89d 	bl	8001e98 <__malloc_lock>
 8001d5e:	6833      	ldr	r3, [r6, #0]
 8001d60:	461c      	mov	r4, r3
 8001d62:	bb34      	cbnz	r4, 8001db2 <_malloc_r+0x82>
 8001d64:	4629      	mov	r1, r5
 8001d66:	4638      	mov	r0, r7
 8001d68:	f7ff ffc2 	bl	8001cf0 <sbrk_aligned>
 8001d6c:	1c43      	adds	r3, r0, #1
 8001d6e:	4604      	mov	r4, r0
 8001d70:	d14d      	bne.n	8001e0e <_malloc_r+0xde>
 8001d72:	6834      	ldr	r4, [r6, #0]
 8001d74:	4626      	mov	r6, r4
 8001d76:	2e00      	cmp	r6, #0
 8001d78:	d140      	bne.n	8001dfc <_malloc_r+0xcc>
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	4631      	mov	r1, r6
 8001d7e:	4638      	mov	r0, r7
 8001d80:	eb04 0803 	add.w	r8, r4, r3
 8001d84:	f000 f878 	bl	8001e78 <_sbrk_r>
 8001d88:	4580      	cmp	r8, r0
 8001d8a:	d13a      	bne.n	8001e02 <_malloc_r+0xd2>
 8001d8c:	6821      	ldr	r1, [r4, #0]
 8001d8e:	3503      	adds	r5, #3
 8001d90:	1a6d      	subs	r5, r5, r1
 8001d92:	f025 0503 	bic.w	r5, r5, #3
 8001d96:	3508      	adds	r5, #8
 8001d98:	2d0c      	cmp	r5, #12
 8001d9a:	bf38      	it	cc
 8001d9c:	250c      	movcc	r5, #12
 8001d9e:	4629      	mov	r1, r5
 8001da0:	4638      	mov	r0, r7
 8001da2:	f7ff ffa5 	bl	8001cf0 <sbrk_aligned>
 8001da6:	3001      	adds	r0, #1
 8001da8:	d02b      	beq.n	8001e02 <_malloc_r+0xd2>
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	442b      	add	r3, r5
 8001dae:	6023      	str	r3, [r4, #0]
 8001db0:	e00e      	b.n	8001dd0 <_malloc_r+0xa0>
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	1b52      	subs	r2, r2, r5
 8001db6:	d41e      	bmi.n	8001df6 <_malloc_r+0xc6>
 8001db8:	2a0b      	cmp	r2, #11
 8001dba:	d916      	bls.n	8001dea <_malloc_r+0xba>
 8001dbc:	1961      	adds	r1, r4, r5
 8001dbe:	42a3      	cmp	r3, r4
 8001dc0:	6025      	str	r5, [r4, #0]
 8001dc2:	bf18      	it	ne
 8001dc4:	6059      	strne	r1, [r3, #4]
 8001dc6:	6863      	ldr	r3, [r4, #4]
 8001dc8:	bf08      	it	eq
 8001dca:	6031      	streq	r1, [r6, #0]
 8001dcc:	5162      	str	r2, [r4, r5]
 8001dce:	604b      	str	r3, [r1, #4]
 8001dd0:	4638      	mov	r0, r7
 8001dd2:	f104 060b 	add.w	r6, r4, #11
 8001dd6:	f000 f865 	bl	8001ea4 <__malloc_unlock>
 8001dda:	f026 0607 	bic.w	r6, r6, #7
 8001dde:	1d23      	adds	r3, r4, #4
 8001de0:	1af2      	subs	r2, r6, r3
 8001de2:	d0b6      	beq.n	8001d52 <_malloc_r+0x22>
 8001de4:	1b9b      	subs	r3, r3, r6
 8001de6:	50a3      	str	r3, [r4, r2]
 8001de8:	e7b3      	b.n	8001d52 <_malloc_r+0x22>
 8001dea:	6862      	ldr	r2, [r4, #4]
 8001dec:	42a3      	cmp	r3, r4
 8001dee:	bf0c      	ite	eq
 8001df0:	6032      	streq	r2, [r6, #0]
 8001df2:	605a      	strne	r2, [r3, #4]
 8001df4:	e7ec      	b.n	8001dd0 <_malloc_r+0xa0>
 8001df6:	4623      	mov	r3, r4
 8001df8:	6864      	ldr	r4, [r4, #4]
 8001dfa:	e7b2      	b.n	8001d62 <_malloc_r+0x32>
 8001dfc:	4634      	mov	r4, r6
 8001dfe:	6876      	ldr	r6, [r6, #4]
 8001e00:	e7b9      	b.n	8001d76 <_malloc_r+0x46>
 8001e02:	230c      	movs	r3, #12
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4638      	mov	r0, r7
 8001e08:	f000 f84c 	bl	8001ea4 <__malloc_unlock>
 8001e0c:	e7a1      	b.n	8001d52 <_malloc_r+0x22>
 8001e0e:	6025      	str	r5, [r4, #0]
 8001e10:	e7de      	b.n	8001dd0 <_malloc_r+0xa0>
 8001e12:	bf00      	nop
 8001e14:	20000cd0 	.word	0x20000cd0

08001e18 <_realloc_r>:
 8001e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1c:	4680      	mov	r8, r0
 8001e1e:	4614      	mov	r4, r2
 8001e20:	460e      	mov	r6, r1
 8001e22:	b921      	cbnz	r1, 8001e2e <_realloc_r+0x16>
 8001e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e28:	4611      	mov	r1, r2
 8001e2a:	f7ff bf81 	b.w	8001d30 <_malloc_r>
 8001e2e:	b92a      	cbnz	r2, 8001e3c <_realloc_r+0x24>
 8001e30:	f7ff ff14 	bl	8001c5c <_free_r>
 8001e34:	4625      	mov	r5, r4
 8001e36:	4628      	mov	r0, r5
 8001e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e3c:	f000 f838 	bl	8001eb0 <_malloc_usable_size_r>
 8001e40:	4284      	cmp	r4, r0
 8001e42:	4607      	mov	r7, r0
 8001e44:	d802      	bhi.n	8001e4c <_realloc_r+0x34>
 8001e46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001e4a:	d812      	bhi.n	8001e72 <_realloc_r+0x5a>
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	4640      	mov	r0, r8
 8001e50:	f7ff ff6e 	bl	8001d30 <_malloc_r>
 8001e54:	4605      	mov	r5, r0
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d0ed      	beq.n	8001e36 <_realloc_r+0x1e>
 8001e5a:	42bc      	cmp	r4, r7
 8001e5c:	4622      	mov	r2, r4
 8001e5e:	4631      	mov	r1, r6
 8001e60:	bf28      	it	cs
 8001e62:	463a      	movcs	r2, r7
 8001e64:	f7ff fed2 	bl	8001c0c <memcpy>
 8001e68:	4631      	mov	r1, r6
 8001e6a:	4640      	mov	r0, r8
 8001e6c:	f7ff fef6 	bl	8001c5c <_free_r>
 8001e70:	e7e1      	b.n	8001e36 <_realloc_r+0x1e>
 8001e72:	4635      	mov	r5, r6
 8001e74:	e7df      	b.n	8001e36 <_realloc_r+0x1e>
	...

08001e78 <_sbrk_r>:
 8001e78:	b538      	push	{r3, r4, r5, lr}
 8001e7a:	4d06      	ldr	r5, [pc, #24]	; (8001e94 <_sbrk_r+0x1c>)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	4604      	mov	r4, r0
 8001e80:	4608      	mov	r0, r1
 8001e82:	602b      	str	r3, [r5, #0]
 8001e84:	f000 f81e 	bl	8001ec4 <_sbrk>
 8001e88:	1c43      	adds	r3, r0, #1
 8001e8a:	d102      	bne.n	8001e92 <_sbrk_r+0x1a>
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	b103      	cbz	r3, 8001e92 <_sbrk_r+0x1a>
 8001e90:	6023      	str	r3, [r4, #0]
 8001e92:	bd38      	pop	{r3, r4, r5, pc}
 8001e94:	20000cd8 	.word	0x20000cd8

08001e98 <__malloc_lock>:
 8001e98:	4801      	ldr	r0, [pc, #4]	; (8001ea0 <__malloc_lock+0x8>)
 8001e9a:	f000 b811 	b.w	8001ec0 <__retarget_lock_acquire_recursive>
 8001e9e:	bf00      	nop
 8001ea0:	20000cdc 	.word	0x20000cdc

08001ea4 <__malloc_unlock>:
 8001ea4:	4801      	ldr	r0, [pc, #4]	; (8001eac <__malloc_unlock+0x8>)
 8001ea6:	f000 b80c 	b.w	8001ec2 <__retarget_lock_release_recursive>
 8001eaa:	bf00      	nop
 8001eac:	20000cdc 	.word	0x20000cdc

08001eb0 <_malloc_usable_size_r>:
 8001eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001eb4:	1f18      	subs	r0, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bfbc      	itt	lt
 8001eba:	580b      	ldrlt	r3, [r1, r0]
 8001ebc:	18c0      	addlt	r0, r0, r3
 8001ebe:	4770      	bx	lr

08001ec0 <__retarget_lock_acquire_recursive>:
 8001ec0:	4770      	bx	lr

08001ec2 <__retarget_lock_release_recursive>:
 8001ec2:	4770      	bx	lr

08001ec4 <_sbrk>:
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <_sbrk+0x14>)
 8001ec6:	6811      	ldr	r1, [r2, #0]
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b909      	cbnz	r1, 8001ed0 <_sbrk+0xc>
 8001ecc:	4903      	ldr	r1, [pc, #12]	; (8001edc <_sbrk+0x18>)
 8001ece:	6011      	str	r1, [r2, #0]
 8001ed0:	6810      	ldr	r0, [r2, #0]
 8001ed2:	4403      	add	r3, r0
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4770      	bx	lr
 8001ed8:	20000ce0 	.word	0x20000ce0
 8001edc:	20000ce8 	.word	0x20000ce8

08001ee0 <_init>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	bf00      	nop
 8001ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee6:	bc08      	pop	{r3}
 8001ee8:	469e      	mov	lr, r3
 8001eea:	4770      	bx	lr

08001eec <_fini>:
 8001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eee:	bf00      	nop
 8001ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ef2:	bc08      	pop	{r3}
 8001ef4:	469e      	mov	lr, r3
 8001ef6:	4770      	bx	lr
