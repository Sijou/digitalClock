
WiSe2223_GruppeK3_s_Projektaufgabe_Digitaluhr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002874  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d8  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d8  20000000  080043f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
  7 .bss          00000c8c  200000d8  200000d8  000200d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000d64  20000d64  000200d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000030e8  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000d7f  00000000  00000000  000231ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000268  00000000  00000000  00023f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000230  00000000  00000000  000241d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00018f93  00000000  00000000  00024408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000037aa  00000000  00000000  0003d39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0008831a  00000000  00000000  00040b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c8e5f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000c4c  00000000  00000000  000c8eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080029fc 	.word	0x080029fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	080029fc 	.word	0x080029fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	db0a      	blt.n	80002aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	490c      	ldr	r1, [pc, #48]	; (80002cc <__NVIC_SetPriority+0x4c>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	0112      	lsls	r2, r2, #4
 80002a0:	b2d2      	uxtb	r2, r2
 80002a2:	440b      	add	r3, r1
 80002a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a8:	e00a      	b.n	80002c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4908      	ldr	r1, [pc, #32]	; (80002d0 <__NVIC_SetPriority+0x50>)
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	3b04      	subs	r3, #4
 80002b8:	0112      	lsls	r2, r2, #4
 80002ba:	b2d2      	uxtb	r2, r2
 80002bc:	440b      	add	r3, r1
 80002be:	761a      	strb	r2, [r3, #24]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e100 	.word	0xe000e100
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <my_alarm1_callback>:
 * In this specific implementation, it sets the state of GPIO pin A5 to high.
 * This could be used, for example, to turn on an LED or trigger some other action in response to the alarm event.
 * The exact behavior of the function may depend on how it is used within the larger program and what the intended purpose of the alarm is.
 */
void my_alarm1_callback()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	//

	gpio_set_pinState(GPIOA , 5 , HIGH) ;
 80002d8:	2200      	movs	r2, #0
 80002da:	2105      	movs	r1, #5
 80002dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e0:	f001 f9b2 	bl	8001648 <gpio_set_pinState>

	//
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <main>:

int handle_user_input(const char * submenu_item , char pressed_key) ;


int main()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b09a      	sub	sp, #104	; 0x68
 80002ec:	af04      	add	r7, sp, #16
	rtc_time_t t ,tm;
	rtc_date_t d ;

  	while ((RCC->CR & 2) == 0);  // RCC Clock control register (RCC_CR) , wait until HSI is Ready
 80002ee:	bf00      	nop
 80002f0:	4b8b      	ldr	r3, [pc, #556]	; (8000520 <main+0x238>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f003 0302 	and.w	r3, r3, #2
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0f9      	beq.n	80002f0 <main+0x8>

	systick_enable() ;
 80002fc:	f000 fc9e 	bl	8000c3c <systick_enable>
    //Clock configuration register (RCC_CFGR)
	RCC->CFGR &= ~(1<<7)  ; //reset HPRE4 The AHB clock frequency == sys clk
 8000300:	4b87      	ldr	r3, [pc, #540]	; (8000520 <main+0x238>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a86      	ldr	r2, [pc, #536]	; (8000520 <main+0x238>)
 8000306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800030a:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<12) ; // APB1 clock no division
 800030c:	4b84      	ldr	r3, [pc, #528]	; (8000520 <main+0x238>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a83      	ldr	r2, [pc, #524]	; (8000520 <main+0x238>)
 8000312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000316:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<15) ; // APB2 clock no division
 8000318:	4b81      	ldr	r3, [pc, #516]	; (8000520 <main+0x238>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a80      	ldr	r2, [pc, #512]	; (8000520 <main+0x238>)
 800031e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000322:	6053      	str	r3, [r2, #4]

	gpio_clock_enable(GPIOA) ;
 8000324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000328:	f001 f8d2 	bl	80014d0 <gpio_clock_enable>

	gpio_config_pin(GPIOA,5,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 800032c:	2300      	movs	r3, #0
 800032e:	9301      	str	r3, [sp, #4]
 8000330:	2300      	movs	r3, #0
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2300      	movs	r3, #0
 8000336:	2201      	movs	r2, #1
 8000338:	2105      	movs	r1, #5
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f001 f94c 	bl	80015da <gpio_config_pin>

	gpio_set_pinState(GPIOA , 5 , LOW) ;
 8000342:	2201      	movs	r2, #1
 8000344:	2105      	movs	r1, #5
 8000346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034a:	f001 f97d 	bl	8001648 <gpio_set_pinState>


	gpio_config_pin(LED_PORT, LED_TAB[0] ,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 800034e:	4b75      	ldr	r3, [pc, #468]	; (8000524 <main+0x23c>)
 8000350:	6818      	ldr	r0, [r3, #0]
 8000352:	4b75      	ldr	r3, [pc, #468]	; (8000528 <main+0x240>)
 8000354:	6819      	ldr	r1, [r3, #0]
 8000356:	2300      	movs	r3, #0
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2300      	movs	r3, #0
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2300      	movs	r3, #0
 8000360:	2201      	movs	r2, #1
 8000362:	f001 f93a 	bl	80015da <gpio_config_pin>
	gpio_config_pin(LED_PORT, LED_TAB[1] ,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 8000366:	4b6f      	ldr	r3, [pc, #444]	; (8000524 <main+0x23c>)
 8000368:	6818      	ldr	r0, [r3, #0]
 800036a:	4b6f      	ldr	r3, [pc, #444]	; (8000528 <main+0x240>)
 800036c:	6859      	ldr	r1, [r3, #4]
 800036e:	2300      	movs	r3, #0
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2300      	movs	r3, #0
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2300      	movs	r3, #0
 8000378:	2201      	movs	r2, #1
 800037a:	f001 f92e 	bl	80015da <gpio_config_pin>
	gpio_config_pin(LED_PORT, LED_TAB[2] ,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 800037e:	4b69      	ldr	r3, [pc, #420]	; (8000524 <main+0x23c>)
 8000380:	6818      	ldr	r0, [r3, #0]
 8000382:	4b69      	ldr	r3, [pc, #420]	; (8000528 <main+0x240>)
 8000384:	6899      	ldr	r1, [r3, #8]
 8000386:	2300      	movs	r3, #0
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2300      	movs	r3, #0
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	2300      	movs	r3, #0
 8000390:	2201      	movs	r2, #1
 8000392:	f001 f922 	bl	80015da <gpio_config_pin>




	lcd1.dev = I2C1 ;
 8000396:	4b65      	ldr	r3, [pc, #404]	; (800052c <main+0x244>)
 8000398:	4a65      	ldr	r2, [pc, #404]	; (8000530 <main+0x248>)
 800039a:	601a      	str	r2, [r3, #0]
	lcd2.dev = I2C2 ;
 800039c:	4b65      	ldr	r3, [pc, #404]	; (8000534 <main+0x24c>)
 800039e:	4a66      	ldr	r2, [pc, #408]	; (8000538 <main+0x250>)
 80003a0:	601a      	str	r2, [r3, #0]
	lcd3.dev = I2C3 ;
 80003a2:	4b66      	ldr	r3, [pc, #408]	; (800053c <main+0x254>)
 80003a4:	4a66      	ldr	r2, [pc, #408]	; (8000540 <main+0x258>)
 80003a6:	601a      	str	r2, [r3, #0]

	I2C_Init(I2C1) ;
 80003a8:	4861      	ldr	r0, [pc, #388]	; (8000530 <main+0x248>)
 80003aa:	f001 f971 	bl	8001690 <I2C_Init>
	I2C_Init(I2C2) ;
 80003ae:	4862      	ldr	r0, [pc, #392]	; (8000538 <main+0x250>)
 80003b0:	f001 f96e 	bl	8001690 <I2C_Init>
	I2C_Init(I2C3) ;
 80003b4:	4862      	ldr	r0, [pc, #392]	; (8000540 <main+0x258>)
 80003b6:	f001 f96b 	bl	8001690 <I2C_Init>
//	 t.min = 31 ;
//	 t.sec = 30 ;
//	 t.mode = H_24 ;


	 rtc_init(I2C1);
 80003ba:	485d      	ldr	r0, [pc, #372]	; (8000530 <main+0x248>)
 80003bc:	f001 fcaa 	bl	8001d14 <rtc_init>

//	 rtc_set_date( &d);
//	 rtc_set_time(&t) ;

	 tm.hr = 19;
 80003c0:	2313      	movs	r3, #19
 80003c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	 tm.min = 15 ;
 80003c6:	230f      	movs	r3, #15
 80003c8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	 tm.sec = 00 ;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	 rtc_set_alarm(&tm) ;
 80003d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 fd90 	bl	8001efc <rtc_set_alarm>

	 rtc_set_alarm_callback(&my_alarm1_callback) ;
 80003dc:	4859      	ldr	r0, [pc, #356]	; (8000544 <main+0x25c>)
 80003de:	f001 fe37 	bl	8002050 <rtc_set_alarm_callback>

	 Display_Init(&lcd3);	//Configure Display
 80003e2:	4856      	ldr	r0, [pc, #344]	; (800053c <main+0x254>)
 80003e4:	f000 fcfd 	bl	8000de2 <Display_Init>
	 Display_Init(&lcd2);	//Configure Display
 80003e8:	4852      	ldr	r0, [pc, #328]	; (8000534 <main+0x24c>)
 80003ea:	f000 fcfa 	bl	8000de2 <Display_Init>
	 Display_Init(&lcd1);	//Configure Display
 80003ee:	484f      	ldr	r0, [pc, #316]	; (800052c <main+0x244>)
 80003f0:	f000 fcf7 	bl	8000de2 <Display_Init>
	 keypad_init(GPIOC , 0) ;
 80003f4:	2100      	movs	r1, #0
 80003f6:	4854      	ldr	r0, [pc, #336]	; (8000548 <main+0x260>)
 80003f8:	f001 facc 	bl	8001994 <keypad_init>

	 char key = 0 ;
 80003fc:	2300      	movs	r3, #0
 80003fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	system_state_t sys_state = state_init;
 8000402:	2300      	movs	r3, #0
 8000404:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	idle_sub_state  idel_sub_state = state_display_date ;
 8000408:	2300      	movs	r3, #0
 800040a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	menu_nav_sub_state_t menu_nav_sub_state = menu_nav_start;
 800040e:	2300      	movs	r3, #0
 8000410:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54


	uint32_t start_timer = get_mtick();
 8000414:	f000 fc54 	bl	8000cc0 <get_mtick>
 8000418:	6478      	str	r0, [r7, #68]	; 0x44
	uint32_t state_idle_timer = 0 ;
 800041a:	2300      	movs	r3, #0
 800041c:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t led_timer  = 0 ;
 800041e:	2300      	movs	r3, #0
 8000420:	64fb      	str	r3, [r7, #76]	; 0x4c

	Display_Fill(&lcd1, Display_COLOR_BLACK);
 8000422:	2100      	movs	r1, #0
 8000424:	4841      	ldr	r0, [pc, #260]	; (800052c <main+0x244>)
 8000426:	f000 fe22 	bl	800106e <Display_Fill>
	Display_Fill(&lcd2, Display_COLOR_BLACK);
 800042a:	2100      	movs	r1, #0
 800042c:	4841      	ldr	r0, [pc, #260]	; (8000534 <main+0x24c>)
 800042e:	f000 fe1e 	bl	800106e <Display_Fill>
	Display_Fill(&lcd3, Display_COLOR_BLACK);
 8000432:	2100      	movs	r1, #0
 8000434:	4841      	ldr	r0, [pc, #260]	; (800053c <main+0x254>)
 8000436:	f000 fe1a 	bl	800106e <Display_Fill>

	Display_DrawBitmap(&lcd1 ,0, 0, titel_image, 128, 64, Display_COLOR_WHITE);
 800043a:	2301      	movs	r3, #1
 800043c:	9302      	str	r3, [sp, #8]
 800043e:	2340      	movs	r3, #64	; 0x40
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	4b41      	ldr	r3, [pc, #260]	; (800054c <main+0x264>)
 8000448:	2200      	movs	r2, #0
 800044a:	2100      	movs	r1, #0
 800044c:	4837      	ldr	r0, [pc, #220]	; (800052c <main+0x244>)
 800044e:	f000 fc68 	bl	8000d22 <Display_DrawBitmap>
	Display_DrawBitmap(&lcd2 ,0, 0, titel_image, 128, 64, Display_COLOR_WHITE);
 8000452:	2301      	movs	r3, #1
 8000454:	9302      	str	r3, [sp, #8]
 8000456:	2340      	movs	r3, #64	; 0x40
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	4b3b      	ldr	r3, [pc, #236]	; (800054c <main+0x264>)
 8000460:	2200      	movs	r2, #0
 8000462:	2100      	movs	r1, #0
 8000464:	4833      	ldr	r0, [pc, #204]	; (8000534 <main+0x24c>)
 8000466:	f000 fc5c 	bl	8000d22 <Display_DrawBitmap>
	Display_DrawBitmap(&lcd3 ,0, 0, titel_image, 128, 64, Display_COLOR_WHITE);
 800046a:	2301      	movs	r3, #1
 800046c:	9302      	str	r3, [sp, #8]
 800046e:	2340      	movs	r3, #64	; 0x40
 8000470:	9301      	str	r3, [sp, #4]
 8000472:	2380      	movs	r3, #128	; 0x80
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	4b35      	ldr	r3, [pc, #212]	; (800054c <main+0x264>)
 8000478:	2200      	movs	r2, #0
 800047a:	2100      	movs	r1, #0
 800047c:	482f      	ldr	r0, [pc, #188]	; (800053c <main+0x254>)
 800047e:	f000 fc50 	bl	8000d22 <Display_DrawBitmap>

	Display_UpdateScreen(&lcd1);
 8000482:	482a      	ldr	r0, [pc, #168]	; (800052c <main+0x244>)
 8000484:	f000 fdbb 	bl	8000ffe <Display_UpdateScreen>
	Display_UpdateScreen(&lcd2);
 8000488:	482a      	ldr	r0, [pc, #168]	; (8000534 <main+0x24c>)
 800048a:	f000 fdb8 	bl	8000ffe <Display_UpdateScreen>
	Display_UpdateScreen(&lcd3);
 800048e:	482b      	ldr	r0, [pc, #172]	; (800053c <main+0x254>)
 8000490:	f000 fdb5 	bl	8000ffe <Display_UpdateScreen>


	gpio_set_pinState(GPIOA , LED_TAB[0]  , LOW) ;
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <main+0x240>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2201      	movs	r2, #1
 800049a:	4619      	mov	r1, r3
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f001 f8d2 	bl	8001648 <gpio_set_pinState>
	gpio_set_pinState(GPIOA , LED_TAB[1]  , LOW) ;
 80004a4:	4b20      	ldr	r3, [pc, #128]	; (8000528 <main+0x240>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	2201      	movs	r2, #1
 80004aa:	4619      	mov	r1, r3
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b0:	f001 f8ca 	bl	8001648 <gpio_set_pinState>
	gpio_set_pinState(GPIOA , LED_TAB[2]  , LOW) ;
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <main+0x240>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	2201      	movs	r2, #1
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f001 f8c2 	bl	8001648 <gpio_set_pinState>
	rtc_date_t date_config ;

	while(1)
	{

		switch(sys_state)
 80004c4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	f200 82b7 	bhi.w	8000a3c <main+0x754>
 80004ce:	a201      	add	r2, pc, #4	; (adr r2, 80004d4 <main+0x1ec>)
 80004d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d4:	080004e5 	.word	0x080004e5
 80004d8:	08000551 	.word	0x08000551
 80004dc:	08000731 	.word	0x08000731
 80004e0:	08000a3d 	.word	0x08000a3d
		{
			case state_init:
			{
				if(get_mtick() - start_timer > 3000)
 80004e4:	f000 fbec 	bl	8000cc0 <get_mtick>
 80004e8:	4602      	mov	r2, r0
 80004ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80004f2:	4293      	cmp	r3, r2
 80004f4:	f240 82a4 	bls.w	8000a40 <main+0x758>
				{
					Display_Clear(&lcd1) ;
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <main+0x244>)
 80004fa:	f000 fef5 	bl	80012e8 <Display_Clear>
					Display_Clear(&lcd2) ;
 80004fe:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x24c>)
 8000500:	f000 fef2 	bl	80012e8 <Display_Clear>
					Display_Clear(&lcd3) ;
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0x254>)
 8000506:	f000 feef 	bl	80012e8 <Display_Clear>
					sys_state = state_idle ;  //trans
 800050a:	2301      	movs	r3, #1
 800050c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
					state_idle_timer = get_mtick() +1000;
 8000510:	f000 fbd6 	bl	8000cc0 <get_mtick>
 8000514:	4603      	mov	r3, r0
 8000516:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800051a:	653b      	str	r3, [r7, #80]	; 0x50
				}

				break ;
 800051c:	e290      	b.n	8000a40 <main+0x758>
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	20000044 	.word	0x20000044
 8000528:	20000048 	.word	0x20000048
 800052c:	200000f8 	.word	0x200000f8
 8000530:	40005400 	.word	0x40005400
 8000534:	20000504 	.word	0x20000504
 8000538:	40005800 	.word	0x40005800
 800053c:	20000910 	.word	0x20000910
 8000540:	40007800 	.word	0x40007800
 8000544:	080002d5 	.word	0x080002d5
 8000548:	48000800 	.word	0x48000800
 800054c:	08002ae4 	.word	0x08002ae4

			case state_idle:
			{
				static uint32_t sub_state_timer = 0 ;

				switch(idel_sub_state)
 8000550:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000554:	2b00      	cmp	r3, #0
 8000556:	d076      	beq.n	8000646 <main+0x35e>
 8000558:	2b01      	cmp	r3, #1
 800055a:	f040 80db 	bne.w	8000714 <main+0x42c>
				{

					case state_display_time :
					{
						if(get_mtick() - state_idle_timer >= 960)
 800055e:	f000 fbaf 	bl	8000cc0 <get_mtick>
 8000562:	4602      	mov	r2, r0
 8000564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 800056c:	d34f      	bcc.n	800060e <main+0x326>
						{
							///
							rtc_get_time(&t) ;
 800056e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fbfa 	bl	8001d6c <rtc_get_time>
							char hour[4] ;
							char minute[4] ;
							char second[4] ;

							sprintf(hour , "%.2d" , t.hr) ;
 8000578:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800057c:	461a      	mov	r2, r3
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	49b0      	ldr	r1, [pc, #704]	; (8000844 <main+0x55c>)
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fdab 	bl	80020e0 <siprintf>
							sprintf(minute , "%.2d" , t.min) ;
 800058a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800058e:	461a      	mov	r2, r3
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	49ab      	ldr	r1, [pc, #684]	; (8000844 <main+0x55c>)
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fda2 	bl	80020e0 <siprintf>
							sprintf(second , "%.2d" , t.sec) ;
 800059c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80005a0:	461a      	mov	r2, r3
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	49a7      	ldr	r1, [pc, #668]	; (8000844 <main+0x55c>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fd99 	bl	80020e0 <siprintf>

							Display_GotoXY(&lcd1 , 50,20);
 80005ae:	2214      	movs	r2, #20
 80005b0:	2132      	movs	r1, #50	; 0x32
 80005b2:	48a5      	ldr	r0, [pc, #660]	; (8000848 <main+0x560>)
 80005b4:	f000 fdd7 	bl	8001166 <Display_GotoXY>

							Display_Puts(&lcd1 ,hour ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80005b8:	f107 011c 	add.w	r1, r7, #28
 80005bc:	2301      	movs	r3, #1
 80005be:	4aa3      	ldr	r2, [pc, #652]	; (800084c <main+0x564>)
 80005c0:	48a1      	ldr	r0, [pc, #644]	; (8000848 <main+0x560>)
 80005c2:	f000 fe6c 	bl	800129e <Display_Puts>

							Display_GotoXY(&lcd2 , 50,20);
 80005c6:	2214      	movs	r2, #20
 80005c8:	2132      	movs	r1, #50	; 0x32
 80005ca:	48a1      	ldr	r0, [pc, #644]	; (8000850 <main+0x568>)
 80005cc:	f000 fdcb 	bl	8001166 <Display_GotoXY>

							Display_Puts(&lcd2 ,minute ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80005d0:	f107 0118 	add.w	r1, r7, #24
 80005d4:	2301      	movs	r3, #1
 80005d6:	4a9d      	ldr	r2, [pc, #628]	; (800084c <main+0x564>)
 80005d8:	489d      	ldr	r0, [pc, #628]	; (8000850 <main+0x568>)
 80005da:	f000 fe60 	bl	800129e <Display_Puts>

							Display_GotoXY(&lcd3 , 50,20);
 80005de:	2214      	movs	r2, #20
 80005e0:	2132      	movs	r1, #50	; 0x32
 80005e2:	489c      	ldr	r0, [pc, #624]	; (8000854 <main+0x56c>)
 80005e4:	f000 fdbf 	bl	8001166 <Display_GotoXY>

							Display_Puts(&lcd3 ,second ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80005e8:	f107 0114 	add.w	r1, r7, #20
 80005ec:	2301      	movs	r3, #1
 80005ee:	4a97      	ldr	r2, [pc, #604]	; (800084c <main+0x564>)
 80005f0:	4898      	ldr	r0, [pc, #608]	; (8000854 <main+0x56c>)
 80005f2:	f000 fe54 	bl	800129e <Display_Puts>

							Display_UpdateScreen(&lcd1);
 80005f6:	4894      	ldr	r0, [pc, #592]	; (8000848 <main+0x560>)
 80005f8:	f000 fd01 	bl	8000ffe <Display_UpdateScreen>
							Display_UpdateScreen(&lcd2);
 80005fc:	4894      	ldr	r0, [pc, #592]	; (8000850 <main+0x568>)
 80005fe:	f000 fcfe 	bl	8000ffe <Display_UpdateScreen>
							Display_UpdateScreen(&lcd3);
 8000602:	4894      	ldr	r0, [pc, #592]	; (8000854 <main+0x56c>)
 8000604:	f000 fcfb 	bl	8000ffe <Display_UpdateScreen>

							state_idle_timer = get_mtick() ;
 8000608:	f000 fb5a 	bl	8000cc0 <get_mtick>
 800060c:	6538      	str	r0, [r7, #80]	; 0x50
						}

						if(get_mtick() - sub_state_timer > 3000)
 800060e:	f000 fb57 	bl	8000cc0 <get_mtick>
 8000612:	4602      	mov	r2, r0
 8000614:	4b90      	ldr	r3, [pc, #576]	; (8000858 <main+0x570>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800061e:	4293      	cmp	r3, r2
 8000620:	d97a      	bls.n	8000718 <main+0x430>
						{
							idel_sub_state =  state_display_date ;
 8000622:	2300      	movs	r3, #0
 8000624:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
							sub_state_timer = get_mtick() ;
 8000628:	f000 fb4a 	bl	8000cc0 <get_mtick>
 800062c:	4603      	mov	r3, r0
 800062e:	4a8a      	ldr	r2, [pc, #552]	; (8000858 <main+0x570>)
 8000630:	6013      	str	r3, [r2, #0]
							Display_Clear(&lcd1) ;
 8000632:	4885      	ldr	r0, [pc, #532]	; (8000848 <main+0x560>)
 8000634:	f000 fe58 	bl	80012e8 <Display_Clear>
							Display_Clear(&lcd2) ;
 8000638:	4885      	ldr	r0, [pc, #532]	; (8000850 <main+0x568>)
 800063a:	f000 fe55 	bl	80012e8 <Display_Clear>
							Display_Clear(&lcd3) ;
 800063e:	4885      	ldr	r0, [pc, #532]	; (8000854 <main+0x56c>)
 8000640:	f000 fe52 	bl	80012e8 <Display_Clear>
						}

						break ;
 8000644:	e068      	b.n	8000718 <main+0x430>
					}
					case state_display_date:
					{

						rtc_get_date(&d) ;
 8000646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fc0a 	bl	8001e64 <rtc_get_date>

						char year[6] ;
						char month[4] ;
						char day[4] ;

						sprintf(year , "20%.2d" , d.year) ;
 8000650:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000654:	461a      	mov	r2, r3
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	4980      	ldr	r1, [pc, #512]	; (800085c <main+0x574>)
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fd3f 	bl	80020e0 <siprintf>
						sprintf(month , "%.2d" , d.month) ;
 8000662:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000666:	461a      	mov	r2, r3
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4975      	ldr	r1, [pc, #468]	; (8000844 <main+0x55c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fd36 	bl	80020e0 <siprintf>
						sprintf(day  , "%.2d" , d.day) ;
 8000674:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000678:	461a      	mov	r2, r3
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4971      	ldr	r1, [pc, #452]	; (8000844 <main+0x55c>)
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fd2e 	bl	80020e0 <siprintf>

						Display_GotoXY(&lcd1 , 50,20);
 8000684:	2214      	movs	r2, #20
 8000686:	2132      	movs	r1, #50	; 0x32
 8000688:	486f      	ldr	r0, [pc, #444]	; (8000848 <main+0x560>)
 800068a:	f000 fd6c 	bl	8001166 <Display_GotoXY>

						Display_Puts(&lcd1 ,day ,& Font_11x18 , Display_COLOR_WHITE ) ;
 800068e:	1d39      	adds	r1, r7, #4
 8000690:	2301      	movs	r3, #1
 8000692:	4a6e      	ldr	r2, [pc, #440]	; (800084c <main+0x564>)
 8000694:	486c      	ldr	r0, [pc, #432]	; (8000848 <main+0x560>)
 8000696:	f000 fe02 	bl	800129e <Display_Puts>

						Display_GotoXY(&lcd2 , 50,20);
 800069a:	2214      	movs	r2, #20
 800069c:	2132      	movs	r1, #50	; 0x32
 800069e:	486c      	ldr	r0, [pc, #432]	; (8000850 <main+0x568>)
 80006a0:	f000 fd61 	bl	8001166 <Display_GotoXY>

						Display_Puts(&lcd2 ,month ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80006a4:	f107 0108 	add.w	r1, r7, #8
 80006a8:	2301      	movs	r3, #1
 80006aa:	4a68      	ldr	r2, [pc, #416]	; (800084c <main+0x564>)
 80006ac:	4868      	ldr	r0, [pc, #416]	; (8000850 <main+0x568>)
 80006ae:	f000 fdf6 	bl	800129e <Display_Puts>

						Display_GotoXY(&lcd3 , 40,20);
 80006b2:	2214      	movs	r2, #20
 80006b4:	2128      	movs	r1, #40	; 0x28
 80006b6:	4867      	ldr	r0, [pc, #412]	; (8000854 <main+0x56c>)
 80006b8:	f000 fd55 	bl	8001166 <Display_GotoXY>

						Display_Puts(&lcd3 ,year ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	2301      	movs	r3, #1
 80006c2:	4a62      	ldr	r2, [pc, #392]	; (800084c <main+0x564>)
 80006c4:	4863      	ldr	r0, [pc, #396]	; (8000854 <main+0x56c>)
 80006c6:	f000 fdea 	bl	800129e <Display_Puts>

						Display_UpdateScreen(&lcd1);
 80006ca:	485f      	ldr	r0, [pc, #380]	; (8000848 <main+0x560>)
 80006cc:	f000 fc97 	bl	8000ffe <Display_UpdateScreen>
						Display_UpdateScreen(&lcd2);
 80006d0:	485f      	ldr	r0, [pc, #380]	; (8000850 <main+0x568>)
 80006d2:	f000 fc94 	bl	8000ffe <Display_UpdateScreen>
						Display_UpdateScreen(&lcd3);
 80006d6:	485f      	ldr	r0, [pc, #380]	; (8000854 <main+0x56c>)
 80006d8:	f000 fc91 	bl	8000ffe <Display_UpdateScreen>

						if(get_mtick() - sub_state_timer > 3000)
 80006dc:	f000 faf0 	bl	8000cc0 <get_mtick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b5d      	ldr	r3, [pc, #372]	; (8000858 <main+0x570>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d915      	bls.n	800071c <main+0x434>
						{
							idel_sub_state =  state_display_time ;
 80006f0:	2301      	movs	r3, #1
 80006f2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
							Display_Clear(&lcd1) ;
 80006f6:	4854      	ldr	r0, [pc, #336]	; (8000848 <main+0x560>)
 80006f8:	f000 fdf6 	bl	80012e8 <Display_Clear>
							Display_Clear(&lcd2) ;
 80006fc:	4854      	ldr	r0, [pc, #336]	; (8000850 <main+0x568>)
 80006fe:	f000 fdf3 	bl	80012e8 <Display_Clear>
							Display_Clear(&lcd3) ;
 8000702:	4854      	ldr	r0, [pc, #336]	; (8000854 <main+0x56c>)
 8000704:	f000 fdf0 	bl	80012e8 <Display_Clear>
							sub_state_timer = get_mtick() ;
 8000708:	f000 fada 	bl	8000cc0 <get_mtick>
 800070c:	4603      	mov	r3, r0
 800070e:	4a52      	ldr	r2, [pc, #328]	; (8000858 <main+0x570>)
 8000710:	6013      	str	r3, [r2, #0]
						}

						break ;
 8000712:	e003      	b.n	800071c <main+0x434>
					}
					default :
						break ;
 8000714:	bf00      	nop
 8000716:	e002      	b.n	800071e <main+0x436>
						break ;
 8000718:	bf00      	nop
 800071a:	e000      	b.n	800071e <main+0x436>
						break ;
 800071c:	bf00      	nop
				}

				if( key != 0)
 800071e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000722:	2b00      	cmp	r3, #0
 8000724:	f000 818e 	beq.w	8000a44 <main+0x75c>
				{
					sys_state = state_menu_nav ; //transition
 8000728:	2302      	movs	r3, #2
 800072a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				}

				break ;
 800072e:	e189      	b.n	8000a44 <main+0x75c>
			}
			case state_menu_nav:
			{
				switch(menu_nav_sub_state)
 8000730:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000734:	2b05      	cmp	r3, #5
 8000736:	f200 8187 	bhi.w	8000a48 <main+0x760>
 800073a:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <main+0x458>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	08000759 	.word	0x08000759
 8000744:	080007c7 	.word	0x080007c7
 8000748:	080008b1 	.word	0x080008b1
 800074c:	0800093b 	.word	0x0800093b
 8000750:	08000a07 	.word	0x08000a07
 8000754:	08000a35 	.word	0x08000a35
					static int menu_index = 0 ;
					static int menu_index_prev  = 0 ;
					static char * selected_sub_menu_item ;
					case menu_nav_start:
					{
						Display_Clear(&lcd1) ;
 8000758:	483b      	ldr	r0, [pc, #236]	; (8000848 <main+0x560>)
 800075a:	f000 fdc5 	bl	80012e8 <Display_Clear>
						Display_Clear(&lcd2) ;
 800075e:	483c      	ldr	r0, [pc, #240]	; (8000850 <main+0x568>)
 8000760:	f000 fdc2 	bl	80012e8 <Display_Clear>
						Display_Clear(&lcd3) ;
 8000764:	483b      	ldr	r0, [pc, #236]	; (8000854 <main+0x56c>)
 8000766:	f000 fdbf 	bl	80012e8 <Display_Clear>
						Display_GotoXY(&lcd1 , 10,20);
 800076a:	2214      	movs	r2, #20
 800076c:	210a      	movs	r1, #10
 800076e:	4836      	ldr	r0, [pc, #216]	; (8000848 <main+0x560>)
 8000770:	f000 fcf9 	bl	8001166 <Display_GotoXY>

						Display_Puts(&lcd1 ,"Zeit" ,& Font_11x18 , Display_COLOR_WHITE ) ;
 8000774:	2301      	movs	r3, #1
 8000776:	4a35      	ldr	r2, [pc, #212]	; (800084c <main+0x564>)
 8000778:	4939      	ldr	r1, [pc, #228]	; (8000860 <main+0x578>)
 800077a:	4833      	ldr	r0, [pc, #204]	; (8000848 <main+0x560>)
 800077c:	f000 fd8f 	bl	800129e <Display_Puts>

						Display_GotoXY(&lcd2 , 10,20);
 8000780:	2214      	movs	r2, #20
 8000782:	210a      	movs	r1, #10
 8000784:	4832      	ldr	r0, [pc, #200]	; (8000850 <main+0x568>)
 8000786:	f000 fcee 	bl	8001166 <Display_GotoXY>

						Display_Puts(&lcd2 ,"date" ,& Font_11x18 , Display_COLOR_WHITE ) ;
 800078a:	2301      	movs	r3, #1
 800078c:	4a2f      	ldr	r2, [pc, #188]	; (800084c <main+0x564>)
 800078e:	4935      	ldr	r1, [pc, #212]	; (8000864 <main+0x57c>)
 8000790:	482f      	ldr	r0, [pc, #188]	; (8000850 <main+0x568>)
 8000792:	f000 fd84 	bl	800129e <Display_Puts>

						Display_GotoXY(&lcd3 , 10,20);
 8000796:	2214      	movs	r2, #20
 8000798:	210a      	movs	r1, #10
 800079a:	482e      	ldr	r0, [pc, #184]	; (8000854 <main+0x56c>)
 800079c:	f000 fce3 	bl	8001166 <Display_GotoXY>

						Display_Puts(&lcd3 ,"parametre" ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80007a0:	2301      	movs	r3, #1
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <main+0x564>)
 80007a4:	4930      	ldr	r1, [pc, #192]	; (8000868 <main+0x580>)
 80007a6:	482b      	ldr	r0, [pc, #172]	; (8000854 <main+0x56c>)
 80007a8:	f000 fd79 	bl	800129e <Display_Puts>

						Display_UpdateScreen(&lcd1);
 80007ac:	4826      	ldr	r0, [pc, #152]	; (8000848 <main+0x560>)
 80007ae:	f000 fc26 	bl	8000ffe <Display_UpdateScreen>
						Display_UpdateScreen(&lcd2);
 80007b2:	4827      	ldr	r0, [pc, #156]	; (8000850 <main+0x568>)
 80007b4:	f000 fc23 	bl	8000ffe <Display_UpdateScreen>
						Display_UpdateScreen(&lcd3);
 80007b8:	4826      	ldr	r0, [pc, #152]	; (8000854 <main+0x56c>)
 80007ba:	f000 fc20 	bl	8000ffe <Display_UpdateScreen>

						menu_nav_sub_state = menu_nav_update ;
 80007be:	2301      	movs	r3, #1
 80007c0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
						break ;
 80007c4:	e139      	b.n	8000a3a <main+0x752>
					}
					case menu_nav_update:
					{


						if( key == '6' )
 80007c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007ca:	2b36      	cmp	r3, #54	; 0x36
 80007cc:	d109      	bne.n	80007e2 <main+0x4fa>
						{
							//right
							menu_index_prev = menu_index ;
 80007ce:	4b27      	ldr	r3, [pc, #156]	; (800086c <main+0x584>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <main+0x588>)
 80007d4:	6013      	str	r3, [r2, #0]
							menu_index++;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <main+0x584>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	4a23      	ldr	r2, [pc, #140]	; (800086c <main+0x584>)
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	e028      	b.n	8000834 <main+0x54c>
						}
						else if( key == '4')
 80007e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007e6:	2b34      	cmp	r3, #52	; 0x34
 80007e8:	d109      	bne.n	80007fe <main+0x516>
						{
							//left
							menu_index_prev = menu_index ;
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <main+0x584>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a20      	ldr	r2, [pc, #128]	; (8000870 <main+0x588>)
 80007f0:	6013      	str	r3, [r2, #0]
							menu_index--;
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <main+0x584>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	4a1c      	ldr	r2, [pc, #112]	; (800086c <main+0x584>)
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e01a      	b.n	8000834 <main+0x54c>
						}
						else if( key == '#' )
 80007fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000802:	2b23      	cmp	r3, #35	; 0x23
 8000804:	d10c      	bne.n	8000820 <main+0x538>
						{
							//transition
							//confirm
							menu_nav_sub_state = menu_nav_submenu_start ; //go to submenu
 8000806:	2302      	movs	r3, #2
 8000808:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
							Display_Clear(&lcd1) ;
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <main+0x560>)
 800080e:	f000 fd6b 	bl	80012e8 <Display_Clear>
							Display_Clear(&lcd2) ;
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <main+0x568>)
 8000814:	f000 fd68 	bl	80012e8 <Display_Clear>
							Display_Clear(&lcd3) ;
 8000818:	480e      	ldr	r0, [pc, #56]	; (8000854 <main+0x56c>)
 800081a:	f000 fd65 	bl	80012e8 <Display_Clear>
 800081e:	e009      	b.n	8000834 <main+0x54c>
							//sys_state =
						}
						else if(key == '*')
 8000820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000824:	2b2a      	cmp	r3, #42	; 0x2a
 8000826:	d105      	bne.n	8000834 <main+0x54c>
						{
							//transiton
							//back
							menu_nav_sub_state = menu_nav_start ; //reset substate
 8000828:	2300      	movs	r3, #0
 800082a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
							sys_state = state_idle ;
 800082e:	2301      	movs	r3, #1
 8000830:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
						}
						else{

						}

						if(menu_index >= 3)
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <main+0x584>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	dd1b      	ble.n	8000874 <main+0x58c>
						{
							menu_index = 0 ;
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <main+0x584>)
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	e01e      	b.n	8000882 <main+0x59a>
 8000844:	08002ac0 	.word	0x08002ac0
 8000848:	200000f8 	.word	0x200000f8
 800084c:	2000005c 	.word	0x2000005c
 8000850:	20000504 	.word	0x20000504
 8000854:	20000910 	.word	0x20000910
 8000858:	20000d1c 	.word	0x20000d1c
 800085c:	08002ac8 	.word	0x08002ac8
 8000860:	08002ad0 	.word	0x08002ad0
 8000864:	08002a1c 	.word	0x08002a1c
 8000868:	08002ad8 	.word	0x08002ad8
 800086c:	20000d20 	.word	0x20000d20
 8000870:	20000d24 	.word	0x20000d24
						}

						else if(menu_index < 0)
 8000874:	4b7f      	ldr	r3, [pc, #508]	; (8000a74 <main+0x78c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	da02      	bge.n	8000882 <main+0x59a>
						{
							menu_index = 2 ;
 800087c:	4b7d      	ldr	r3, [pc, #500]	; (8000a74 <main+0x78c>)
 800087e:	2202      	movs	r2, #2
 8000880:	601a      	str	r2, [r3, #0]
						}
						else{

						}

						gpio_set_pinState(GPIOA , LED_TAB[menu_index_prev]  , LOW ) ;
 8000882:	4b7d      	ldr	r3, [pc, #500]	; (8000a78 <main+0x790>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a7d      	ldr	r2, [pc, #500]	; (8000a7c <main+0x794>)
 8000888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088c:	2201      	movs	r2, #1
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f000 fed8 	bl	8001648 <gpio_set_pinState>
						gpio_set_pinState(GPIOA , LED_TAB[menu_index]  , HIGH  ) ;
 8000898:	4b76      	ldr	r3, [pc, #472]	; (8000a74 <main+0x78c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a77      	ldr	r2, [pc, #476]	; (8000a7c <main+0x794>)
 800089e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f000 fecd 	bl	8001648 <gpio_set_pinState>

						//current_lcd

						break ;
 80008ae:	e0c4      	b.n	8000a3a <main+0x752>
					}
					case menu_nav_submenu_start :
					{
						//executed once when entring  submenu
						Display_GotoXY(&lcd1 , 10,20);
 80008b0:	2214      	movs	r2, #20
 80008b2:	210a      	movs	r1, #10
 80008b4:	4872      	ldr	r0, [pc, #456]	; (8000a80 <main+0x798>)
 80008b6:	f000 fc56 	bl	8001166 <Display_GotoXY>

						Display_Puts(&lcd1 ,(char*)MENU[menu_index] ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80008ba:	4b6e      	ldr	r3, [pc, #440]	; (8000a74 <main+0x78c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a71      	ldr	r2, [pc, #452]	; (8000a84 <main+0x79c>)
 80008c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80008c4:	2301      	movs	r3, #1
 80008c6:	4a70      	ldr	r2, [pc, #448]	; (8000a88 <main+0x7a0>)
 80008c8:	486d      	ldr	r0, [pc, #436]	; (8000a80 <main+0x798>)
 80008ca:	f000 fce8 	bl	800129e <Display_Puts>

						for(int i = 0 ; i < submenu_item_lenght[menu_index] ; i++ )
 80008ce:	2300      	movs	r3, #0
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80008d2:	e01d      	b.n	8000910 <main+0x628>
						{
							Display_GotoXY(&lcd2 , 10 , 20 + (9 * i) );
 80008d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	00d2      	lsls	r2, r2, #3
 80008dc:	4413      	add	r3, r2
 80008de:	b29b      	uxth	r3, r3
 80008e0:	3314      	adds	r3, #20
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	210a      	movs	r1, #10
 80008e8:	4868      	ldr	r0, [pc, #416]	; (8000a8c <main+0x7a4>)
 80008ea:	f000 fc3c 	bl	8001166 <Display_GotoXY>
							Display_Puts(&lcd2 ,(char*)SUB_MENU[menu_index][i] ,& Font_7x10 , Display_COLOR_WHITE ) ;
 80008ee:	4b61      	ldr	r3, [pc, #388]	; (8000a74 <main+0x78c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a67      	ldr	r2, [pc, #412]	; (8000a90 <main+0x7a8>)
 80008f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	6819      	ldr	r1, [r3, #0]
 8000900:	2301      	movs	r3, #1
 8000902:	4a64      	ldr	r2, [pc, #400]	; (8000a94 <main+0x7ac>)
 8000904:	4861      	ldr	r0, [pc, #388]	; (8000a8c <main+0x7a4>)
 8000906:	f000 fcca 	bl	800129e <Display_Puts>
						for(int i = 0 ; i < submenu_item_lenght[menu_index] ; i++ )
 800090a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800090c:	3301      	adds	r3, #1
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000910:	4b58      	ldr	r3, [pc, #352]	; (8000a74 <main+0x78c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a60      	ldr	r2, [pc, #384]	; (8000a98 <main+0x7b0>)
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800091c:	429a      	cmp	r2, r3
 800091e:	dbd9      	blt.n	80008d4 <main+0x5ec>
						}

						Display_UpdateScreen(&lcd1);
 8000920:	4857      	ldr	r0, [pc, #348]	; (8000a80 <main+0x798>)
 8000922:	f000 fb6c 	bl	8000ffe <Display_UpdateScreen>
						Display_UpdateScreen(&lcd2);
 8000926:	4859      	ldr	r0, [pc, #356]	; (8000a8c <main+0x7a4>)
 8000928:	f000 fb69 	bl	8000ffe <Display_UpdateScreen>
						Display_UpdateScreen(&lcd3);
 800092c:	485b      	ldr	r0, [pc, #364]	; (8000a9c <main+0x7b4>)
 800092e:	f000 fb66 	bl	8000ffe <Display_UpdateScreen>

						menu_nav_sub_state = menu_nav_submenu_update ;
 8000932:	2303      	movs	r3, #3
 8000934:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

						break ;
 8000938:	e07f      	b.n	8000a3a <main+0x752>

					case menu_nav_submenu_update :
					{
						static int submenu_index = 0 ;

						if(key == '2')
 800093a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800093e:	2b32      	cmp	r3, #50	; 0x32
 8000940:	d108      	bne.n	8000954 <main+0x66c>
						{
							Display_Clear(&lcd3) ;
 8000942:	4856      	ldr	r0, [pc, #344]	; (8000a9c <main+0x7b4>)
 8000944:	f000 fcd0 	bl	80012e8 <Display_Clear>
							submenu_index--;
 8000948:	4b55      	ldr	r3, [pc, #340]	; (8000aa0 <main+0x7b8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3b01      	subs	r3, #1
 800094e:	4a54      	ldr	r2, [pc, #336]	; (8000aa0 <main+0x7b8>)
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	e027      	b.n	80009a4 <main+0x6bc>
						}
						else if(key == '8')
 8000954:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000958:	2b38      	cmp	r3, #56	; 0x38
 800095a:	d108      	bne.n	800096e <main+0x686>
						{
							Display_Clear(&lcd3) ;
 800095c:	484f      	ldr	r0, [pc, #316]	; (8000a9c <main+0x7b4>)
 800095e:	f000 fcc3 	bl	80012e8 <Display_Clear>
							submenu_index++;
 8000962:	4b4f      	ldr	r3, [pc, #316]	; (8000aa0 <main+0x7b8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a4d      	ldr	r2, [pc, #308]	; (8000aa0 <main+0x7b8>)
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	e01a      	b.n	80009a4 <main+0x6bc>
						}

						else if(key == '*')
 800096e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000972:	2b2a      	cmp	r3, #42	; 0x2a
 8000974:	d103      	bne.n	800097e <main+0x696>
						{
							//transition
							menu_nav_sub_state = menu_nav_start ; //reset substate
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800097c:	e012      	b.n	80009a4 <main+0x6bc>
						}
						else if( key == '#')
 800097e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000982:	2b23      	cmp	r3, #35	; 0x23
 8000984:	d10e      	bne.n	80009a4 <main+0x6bc>
						{
							//transition to configuration
							menu_nav_sub_state = menu_nav_submenu_config ;
 8000986:	2304      	movs	r3, #4
 8000988:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
							selected_sub_menu_item = (char*)SUB_MENU[menu_index][submenu_index] ;
 800098c:	4b39      	ldr	r3, [pc, #228]	; (8000a74 <main+0x78c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a3f      	ldr	r2, [pc, #252]	; (8000a90 <main+0x7a8>)
 8000992:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <main+0x7b8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a40      	ldr	r2, [pc, #256]	; (8000aa4 <main+0x7bc>)
 80009a2:	6013      	str	r3, [r2, #0]
						}


						//test boundry

						if(submenu_index >= submenu_item_lenght[menu_index])
 80009a4:	4b33      	ldr	r3, [pc, #204]	; (8000a74 <main+0x78c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a3b      	ldr	r2, [pc, #236]	; (8000a98 <main+0x7b0>)
 80009aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ae:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <main+0x7b8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	dc03      	bgt.n	80009be <main+0x6d6>
						{
							submenu_index = 0 ;
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <main+0x7b8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	e00b      	b.n	80009d6 <main+0x6ee>
						}
						else if(submenu_index < 0)
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <main+0x7b8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da07      	bge.n	80009d6 <main+0x6ee>
						{
							submenu_index = submenu_item_lenght[menu_index] - 1 ;
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <main+0x78c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <main+0x7b0>)
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	4a33      	ldr	r2, [pc, #204]	; (8000aa0 <main+0x7b8>)
 80009d4:	6013      	str	r3, [r2, #0]
						}

						Display_GotoXY(&lcd3 , 10 , 20 );
 80009d6:	2214      	movs	r2, #20
 80009d8:	210a      	movs	r1, #10
 80009da:	4830      	ldr	r0, [pc, #192]	; (8000a9c <main+0x7b4>)
 80009dc:	f000 fbc3 	bl	8001166 <Display_GotoXY>
						Display_Puts(&lcd3 ,(char*)SUB_MENU[menu_index][submenu_index] ,& Font_7x10 , Display_COLOR_WHITE ) ;
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <main+0x78c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <main+0x7a8>)
 80009e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <main+0x7b8>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	2301      	movs	r3, #1
 80009f6:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <main+0x7ac>)
 80009f8:	4828      	ldr	r0, [pc, #160]	; (8000a9c <main+0x7b4>)
 80009fa:	f000 fc50 	bl	800129e <Display_Puts>
						Display_UpdateScreen(&lcd3);
 80009fe:	4827      	ldr	r0, [pc, #156]	; (8000a9c <main+0x7b4>)
 8000a00:	f000 fafd 	bl	8000ffe <Display_UpdateScreen>

						break ;
 8000a04:	e019      	b.n	8000a3a <main+0x752>
					}
					case menu_nav_submenu_config :
					{
						//this state will handle user input
						int ret = handle_user_input(selected_sub_menu_item , key) ;
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <main+0x7bc>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f849 	bl	8000aa8 <handle_user_input>
 8000a16:	6438      	str	r0, [r7, #64]	; 0x40
						//-1 back
						// 0 nothink
						//other int
						if( ret == -1)
 8000a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1e:	d10b      	bne.n	8000a38 <main+0x750>
						{
							//
							Display_Clear(&lcd3) ;
 8000a20:	481e      	ldr	r0, [pc, #120]	; (8000a9c <main+0x7b4>)
 8000a22:	f000 fc61 	bl	80012e8 <Display_Clear>
							Display_UpdateScreen(&lcd3);
 8000a26:	481d      	ldr	r0, [pc, #116]	; (8000a9c <main+0x7b4>)
 8000a28:	f000 fae9 	bl	8000ffe <Display_UpdateScreen>
							menu_nav_sub_state = menu_nav_submenu_update ;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
						}
						else
						{
							//save config
						}
						break ;
 8000a32:	e001      	b.n	8000a38 <main+0x750>
					}
					case menu_nav_exit:
					{


						break ;
 8000a34:	bf00      	nop
 8000a36:	e007      	b.n	8000a48 <main+0x760>
						break ;
 8000a38:	bf00      	nop
					}
				}

				break ;
 8000a3a:	e005      	b.n	8000a48 <main+0x760>
			case state_configuration:
			{
				break ;
			}
			default :
				break ;
 8000a3c:	bf00      	nop
 8000a3e:	e004      	b.n	8000a4a <main+0x762>
				break ;
 8000a40:	bf00      	nop
 8000a42:	e002      	b.n	8000a4a <main+0x762>
				break ;
 8000a44:	bf00      	nop
 8000a46:	e000      	b.n	8000a4a <main+0x762>
				break ;
 8000a48:	bf00      	nop
		}


		key = keypad_get_pressedkey() ;
 8000a4a:	f001 f895 	bl	8001b78 <keypad_get_pressedkey>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		rtc_update() ;
 8000a54:	f001 fb0a 	bl	800206c <rtc_update>

		if(get_mtick() - led_timer > 1000)
 8000a58:	f000 f932 	bl	8000cc0 <get_mtick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a66:	f67f ad2d 	bls.w	80004c4 <main+0x1dc>
		{
			//
			//gpio_toggel(GPIOA , 5) ;
			led_timer = get_mtick() ;
 8000a6a:	f000 f929 	bl	8000cc0 <get_mtick>
 8000a6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		switch(sys_state)
 8000a70:	e528      	b.n	80004c4 <main+0x1dc>
 8000a72:	bf00      	nop
 8000a74:	20000d20 	.word	0x20000d20
 8000a78:	20000d24 	.word	0x20000d24
 8000a7c:	20000048 	.word	0x20000048
 8000a80:	200000f8 	.word	0x200000f8
 8000a84:	20000004 	.word	0x20000004
 8000a88:	2000005c 	.word	0x2000005c
 8000a8c:	20000504 	.word	0x20000504
 8000a90:	20000038 	.word	0x20000038
 8000a94:	20000054 	.word	0x20000054
 8000a98:	08002ee4 	.word	0x08002ee4
 8000a9c:	20000910 	.word	0x20000910
 8000aa0:	20000d28 	.word	0x20000d28
 8000aa4:	20000d2c 	.word	0x20000d2c

08000aa8 <handle_user_input>:
int handle_2_digit_input(char key) ;
//int handle_4_digit_input(char *key) ;

//
int handle_user_input(const char * submenu_item , char pressed_key)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
	int ret = 0 ;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]

	if(strncmp(submenu_item , "year config" ,11 ) == 0)
 8000ab8:	220b      	movs	r2, #11
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <handle_user_input+0x34>)
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f001 fb2f 	bl	8002120 <strncmp>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d004      	beq.n	8000ad2 <handle_user_input+0x2a>
		//handle_4_digit_input() ;
	}
	else
	{
		//handle_2_digit_input();
		ret = handle_2_digit_input(pressed_key) ;
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f814 	bl	8000af8 <handle_2_digit_input>
 8000ad0:	60f8      	str	r0, [r7, #12]
	}

	return ret ;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	08002a78 	.word	0x08002a78

08000ae0 <key_to_digit>:

static int key_to_digit(char key)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	//assure key in['0'..'9']
	return (key - 48) ;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	3b30      	subs	r3, #48	; 0x30
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <handle_2_digit_input>:

/**
 * return 0 if the state machine still running , -1 is '*' is pressed ,the user input if '#" is pressed
 */
int handle_2_digit_input(char key)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
	static input_state_t inp_state = inp_state_one ;
	//char input_string[2] ;
	//static int  input_str_index = 0 ;
	static int  input = 0 ;

	int ret = 0 ;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]

	switch(inp_state)
 8000b06:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <handle_2_digit_input+0x134>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d052      	beq.n	8000bb4 <handle_2_digit_input+0xbc>
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	dc7f      	bgt.n	8000c12 <handle_2_digit_input+0x11a>
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <handle_2_digit_input+0x24>
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d027      	beq.n	8000b6a <handle_2_digit_input+0x72>

			}
			break ;
		}
		default :
			break ;
 8000b1a:	e07a      	b.n	8000c12 <handle_2_digit_input+0x11a>
			if( key != 0 && key != '#' && key != '*')
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d079      	beq.n	8000c16 <handle_2_digit_input+0x11e>
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b23      	cmp	r3, #35	; 0x23
 8000b26:	d076      	beq.n	8000c16 <handle_2_digit_input+0x11e>
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8000b2c:	d073      	beq.n	8000c16 <handle_2_digit_input+0x11e>
				inp_state = inp_state_two ;
 8000b2e:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <handle_2_digit_input+0x134>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
				Display_GotoXY(&lcd3 , 10 , 30 );
 8000b34:	221e      	movs	r2, #30
 8000b36:	210a      	movs	r1, #10
 8000b38:	483d      	ldr	r0, [pc, #244]	; (8000c30 <handle_2_digit_input+0x138>)
 8000b3a:	f000 fb14 	bl	8001166 <Display_GotoXY>
				Display_Putc(&lcd3 ,key,& Font_7x10 , Display_COLOR_WHITE ) ;
 8000b3e:	79f9      	ldrb	r1, [r7, #7]
 8000b40:	2301      	movs	r3, #1
 8000b42:	4a3c      	ldr	r2, [pc, #240]	; (8000c34 <handle_2_digit_input+0x13c>)
 8000b44:	483a      	ldr	r0, [pc, #232]	; (8000c30 <handle_2_digit_input+0x138>)
 8000b46:	f000 fb23 	bl	8001190 <Display_Putc>
				Display_UpdateScreen(&lcd3);
 8000b4a:	4839      	ldr	r0, [pc, #228]	; (8000c30 <handle_2_digit_input+0x138>)
 8000b4c:	f000 fa57 	bl	8000ffe <Display_UpdateScreen>
				input = key_to_digit(key) * 10 ;
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ffc4 	bl	8000ae0 <key_to_digit>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <handle_2_digit_input+0x140>)
 8000b66:	601a      	str	r2, [r3, #0]
			break ;
 8000b68:	e055      	b.n	8000c16 <handle_2_digit_input+0x11e>
			if( key != 0 && key != '#' && key != '*')
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d054      	beq.n	8000c1a <handle_2_digit_input+0x122>
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b23      	cmp	r3, #35	; 0x23
 8000b74:	d051      	beq.n	8000c1a <handle_2_digit_input+0x122>
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b2a      	cmp	r3, #42	; 0x2a
 8000b7a:	d04e      	beq.n	8000c1a <handle_2_digit_input+0x122>
				inp_state = inp_state_validate ;
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <handle_2_digit_input+0x134>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	701a      	strb	r2, [r3, #0]
				Display_GotoXY(&lcd3 , 20 , 30 );
 8000b82:	221e      	movs	r2, #30
 8000b84:	2114      	movs	r1, #20
 8000b86:	482a      	ldr	r0, [pc, #168]	; (8000c30 <handle_2_digit_input+0x138>)
 8000b88:	f000 faed 	bl	8001166 <Display_GotoXY>
				Display_Putc(&lcd3 ,key,& Font_7x10 , Display_COLOR_WHITE ) ;
 8000b8c:	79f9      	ldrb	r1, [r7, #7]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <handle_2_digit_input+0x13c>)
 8000b92:	4827      	ldr	r0, [pc, #156]	; (8000c30 <handle_2_digit_input+0x138>)
 8000b94:	f000 fafc 	bl	8001190 <Display_Putc>
				input = input + key_to_digit(key) ;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ffa0 	bl	8000ae0 <key_to_digit>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <handle_2_digit_input+0x140>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <handle_2_digit_input+0x140>)
 8000baa:	6013      	str	r3, [r2, #0]
				Display_UpdateScreen(&lcd3);
 8000bac:	4820      	ldr	r0, [pc, #128]	; (8000c30 <handle_2_digit_input+0x138>)
 8000bae:	f000 fa26 	bl	8000ffe <Display_UpdateScreen>
			break ;
 8000bb2:	e032      	b.n	8000c1a <handle_2_digit_input+0x122>
			if( key == '#' )
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b23      	cmp	r3, #35	; 0x23
 8000bb8:	d103      	bne.n	8000bc2 <handle_2_digit_input+0xca>
				ret = input ;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <handle_2_digit_input+0x140>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	60fb      	str	r3, [r7, #12]
			break ;
 8000bc0:	e02d      	b.n	8000c1e <handle_2_digit_input+0x126>
			else if(key == '*')
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8000bc6:	d103      	bne.n	8000bd0 <handle_2_digit_input+0xd8>
				ret = -1 ;
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	60fb      	str	r3, [r7, #12]
			break ;
 8000bce:	e026      	b.n	8000c1e <handle_2_digit_input+0x126>
			else if( key != 0)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d023      	beq.n	8000c1e <handle_2_digit_input+0x126>
				inp_state = inp_state_two ;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <handle_2_digit_input+0x134>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
				Display_GotoXY(&lcd3 , 10 , 30 );
 8000bdc:	221e      	movs	r2, #30
 8000bde:	210a      	movs	r1, #10
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <handle_2_digit_input+0x138>)
 8000be2:	f000 fac0 	bl	8001166 <Display_GotoXY>
				Display_Putc(&lcd3 ,key,& Font_7x10 , Display_COLOR_WHITE ) ;
 8000be6:	79f9      	ldrb	r1, [r7, #7]
 8000be8:	2301      	movs	r3, #1
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <handle_2_digit_input+0x13c>)
 8000bec:	4810      	ldr	r0, [pc, #64]	; (8000c30 <handle_2_digit_input+0x138>)
 8000bee:	f000 facf 	bl	8001190 <Display_Putc>
				Display_UpdateScreen(&lcd3);
 8000bf2:	480f      	ldr	r0, [pc, #60]	; (8000c30 <handle_2_digit_input+0x138>)
 8000bf4:	f000 fa03 	bl	8000ffe <Display_UpdateScreen>
				input = key_to_digit(key) * 10 ;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff70 	bl	8000ae0 <key_to_digit>
 8000c00:	4602      	mov	r2, r0
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <handle_2_digit_input+0x140>)
 8000c0e:	601a      	str	r2, [r3, #0]
			break ;
 8000c10:	e005      	b.n	8000c1e <handle_2_digit_input+0x126>
			break ;
 8000c12:	bf00      	nop
 8000c14:	e004      	b.n	8000c20 <handle_2_digit_input+0x128>
			break ;
 8000c16:	bf00      	nop
 8000c18:	e002      	b.n	8000c20 <handle_2_digit_input+0x128>
			break ;
 8000c1a:	bf00      	nop
 8000c1c:	e000      	b.n	8000c20 <handle_2_digit_input+0x128>
			break ;
 8000c1e:	bf00      	nop
	}
	return ret ;
 8000c20:	68fb      	ldr	r3, [r7, #12]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000d30 	.word	0x20000d30
 8000c30:	20000910 	.word	0x20000910
 8000c34:	20000054 	.word	0x20000054
 8000c38:	20000d34 	.word	0x20000d34

08000c3c <systick_enable>:
 */
/*
  \brief  Structure type to access the System Timer (SysTick).
 */
void systick_enable()
{    //uint32_t SystemCoreClock_ = 8000000; //8 Mhz
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	SysTick->LOAD  = (SystemCoreClock_/1000) - 1;                  /* set reload register */
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <systick_enable+0x30>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <systick_enable+0x34>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	099b      	lsrs	r3, r3, #6
 8000c4c:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <systick_enable+0x38>)
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f7ff fb12 	bl	8000280 <__NVIC_SetPriority>
	SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <systick_enable+0x38>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |  /*!< SysTick CTRL: CLKSOURCE Mask */
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <systick_enable+0x38>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_TICKINT_Msk   |
					 SysTick_CTRL_ENABLE_Msk;
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	10624dd3 	.word	0x10624dd3
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <SysTick_Handler>:


void SysTick_Handler()
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  mtick++;
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Handler+0x18>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <SysTick_Handler+0x18>)
 8000c84:	6013      	str	r3, [r2, #0]
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200000f4 	.word	0x200000f4

08000c94 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t st = get_mtick();
 8000c9c:	f000 f810 	bl	8000cc0 <get_mtick>
 8000ca0:	60f8      	str	r0, [r7, #12]

  while( get_mtick() - st <ms);
 8000ca2:	bf00      	nop
 8000ca4:	f000 f80c 	bl	8000cc0 <get_mtick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <delay_ms+0x10>
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <get_mtick>:

uint32_t get_mtick()
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return mtick;
 8000cc4:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <get_mtick+0x10>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	200000f4 	.word	0x200000f4

08000cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cd4:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000d08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cda:	e003      	b.n	8000ce4 <LoopCopyDataInit>

08000cdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ce0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ce2:	3104      	adds	r1, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ce8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cec:	d3f6      	bcc.n	8000cdc <CopyDataInit>
	ldr	r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cf0:	e002      	b.n	8000cf8 <LoopFillZerobss>

08000cf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cf2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cf4:	f842 3b04 	str.w	r3, [r2], #4

08000cf8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <LoopForever+0x16>)
	cmp	r2, r3
 8000cfa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cfc:	d3f9      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    //bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f001 f9c3 	bl	8002088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d02:	f7ff faf1 	bl	80002e8 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d08:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000d0c:	080043f4 	.word	0x080043f4
	ldr	r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d14:	200000d8 	.word	0x200000d8
	ldr	r2, =_sbss
 8000d18:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 8000d1c:	20000d64 	.word	0x20000d64

08000d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_2_IRQHandler>

08000d22 <Display_DrawBitmap>:
 * The function uses a nested loop to iterate through the image data and draw each pixel on the OLED display using the Display_DrawPixel function.
 * The function also calculates the byte width of the image and uses bit shifting to extract the appropriate pixel data from the bitmap image data.
 */

void Display_DrawBitmap(OLED_t *oled ,uint16_t x, uint16_t y, const unsigned char *bitmap, uint16_t w, uint16_t h, Display_COLOR_t color)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	817b      	strh	r3, [r7, #10]
 8000d30:	4613      	mov	r3, r2
 8000d32:	813b      	strh	r3, [r7, #8]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000d34:	8c3b      	ldrh	r3, [r7, #32]
 8000d36:	3307      	adds	r3, #7
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da00      	bge.n	8000d3e <Display_DrawBitmap+0x1c>
 8000d3c:	3307      	adds	r3, #7
 8000d3e:	10db      	asrs	r3, r3, #3
 8000d40:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	82bb      	strh	r3, [r7, #20]
 8000d4a:	e040      	b.n	8000dce <Display_DrawBitmap+0xac>
    {
        for(int16_t i=0; i<w; i++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	827b      	strh	r3, [r7, #18]
 8000d50:	e02f      	b.n	8000db2 <Display_DrawBitmap+0x90>
        {
            if(i & 7)
 8000d52:	8a7b      	ldrh	r3, [r7, #18]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <Display_DrawBitmap+0x42>
            {
               byte <<= 1;
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	75fb      	strb	r3, [r7, #23]
 8000d62:	e012      	b.n	8000d8a <Display_DrawBitmap+0x68>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000d64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d68:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d6c:	fb03 f202 	mul.w	r2, r3, r2
 8000d70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	da00      	bge.n	8000d7a <Display_DrawBitmap+0x58>
 8000d78:	3307      	adds	r3, #7
 8000d7a:	10db      	asrs	r3, r3, #3
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80)
 8000d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	da09      	bge.n	8000da6 <Display_DrawBitmap+0x84>
            	Display_DrawPixel(oled ,x+i, y, color);
 8000d92:	8a7a      	ldrh	r2, [r7, #18]
 8000d94:	897b      	ldrh	r3, [r7, #10]
 8000d96:	4413      	add	r3, r2
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d9e:	893a      	ldrh	r2, [r7, #8]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 f97b 	bl	800109c <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000da6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3301      	adds	r3, #1
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	827b      	strh	r3, [r7, #18]
 8000db2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000db6:	8c3b      	ldrh	r3, [r7, #32]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbca      	blt.n	8000d52 <Display_DrawBitmap+0x30>
    for(int16_t j=0; j<h; j++, y++)
 8000dbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	82bb      	strh	r3, [r7, #20]
 8000dc8:	893b      	ldrh	r3, [r7, #8]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	813b      	strh	r3, [r7, #8]
 8000dce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbb9      	blt.n	8000d4c <Display_DrawBitmap+0x2a>
        }
    }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <Display_Init>:
 * The function also deactivates scrolling on the OLED and fills the screen with black color.
 * At the end, the function returns 1 to indicate that the initialization was successful.
 */


uint8_t Display_Init(OLED_t * oled) {
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af02      	add	r7, sp, #8
 8000de8:	6078      	str	r0, [r7, #4]

	//delay
	uint32_t p = 2500;
 8000dea:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000dee:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000df0:	e002      	b.n	8000df8 <Display_Init+0x16>
		p--;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f9      	bne.n	8000df2 <Display_Init+0x10>

	Display_WriteCommand(oled , 0xAE); //display off
 8000dfe:	2302      	movs	r3, #2
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	23ae      	movs	r3, #174	; 0xae
 8000e04:	2200      	movs	r2, #0
 8000e06:	213c      	movs	r1, #60	; 0x3c
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fb09 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //Set Memory Addressing Mode
 8000e0e:	2302      	movs	r3, #2
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2320      	movs	r3, #32
 8000e14:	2200      	movs	r2, #0
 8000e16:	213c      	movs	r1, #60	; 0x3c
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 fb01 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e1e:	2302      	movs	r3, #2
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2310      	movs	r3, #16
 8000e24:	2200      	movs	r2, #0
 8000e26:	213c      	movs	r1, #60	; 0x3c
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 faf9 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e2e:	2302      	movs	r3, #2
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	23b0      	movs	r3, #176	; 0xb0
 8000e34:	2200      	movs	r2, #0
 8000e36:	213c      	movs	r1, #60	; 0x3c
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 faf1 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xC8); //Set COM Output Scan Direction
 8000e3e:	2302      	movs	r3, #2
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	23c8      	movs	r3, #200	; 0xc8
 8000e44:	2200      	movs	r2, #0
 8000e46:	213c      	movs	r1, #60	; 0x3c
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 fae9 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //---set low column address
 8000e4e:	2302      	movs	r3, #2
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	2200      	movs	r2, #0
 8000e56:	213c      	movs	r1, #60	; 0x3c
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 fae1 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //---set high column address
 8000e5e:	2302      	movs	r3, #2
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2310      	movs	r3, #16
 8000e64:	2200      	movs	r2, #0
 8000e66:	213c      	movs	r1, #60	; 0x3c
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fad9 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x40); //--set start line address
 8000e6e:	2302      	movs	r3, #2
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2340      	movs	r3, #64	; 0x40
 8000e74:	2200      	movs	r2, #0
 8000e76:	213c      	movs	r1, #60	; 0x3c
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 fad1 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x81); //--set contrast control register
 8000e7e:	2302      	movs	r3, #2
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2381      	movs	r3, #129	; 0x81
 8000e84:	2200      	movs	r2, #0
 8000e86:	213c      	movs	r1, #60	; 0x3c
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 fac9 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xFF);
 8000e8e:	2302      	movs	r3, #2
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	23ff      	movs	r3, #255	; 0xff
 8000e94:	2200      	movs	r2, #0
 8000e96:	213c      	movs	r1, #60	; 0x3c
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fac1 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA1); //--set segment re-map 0 to 127
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	23a1      	movs	r3, #161	; 0xa1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	213c      	movs	r1, #60	; 0x3c
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 fab9 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA6); //--set normal display
 8000eae:	2302      	movs	r3, #2
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	23a6      	movs	r3, #166	; 0xa6
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	213c      	movs	r1, #60	; 0x3c
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 fab1 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA8); //--set multiplex ratio(1 to 64)
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	23a8      	movs	r3, #168	; 0xa8
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	213c      	movs	r1, #60	; 0x3c
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 faa9 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x3F); //
 8000ece:	2302      	movs	r3, #2
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	233f      	movs	r3, #63	; 0x3f
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	213c      	movs	r1, #60	; 0x3c
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 faa1 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ede:	2302      	movs	r3, #2
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	23a4      	movs	r3, #164	; 0xa4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	213c      	movs	r1, #60	; 0x3c
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 fa99 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD3); //-set display offset
 8000eee:	2302      	movs	r3, #2
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	23d3      	movs	r3, #211	; 0xd3
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	213c      	movs	r1, #60	; 0x3c
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 fa91 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //-not offset
 8000efe:	2302      	movs	r3, #2
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2300      	movs	r3, #0
 8000f04:	2200      	movs	r2, #0
 8000f06:	213c      	movs	r1, #60	; 0x3c
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 fa89 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD5); //--set display clock divide ratio/oscillator frequency
 8000f0e:	2302      	movs	r3, #2
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	23d5      	movs	r3, #213	; 0xd5
 8000f14:	2200      	movs	r2, #0
 8000f16:	213c      	movs	r1, #60	; 0x3c
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 fa81 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xF0); //--set divide ratio
 8000f1e:	2302      	movs	r3, #2
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	23f0      	movs	r3, #240	; 0xf0
 8000f24:	2200      	movs	r2, #0
 8000f26:	213c      	movs	r1, #60	; 0x3c
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 fa79 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD9); //--set pre-charge period
 8000f2e:	2302      	movs	r3, #2
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	23d9      	movs	r3, #217	; 0xd9
 8000f34:	2200      	movs	r2, #0
 8000f36:	213c      	movs	r1, #60	; 0x3c
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 fa71 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x22); //
 8000f3e:	2302      	movs	r3, #2
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2322      	movs	r3, #34	; 0x22
 8000f44:	2200      	movs	r2, #0
 8000f46:	213c      	movs	r1, #60	; 0x3c
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 fa69 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDA); //--set Com pins hardware configuration
 8000f4e:	2302      	movs	r3, #2
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	23da      	movs	r3, #218	; 0xda
 8000f54:	2200      	movs	r2, #0
 8000f56:	213c      	movs	r1, #60	; 0x3c
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fa61 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x12);
 8000f5e:	2302      	movs	r3, #2
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2312      	movs	r3, #18
 8000f64:	2200      	movs	r2, #0
 8000f66:	213c      	movs	r1, #60	; 0x3c
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 fa59 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDB); //--set vcomh
 8000f6e:	2302      	movs	r3, #2
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	23db      	movs	r3, #219	; 0xdb
 8000f74:	2200      	movs	r2, #0
 8000f76:	213c      	movs	r1, #60	; 0x3c
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 fa51 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //0x20,0.77xVcc
 8000f7e:	2302      	movs	r3, #2
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2320      	movs	r3, #32
 8000f84:	2200      	movs	r2, #0
 8000f86:	213c      	movs	r1, #60	; 0x3c
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 fa49 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x8D); //--set DC-DC enable
 8000f8e:	2302      	movs	r3, #2
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	238d      	movs	r3, #141	; 0x8d
 8000f94:	2200      	movs	r2, #0
 8000f96:	213c      	movs	r1, #60	; 0x3c
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fa41 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x14); //
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2314      	movs	r3, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	213c      	movs	r1, #60	; 0x3c
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 fa39 	bl	8001420 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xAF); //--turn on SSD1306 panel
 8000fae:	2302      	movs	r3, #2
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	23af      	movs	r3, #175	; 0xaf
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	213c      	movs	r1, #60	; 0x3c
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 fa31 	bl	8001420 <Display_I2C_Write>


	Display_WriteCommand(oled ,Display_DEACTIVATE_SCROLL);
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	232e      	movs	r3, #46	; 0x2e
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	213c      	movs	r1, #60	; 0x3c
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 fa29 	bl	8001420 <Display_I2C_Write>
	//Display_Fill(Display_COLOR_WHITE);	// Clear screen
	Display_Fill(oled ,Display_COLOR_BLACK);	// Clear screen
 8000fce:	2100      	movs	r1, #0
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f84c 	bl	800106e <Display_Fill>
	Display_UpdateScreen(oled);		// Update screen
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f811 	bl	8000ffe <Display_UpdateScreen>

	// Set default values
	oled->CurrentX = 0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = 0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

	// Initialized OK
	oled->Initialized = 1;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409

	// Return OK
	return 1;
 8000ff4:	2301      	movs	r3, #1
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <Display_UpdateScreen>:
 * This function updates the screen of the OLED display by writing the contents of the buffer "oled->Display_Buffer" to the screen.
 * It does this by iterating through each of the 8 pages (m) on the OLED display and setting the page address to the current page (0xB0 + m).
 * It then sets the column address to the start of the page (0x00 and 0x10) and writes the contents
 * of the corresponding section of the buffer (Display_WIDTH * m) to the screen using the Display_I2C_WriteMulti function.
 */
void Display_UpdateScreen(OLED_t * oled) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af02      	add	r7, sp, #8
 8001004:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e028      	b.n	800105e <Display_UpdateScreen+0x60>
		Display_WriteCommand(oled , 0xB0 + m);
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	3b50      	subs	r3, #80	; 0x50
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2202      	movs	r2, #2
 8001014:	9200      	str	r2, [sp, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	213c      	movs	r1, #60	; 0x3c
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fa00 	bl	8001420 <Display_I2C_Write>
		Display_WriteCommand(oled , 0x00);
 8001020:	2302      	movs	r3, #2
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2300      	movs	r3, #0
 8001026:	2200      	movs	r2, #0
 8001028:	213c      	movs	r1, #60	; 0x3c
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f9f8 	bl	8001420 <Display_I2C_Write>
		Display_WriteCommand(oled , 0x10);
 8001030:	2302      	movs	r3, #2
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2310      	movs	r3, #16
 8001036:	2200      	movs	r2, #0
 8001038:	213c      	movs	r1, #60	; 0x3c
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f9f0 	bl	8001420 <Display_I2C_Write>

		Display_I2C_WriteMulti(oled , 0x3C, 0x40, &(oled->Display_Buffer[Display_WIDTH * m]), Display_WIDTH);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	01db      	lsls	r3, r3, #7
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	3304      	adds	r3, #4
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	9200      	str	r2, [sp, #0]
 800104e:	2240      	movs	r2, #64	; 0x40
 8001050:	213c      	movs	r1, #60	; 0x3c
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f957 	bl	8001306 <Display_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	3301      	adds	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b07      	cmp	r3, #7
 8001062:	d9d3      	bls.n	800100c <Display_UpdateScreen+0xe>

	}
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <Display_Fill>:
 * The function takes in two arguments: a pointer to an OLED structure (oled) and the color to fill the display with (color).
 * The memset function is then used to fill the buffer with either 0x00 (black) or 0xFF (white) depending on the color passed in as an argument.
 * The number of bytes to be filled is equal to the size of the buffer, which is defined by sizeof(oled->Display_Buffer).
 * This function is used to clear the screen and set all pixels to the specified color.
 */
void Display_Fill(OLED_t * oled , Display_COLOR_t color) {
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	70fb      	strb	r3, [r7, #3]
	// Set memory, fill a block of memory with value
	memset(oled->Display_Buffer, (color == Display_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(oled->Display_Buffer));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1d18      	adds	r0, r3, #4
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <Display_Fill+0x1a>
 8001084:	2300      	movs	r3, #0
 8001086:	e000      	b.n	800108a <Display_Fill+0x1c>
 8001088:	23ff      	movs	r3, #255	; 0xff
 800108a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800108e:	4619      	mov	r1, r3
 8001090:	f001 f81e 	bl	80020d0 <memset>
  //memset(starting address, value to be filled, number of bytes to be filled)
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <Display_DrawPixel>:
 * If they are not, the function exits. Next, it checks if the display is set to be inverted and, if it is, it inverts the color of the pixel.
 * Finally, it sets the color of the pixel in the Display_Buffer using bit manipulation. If the color is white, it sets the corresponding bit in the buffer to 1.
 * If the color is black, it sets the corresponding bit to 0.
 * This allows the display to render the pixel on the screen.
 */
void Display_DrawPixel(OLED_t * oled ,uint16_t x, uint16_t y, Display_COLOR_t color) {
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	4608      	mov	r0, r1
 80010a6:	4611      	mov	r1, r2
 80010a8:	461a      	mov	r2, r3
 80010aa:	4603      	mov	r3, r0
 80010ac:	817b      	strh	r3, [r7, #10]
 80010ae:	460b      	mov	r3, r1
 80010b0:	813b      	strh	r3, [r7, #8]
 80010b2:	4613      	mov	r3, r2
 80010b4:	71fb      	strb	r3, [r7, #7]

	if (x >= Display_WIDTH || y >= Display_HEIGHT)
 80010b6:	897b      	ldrh	r3, [r7, #10]
 80010b8:	2b7f      	cmp	r3, #127	; 0x7f
 80010ba:	d84f      	bhi.n	800115c <Display_DrawPixel+0xc0>
 80010bc:	893b      	ldrh	r3, [r7, #8]
 80010be:	2b3f      	cmp	r3, #63	; 0x3f
 80010c0:	d84c      	bhi.n	800115c <Display_DrawPixel+0xc0>
		// Error
		return;
	}

	// Check if pixels are inverted
	if (oled->Inverted) {
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <Display_DrawPixel+0x3e>
		color = (Display_COLOR_t)!color;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	71fb      	strb	r3, [r7, #7]
	}

	// Set color
	if (color == Display_COLOR_WHITE) {
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d11d      	bne.n	800111c <Display_DrawPixel+0x80>
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] |= 1 << (y % 8);
 80010e0:	897a      	ldrh	r2, [r7, #10]
 80010e2:	893b      	ldrh	r3, [r7, #8]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	b298      	uxth	r0, r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	01db      	lsls	r3, r3, #7
 80010ec:	4413      	add	r3, r2
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	791b      	ldrb	r3, [r3, #4]
 80010f4:	b25a      	sxtb	r2, r3
 80010f6:	893b      	ldrh	r3, [r7, #8]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	2101      	movs	r1, #1
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	b25b      	sxtb	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b259      	sxtb	r1, r3
 8001108:	897a      	ldrh	r2, [r7, #10]
 800110a:	4603      	mov	r3, r0
 800110c:	01db      	lsls	r3, r3, #7
 800110e:	4413      	add	r3, r2
 8001110:	b2c9      	uxtb	r1, r1
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	460a      	mov	r2, r1
 8001118:	711a      	strb	r2, [r3, #4]
 800111a:	e020      	b.n	800115e <Display_DrawPixel+0xc2>
	} else {
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] &= ~(1 << (y % 8));
 800111c:	897a      	ldrh	r2, [r7, #10]
 800111e:	893b      	ldrh	r3, [r7, #8]
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	b298      	uxth	r0, r3
 8001124:	4603      	mov	r3, r0
 8001126:	01db      	lsls	r3, r3, #7
 8001128:	4413      	add	r3, r2
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	791b      	ldrb	r3, [r3, #4]
 8001130:	b25a      	sxtb	r2, r3
 8001132:	893b      	ldrh	r3, [r7, #8]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	2101      	movs	r1, #1
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	b25b      	sxtb	r3, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	b25b      	sxtb	r3, r3
 8001144:	4013      	ands	r3, r2
 8001146:	b259      	sxtb	r1, r3
 8001148:	897a      	ldrh	r2, [r7, #10]
 800114a:	4603      	mov	r3, r0
 800114c:	01db      	lsls	r3, r3, #7
 800114e:	4413      	add	r3, r2
 8001150:	b2c9      	uxtb	r1, r1
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	460a      	mov	r2, r1
 8001158:	711a      	strb	r2, [r3, #4]
 800115a:	e000      	b.n	800115e <Display_DrawPixel+0xc2>
		return;
 800115c:	bf00      	nop
	}
}
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <Display_GotoXY>:
 * This function sets the current write position on the OLED display to the specified x and y coordinates.
 * The OLED_t struct pointer "oled" is passed in as a parameter, and the struct contains the current x and y position as members "CurrentX" and "CurrentY", respectively.
 * The function updates these members with the new x and y coordinates passed in as parameters.
 * This allows for easy control over the position for subsequent writes or drawing operations.
 */
void Display_GotoXY(OLED_t * oled ,uint16_t x, uint16_t y) {
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	807b      	strh	r3, [r7, #2]
 8001172:	4613      	mov	r3, r2
 8001174:	803b      	strh	r3, [r7, #0]
	// Set write pointers
	oled->CurrentX = x;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	887a      	ldrh	r2, [r7, #2]
 800117a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = y;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	883a      	ldrh	r2, [r7, #0]
 8001182:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <Display_Putc>:
 * It checks if there is enough space on the OLED display to write the character in the current position,
 * and if there is, it uses the font definition to determine which pixels should be turned on or off to write the character.
 * It then increments the current X position on the OLED structure so that the next character can be written in the correct position.
 * The function returns the character that was written.
 */
char Display_Putc(OLED_t * oled ,char ch, FontDef_t *Font, Display_COLOR_t color) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	461a      	mov	r2, r3
 800119c:	460b      	mov	r3, r1
 800119e:	72fb      	strb	r3, [r7, #11]
 80011a0:	4613      	mov	r3, r2
 80011a2:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	// Check available space in LCD
	if (
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4413      	add	r3, r2
	if (
 80011b2:	2b7f      	cmp	r3, #127	; 0x7f
 80011b4:	dc08      	bgt.n	80011c8 <Display_Putc+0x38>
		Display_HEIGHT <= (oled->CurrentY + Font->FontHeight)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80011bc:	461a      	mov	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	4413      	add	r3, r2
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 80011c4:	2b3f      	cmp	r3, #63	; 0x3f
 80011c6:	dd01      	ble.n	80011cc <Display_Putc+0x3c>
	) {
		// Error
		return 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e064      	b.n	8001296 <Display_Putc+0x106>
	}

	// Go through font
	for (i = 0; i < Font->FontHeight; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	e04f      	b.n	8001272 <Display_Putc+0xe2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	3b20      	subs	r3, #32
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	7849      	ldrb	r1, [r1, #1]
 80011de:	fb01 f303 	mul.w	r3, r1, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	440b      	add	r3, r1
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	e034      	b.n	8001260 <Display_Putc+0xd0>
			if ((b << j) & 0x8000) {
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d012      	beq.n	800122c <Display_Putc+0x9c>
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t) color);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b299      	uxth	r1, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	b29b      	uxth	r3, r3
 800121e:	4413      	add	r3, r2
 8001220:	b29a      	uxth	r2, r3
 8001222:	7abb      	ldrb	r3, [r7, #10]
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f7ff ff39 	bl	800109c <Display_DrawPixel>
 800122a:	e016      	b.n	800125a <Display_Putc+0xca>
			} else {
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t)!color);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	b29b      	uxth	r3, r3
 8001236:	4413      	add	r3, r2
 8001238:	b299      	uxth	r1, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	b29b      	uxth	r3, r3
 8001244:	4413      	add	r3, r2
 8001246:	b29a      	uxth	r2, r3
 8001248:	7abb      	ldrb	r3, [r7, #10]
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf0c      	ite	eq
 800124e:	2301      	moveq	r3, #1
 8001250:	2300      	movne	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f7ff ff21 	bl	800109c <Display_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	3301      	adds	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4293      	cmp	r3, r2
 800126a:	d3c4      	bcc.n	80011f6 <Display_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	3301      	adds	r3, #1
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	461a      	mov	r2, r3
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	4293      	cmp	r3, r2
 800127c:	d3a9      	bcc.n	80011d2 <Display_Putc+0x42>
			}
		}
	}

	// Increase pointer
	oled->CurrentX += Font->FontWidth;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

	// Return character written
	return ch;
 8001294:	7afb      	ldrb	r3, [r7, #11]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <Display_Puts>:
 * The function starts by setting a pointer to the first character of the string and then loops through each character of the string. For each character,
 * the function calls the Display_Putc function to write the character to the OLED display and then increments the pointer to the next character in the string.
 * If there is an error while writing a character, the function returns that character.
 * If all the characters in the string are successfully written to the OLED display, the function returns the last character of the string (which should be a null character).
 */
char Display_Puts(OLED_t * oled ,char* str, FontDef_t* Font, Display_COLOR_t color) {
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	70fb      	strb	r3, [r7, #3]
	// Write characters
	while (*str) {
 80012ac:	e012      	b.n	80012d4 <Display_Puts+0x36>
		// Write character by character
		if (Display_Putc(oled ,*str, Font, color) != *str) {
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	7819      	ldrb	r1, [r3, #0]
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff ff6a 	bl	8001190 <Display_Putc>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d002      	beq.n	80012ce <Display_Puts+0x30>
			// Return error
			return *str;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	e008      	b.n	80012e0 <Display_Puts+0x42>
		}

		// Increase string pointer
		str++;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
	while (*str) {
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e8      	bne.n	80012ae <Display_Puts+0x10>
	}

	// Everything OK, zero should be returned
	return *str;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	781b      	ldrb	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <Display_Clear>:
 * Then it calls Display_UpdateScreen() to update the OLED screen with the new display buffer.
 * This effectively clears the entire OLED screen and sets it to a blank black display.
 */

void Display_Clear (OLED_t * oled )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	Display_Fill (oled , 0);
 80012f0:	2100      	movs	r1, #0
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff febb 	bl	800106e <Display_Fill>
	Display_UpdateScreen(oled);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fe80 	bl	8000ffe <Display_UpdateScreen>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <Display_I2C_WriteMulti>:
 * The data is sent one byte at a time, and the function waits for the TXIS flag to be set before sending the next byte. Once all the data has been sent, the function ends.
 */


void Display_I2C_WriteMulti(OLED_t * oled,uint8_t address, uint8_t dataRegister, uint8_t *data , uint16_t numBytes)	//data is a pointer
{
 8001306:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	72fb      	strb	r3, [r7, #11]
 8001316:	4613      	mov	r3, r2
 8001318:	72bb      	strb	r3, [r7, #10]
 800131a:	466b      	mov	r3, sp
 800131c:	4618      	mov	r0, r3
	uint8_t i;
	uint8_t j;
	uint8_t dt[numBytes];		//necessary for multi Write
 800131e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001320:	460b      	mov	r3, r1
 8001322:	3b01      	subs	r3, #1
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	b28b      	uxth	r3, r1
 8001328:	2200      	movs	r2, #0
 800132a:	4698      	mov	r8, r3
 800132c:	4691      	mov	r9, r2
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800133a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800133e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001342:	b28b      	uxth	r3, r1
 8001344:	2200      	movs	r2, #0
 8001346:	461c      	mov	r4, r3
 8001348:	4615      	mov	r5, r2
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	00eb      	lsls	r3, r5, #3
 8001354:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001358:	00e2      	lsls	r2, r4, #3
 800135a:	460b      	mov	r3, r1
 800135c:	3307      	adds	r3, #7
 800135e:	08db      	lsrs	r3, r3, #3
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	ebad 0d03 	sub.w	sp, sp, r3
 8001366:	466b      	mov	r3, sp
 8001368:	3300      	adds	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
	I2C_TypeDef *  i2c = oled->dev;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	613b      	str	r3, [r7, #16]
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8001372:	7afb      	ldrb	r3, [r7, #11]
 8001374:	005a      	lsls	r2, r3, #1
 8001376:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	4313      	orrs	r3, r2
 800137c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8001390:	e007      	b.n	80013a2 <Display_I2C_WriteMulti+0x9c>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <Display_I2C_WriteMulti+0x9c>
 800139e:	4685      	mov	sp, r0
 80013a0:	e039      	b.n	8001416 <Display_I2C_WriteMulti+0x110>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f1      	beq.n	8001392 <Display_I2C_WriteMulti+0x8c>
			return;}}

	dt[0] = dataRegister;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	7aba      	ldrb	r2, [r7, #10]
 80013b2:	701a      	strb	r2, [r3, #0]
	for(i=0; i<numBytes; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	77bb      	strb	r3, [r7, #30]
 80013b8:	e00a      	b.n	80013d0 <Display_I2C_WriteMulti+0xca>
	{
	dt[i+1] = data[i];	//necessary for multi Write
 80013ba:	7fbb      	ldrb	r3, [r7, #30]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	441a      	add	r2, r3
 80013c0:	7fbb      	ldrb	r3, [r7, #30]
 80013c2:	3301      	adds	r3, #1
 80013c4:	7811      	ldrb	r1, [r2, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<numBytes; i++)
 80013ca:	7fbb      	ldrb	r3, [r7, #30]
 80013cc:	3301      	adds	r3, #1
 80013ce:	77bb      	strb	r3, [r7, #30]
 80013d0:	7fbb      	ldrb	r3, [r7, #30]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d8ef      	bhi.n	80013ba <Display_I2C_WriteMulti+0xb4>
	}

	for(j=0; j <= (numBytes-1); j++)
 80013da:	2300      	movs	r3, #0
 80013dc:	77fb      	strb	r3, [r7, #31]
 80013de:	e014      	b.n	800140a <Display_I2C_WriteMulti+0x104>
	{
		i2c->TXDR = dt[j];
 80013e0:	7ffb      	ldrb	r3, [r7, #31]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	5cd3      	ldrb	r3, [r2, r3]
 80013e6:	461a      	mov	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 80013ec:	7ffa      	ldrb	r2, [r7, #31]
 80013ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80013f0:	3b01      	subs	r3, #1
 80013f2:	429a      	cmp	r2, r3
 80013f4:	da06      	bge.n	8001404 <Display_I2C_WriteMulti+0xfe>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}		//ggf TXIS mit TXE ergänzen
 80013f6:	bf00      	nop
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f9      	beq.n	80013f8 <Display_I2C_WriteMulti+0xf2>
	for(j=0; j <= (numBytes-1); j++)
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	3301      	adds	r3, #1
 8001408:	77fb      	strb	r3, [r7, #31]
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	b29b      	uxth	r3, r3
 800140e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001410:	429a      	cmp	r2, r3
 8001412:	d8e5      	bhi.n	80013e0 <Display_I2C_WriteMulti+0xda>
 8001414:	4685      	mov	sp, r0
		}
	}

}
 8001416:	3724      	adds	r7, #36	; 0x24
 8001418:	46bd      	mov	sp, r7
 800141a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800141e:	4770      	bx	lr

08001420 <Display_I2C_Write>:
 * The number of bytes to be written (in this case, 2 bytes, one for the register and one for the data) is also passed as an argument.
 * The function starts the I2C communication and waits for the transmit buffer to be empty before sending the register and data.
 * It then waits for the transmit buffer to be empty again before sending the data. The function will exit and return if a NACK is received during the transmission.
 */
void Display_I2C_Write(OLED_t * oled, uint8_t address, uint8_t dataRegister, uint8_t data , uint8_t numBytes)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4603      	mov	r3, r0
 8001430:	70fb      	strb	r3, [r7, #3]
 8001432:	460b      	mov	r3, r1
 8001434:	70bb      	strb	r3, [r7, #2]
 8001436:	4613      	mov	r3, r2
 8001438:	707b      	strb	r3, [r7, #1]


	uint8_t j;
	uint8_t dt[2];
	I2C_TypeDef *  i2c = oled->dev;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
	dt[0] = dataRegister;
 8001440:	78bb      	ldrb	r3, [r7, #2]
 8001442:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	737b      	strb	r3, [r7, #13]

	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	005a      	lsls	r2, r3, #1
 800144c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001450:	041b      	lsls	r3, r3, #16
 8001452:	4313      	orrs	r3, r2
 8001454:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8001468:	e005      	b.n	8001476 <Display_I2C_Write+0x56>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b00      	cmp	r3, #0
 8001474:	d126      	bne.n	80014c4 <Display_I2C_Write+0xa4>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f3      	beq.n	800146a <Display_I2C_Write+0x4a>
			return;}}

	for(j=0; j <= (numBytes-1); j++)
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]
 8001486:	e017      	b.n	80014b8 <Display_I2C_Write+0x98>
	{
		i2c->TXDR = dt[j];
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	3318      	adds	r3, #24
 800148c:	443b      	add	r3, r7
 800148e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001492:	461a      	mov	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8001498:	7dfa      	ldrb	r2, [r7, #23]
 800149a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800149e:	3b01      	subs	r3, #1
 80014a0:	429a      	cmp	r2, r3
 80014a2:	da06      	bge.n	80014b2 <Display_I2C_Write+0x92>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}
 80014a4:	bf00      	nop
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f9      	beq.n	80014a6 <Display_I2C_Write+0x86>
	for(j=0; j <= (numBytes-1); j++)
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	3301      	adds	r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]
 80014b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d8e2      	bhi.n	8001488 <Display_I2C_Write+0x68>
 80014c2:	e000      	b.n	80014c6 <Display_I2C_Write+0xa6>
			return;}}
 80014c4:	bf00      	nop
		}
	}

}
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <gpio_clock_enable>:
 * After each device reset, all peripheral clocks are disabled (except for the SRAM and FLITF).
Before using a peripheral user has to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.  s.50
 */
void gpio_clock_enable(GPIO_TypeDef * Port)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	if(Port == GPIOA)        //  Bit 17 IOPAEN: I/O port A clock enable
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014de:	d106      	bne.n	80014ee <gpio_clock_enable+0x1e>
	{
		RCC->AHBENR |= (1 << GPIOA_CLOCK_ENABLE_BIT) ; //(1<<17);
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <gpio_clock_enable+0xc0>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	4a2a      	ldr	r2, [pc, #168]	; (8001590 <gpio_clock_enable+0xc0>)
 80014e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ea:	6153      	str	r3, [r2, #20]
	}
	*/
	else{

	}
}
 80014ec:	e04b      	b.n	8001586 <gpio_clock_enable+0xb6>
	else if(Port == GPIOB)  //    Bit 18 IOPBEN: I/O port B  clock enable
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a28      	ldr	r2, [pc, #160]	; (8001594 <gpio_clock_enable+0xc4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d106      	bne.n	8001504 <gpio_clock_enable+0x34>
		RCC->AHBENR |= (1 << GPIOB_CLOCK_ENABLE_BIT) ;
 80014f6:	4b26      	ldr	r3, [pc, #152]	; (8001590 <gpio_clock_enable+0xc0>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a25      	ldr	r2, [pc, #148]	; (8001590 <gpio_clock_enable+0xc0>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	6153      	str	r3, [r2, #20]
}
 8001502:	e040      	b.n	8001586 <gpio_clock_enable+0xb6>
	else if(Port == GPIOC)   //  Bit 19 IOPCEN: I/O port C clock enable
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a24      	ldr	r2, [pc, #144]	; (8001598 <gpio_clock_enable+0xc8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d106      	bne.n	800151a <gpio_clock_enable+0x4a>
		RCC->AHBENR |= (1 << GPIOC_CLOCK_ENABLE_BIT) ;
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <gpio_clock_enable+0xc0>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <gpio_clock_enable+0xc0>)
 8001512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001516:	6153      	str	r3, [r2, #20]
}
 8001518:	e035      	b.n	8001586 <gpio_clock_enable+0xb6>
	else if(Port == GPIOD)    //  Bit 20 IOPDEN: I/O port D clock enable
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a1f      	ldr	r2, [pc, #124]	; (800159c <gpio_clock_enable+0xcc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d106      	bne.n	8001530 <gpio_clock_enable+0x60>
		RCC->AHBENR |= (1 << GPIOD_CLOCK_ENABLE_BIT) ;
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <gpio_clock_enable+0xc0>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <gpio_clock_enable+0xc0>)
 8001528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800152c:	6153      	str	r3, [r2, #20]
}
 800152e:	e02a      	b.n	8001586 <gpio_clock_enable+0xb6>
	else if(Port == GPIOE)    //  Bit 21 IOPEEN: I/O port E clock enable
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <gpio_clock_enable+0xd0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d106      	bne.n	8001546 <gpio_clock_enable+0x76>
		RCC->AHBENR |= (1 << GPIOE_CLOCK_ENABLE_BIT) ;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <gpio_clock_enable+0xc0>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <gpio_clock_enable+0xc0>)
 800153e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001542:	6153      	str	r3, [r2, #20]
}
 8001544:	e01f      	b.n	8001586 <gpio_clock_enable+0xb6>
	else if(Port == GPIOF)   //  Bit 22 IOPFEN: I/O port F clock enable
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <gpio_clock_enable+0xd4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d106      	bne.n	800155c <gpio_clock_enable+0x8c>
		RCC->AHBENR |= (1 << GPIOF_CLOCK_ENABLE_BIT) ;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <gpio_clock_enable+0xc0>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <gpio_clock_enable+0xc0>)
 8001554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001558:	6153      	str	r3, [r2, #20]
}
 800155a:	e014      	b.n	8001586 <gpio_clock_enable+0xb6>
	else if(Port == GPIOG)    //  Bit 23 IOPGEN: I/O port G clock enable
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <gpio_clock_enable+0xd8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d106      	bne.n	8001572 <gpio_clock_enable+0xa2>
		RCC->AHBENR |= (1 << GPIOG_CLOCK_ENABLE_BIT) ;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <gpio_clock_enable+0xc0>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <gpio_clock_enable+0xc0>)
 800156a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800156e:	6153      	str	r3, [r2, #20]
}
 8001570:	e009      	b.n	8001586 <gpio_clock_enable+0xb6>
	else if(Port == GPIOH)    //  Bit 16 IOPHEN: I/O port H clock enable
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <gpio_clock_enable+0xdc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d105      	bne.n	8001586 <gpio_clock_enable+0xb6>
		RCC->AHBENR |= (1 << GPIOH_CLOCK_ENABLE_BIT) ;
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <gpio_clock_enable+0xc0>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <gpio_clock_enable+0xc0>)
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	6153      	str	r3, [r2, #20]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000
 8001594:	48000400 	.word	0x48000400
 8001598:	48000800 	.word	0x48000800
 800159c:	48000c00 	.word	0x48000c00
 80015a0:	48001000 	.word	0x48001000
 80015a4:	48001400 	.word	0x48001400
 80015a8:	48001800 	.word	0x48001800
 80015ac:	48001c00 	.word	0x48001c00

080015b0 <reset_io>:
 * the OSPEEDR register controls the output speed,
 * and the PUPDR register controls the pull-up/pull-down settings.
 * By setting all of these registers to zero, the function effectively disables all the pins on the specified port
 * and sets them to their default state, which is an input mode with no pull-up/pull-down resistors and no output buffer.
 */
void reset_io(GPIO_TypeDef * Port ) {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	Port->MODER   = 0x00 ;             // set pin Mode
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
	Port->OTYPER  = 0x00 ;             //set output type OD/PP
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR = 0x00 ;             //set output speed
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  = 0x00 ;             //set pin Pull
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <gpio_config_pin>:
 * And the otype variable sets the pin's output type (open-drain or push-pull).
 * The function sets these parameters by setting the appropriate bits in the MODER, OTYPER, OSPEEDR, and PUPDR registers of the specified port.
 */
void gpio_config_pin(GPIO_TypeDef * Port , int Pin , GPIO_Mode_t Mode ,
					   GPIO_Speed_t speed ,GPIO_Pull_t pull, GPIO_out_type_t otype)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	4611      	mov	r1, r2
 80015e6:	461a      	mov	r2, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4613      	mov	r3, r2
 80015ee:	71bb      	strb	r3, [r7, #6]
	Port->MODER   |= (Mode  << 2 * Pin) ; // set  pin Mode
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	79f9      	ldrb	r1, [r7, #7]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	0052      	lsls	r2, r2, #1
 80015fa:	fa01 f202 	lsl.w	r2, r1, r2
 80015fe:	431a      	orrs	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	601a      	str	r2, [r3, #0]
	Port->OTYPER  |= (otype << Pin)     ; //set output type OD/PP
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	7f39      	ldrb	r1, [r7, #28]
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	431a      	orrs	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR |= (speed << 2 * Pin) ; //set output speed
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	79b9      	ldrb	r1, [r7, #6]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	0052      	lsls	r2, r2, #1
 8001620:	fa01 f202 	lsl.w	r2, r1, r2
 8001624:	431a      	orrs	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  |= (pull  << 2 * Pin) ; //set pin Pull
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	7e39      	ldrb	r1, [r7, #24]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	0052      	lsls	r2, r2, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	431a      	orrs	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	60da      	str	r2, [r3, #12]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <gpio_set_pinState>:
 * if it is high it uses bitwise OR operator to set the specified pin to high,
 * if it is low it uses bitwise AND operator with NOT operator to set the specified pin to low.
 */

void gpio_set_pinState(GPIO_TypeDef * Port , int Pin , Pin_State State)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	4613      	mov	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
    // assert that the pin number is less than 16
    // this is to ensure that the pin number is within the valid range
    // assert(pin < 16);

    if(State == HIGH)
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d109      	bne.n	8001670 <gpio_set_pinState+0x28>
    {
        // Use bitwise OR operator to set the specified pin to high
        Port->ODR |= (1 << Pin);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	2101      	movs	r1, #1
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	fa01 f202 	lsl.w	r2, r1, r2
 8001668:	431a      	orrs	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	615a      	str	r2, [r3, #20]
    }
    else {
        // Use bitwise AND operator with NOT operator to set the specified pin to low
        Port->ODR &= ~(1 << Pin);
    }
}
 800166e:	e009      	b.n	8001684 <gpio_set_pinState+0x3c>
        Port->ODR &= ~(1 << Pin);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	2101      	movs	r1, #1
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	43d2      	mvns	r2, r2
 800167e:	401a      	ands	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	615a      	str	r2, [r3, #20]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
	...

08001690 <I2C_Init>:
 * Depending on which peripheral is being initialized, the function sets up the corresponding GPIO pins as alternate function mode and enables the peripheral clock.
 * After that, the function sets up the timing configuration for the I2C peripheral by setting the PRESC, SCLDEL, and SDADEL bits in the TIMINGR register.
 * Finally, the function enables the I2C peripheral by setting the PE bit in the CR1 register.
 */
void I2C_Init(I2C_TypeDef * i2c)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]


 	 if( i2c == I2C1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a6e      	ldr	r2, [pc, #440]	; (8001854 <I2C_Init+0x1c4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d118      	bne.n	80016d2 <I2C_Init+0x42>
 	 {
 		// PB6  I2C1_SCL, PB7   I2C1_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80016a0:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <I2C_Init+0x1c8>)
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	4a6c      	ldr	r2, [pc, #432]	; (8001858 <I2C_Init+0x1c8>)
 80016a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016aa:	6153      	str	r3, [r2, #20]
 		GPIOB->MODER |= (0b10 << GPIO_MODER_MODER6_Pos) |
 80016ac:	4b6b      	ldr	r3, [pc, #428]	; (800185c <I2C_Init+0x1cc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6a      	ldr	r2, [pc, #424]	; (800185c <I2C_Init+0x1cc>)
 80016b2:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80016b6:	6013      	str	r3, [r2, #0]
		   (0b10 << GPIO_MODER_MODER7_Pos); // PB6, PB7: Alternate function
		 GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFRL6_Pos) |
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <I2C_Init+0x1cc>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a67      	ldr	r2, [pc, #412]	; (800185c <I2C_Init+0x1cc>)
 80016be:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 80016c2:	6213      	str	r3, [r2, #32]
		   (4 << GPIO_AFRL_AFRL7_Pos);         // 0100: AF4

		 RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //i2c clock enable
 80016c4:	4b64      	ldr	r3, [pc, #400]	; (8001858 <I2C_Init+0x1c8>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	4a63      	ldr	r2, [pc, #396]	; (8001858 <I2C_Init+0x1c8>)
 80016ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ce:	61d3      	str	r3, [r2, #28]
 80016d0:	e0ac      	b.n	800182c <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C2 )
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a62      	ldr	r2, [pc, #392]	; (8001860 <I2C_Init+0x1d0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d14c      	bne.n	8001774 <I2C_Init+0xe4>
 	 {
 		//PA9 I2C2_SCL , PA10 I2C2_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80016da:	4b5f      	ldr	r3, [pc, #380]	; (8001858 <I2C_Init+0x1c8>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a5e      	ldr	r2, [pc, #376]	; (8001858 <I2C_Init+0x1c8>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6153      	str	r3, [r2, #20]
 		GPIOA->MODER |= (2 << 18) ;// PA9 10: Alternate function mode
 80016e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016f4:	6013      	str	r3, [r2, #0]
 		GPIOA->MODER |= (2 << 20) ;//PA10 10: Alternate function mode
 80016f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001704:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER |= (1 << 9 ) ;//PA9  GPIO port output type register 1: Output open-drain
 8001706:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001714:	6053      	str	r3, [r2, #4]
 		GPIOA->OTYPER |= (1 << 10) ;//PA10 Oepn Drain
 8001716:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001724:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 18) | (3 << 20) ; //PA9,PA10  GPIO port output speed register 11: High speed
 8001726:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001730:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8001734:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR  |= (1<<18) | (1<<20) ;//PA9 ,PA10 GPIO port pull-up/pull-down register 01: Pull-up
 8001736:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001740:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8001744:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1] |= ( 4 << 4 );   //select GPIO alternate function high register  PA9  0100: AF4
 8001746:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001754:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOA->AFR[1] |= (4 << 8);   //select GPIO alternate function high register  PA10   0100: AF4
 8001756:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001760:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001764:	6253      	str	r3, [r2, #36]	; 0x24

 		RCC->APB1ENR |=RCC_APB1ENR_I2C2EN ; //i2c clock enable
 8001766:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <I2C_Init+0x1c8>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <I2C_Init+0x1c8>)
 800176c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	e05b      	b.n	800182c <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C3 )
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <I2C_Init+0x1d4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d157      	bne.n	800182c <I2C_Init+0x19c>
 	 {
 		//PA8 I2C3_SCL , PB5 I2C3_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 800177c:	4b36      	ldr	r3, [pc, #216]	; (8001858 <I2C_Init+0x1c8>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	4a35      	ldr	r2, [pc, #212]	; (8001858 <I2C_Init+0x1c8>)
 8001782:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001786:	6153      	str	r3, [r2, #20]
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <I2C_Init+0x1c8>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	4a32      	ldr	r2, [pc, #200]	; (8001858 <I2C_Init+0x1c8>)
 800178e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001792:	6153      	str	r3, [r2, #20]

 		GPIOA->MODER   |= (2 << 16) ;// PA8 ALF
 8001794:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800179e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a2:	6013      	str	r3, [r2, #0]
 		GPIOB->MODER   |= (2 << 10) ;//PB5 ALF
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <I2C_Init+0x1cc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2c      	ldr	r2, [pc, #176]	; (800185c <I2C_Init+0x1cc>)
 80017aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017ae:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER  |= (1 << 8 ) ;//PA8 Open Drain
 80017b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6053      	str	r3, [r2, #4]
 		GPIOB->OTYPER  |= (1 << 5 ) ;//PB5 Oepn Drain
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <I2C_Init+0x1cc>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a25      	ldr	r2, [pc, #148]	; (800185c <I2C_Init+0x1cc>)
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 16) ;//PA8 High Speed
 80017cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017d6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80017da:	6093      	str	r3, [r2, #8]
 		GPIOB->OSPEEDR |= (3 << 10) ; //PB5 High Speed
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <I2C_Init+0x1cc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a1e      	ldr	r2, [pc, #120]	; (800185c <I2C_Init+0x1cc>)
 80017e2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80017e6:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR   |= (1 << 16) ;//PA8 PULL up
 80017e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f6:	60d3      	str	r3, [r2, #12]
 		GPIOB->PUPDR   |= (1 << 10) ;//PB5 PULL up
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <I2C_Init+0x1cc>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <I2C_Init+0x1cc>)
 80017fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001802:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1]  |= ( 3 << 0 );//select Alf PA8    0011: AF3
 8001804:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800180e:	f043 0303 	orr.w	r3, r3, #3
 8001812:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOB->AFR[0]  |= (8 << 20) ;//select Alf PB5     1000: AF8
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <I2C_Init+0x1cc>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4a10      	ldr	r2, [pc, #64]	; (800185c <I2C_Init+0x1cc>)
 800181a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800181e:	6213      	str	r3, [r2, #32]

 		RCC->APB1ENR |=RCC_APB1ENR_I2C3EN ; //i2c clock enable
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <I2C_Init+0x1c8>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <I2C_Init+0x1c8>)
 8001826:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800182a:	61d3      	str	r3, [r2, #28]
	 * Enabling and disabling the peripheral
	 * The I2C peripheral clock must be configured and enabled in the clock controller.
	 * Then the I2C can be enabled by setting the PE(PinEnable) bit in the I2C_CR1 register.
	 * When the I2C is disabled (PE=0), the I2C performs a software reset.
	 */
	 i2c->CR1 &= ~I2C_CR1_PE;                // disable the i2c peripheral clock  (clear PE bit in I2C_CR1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 0201 	bic.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	601a      	str	r2, [r3, #0]
	/*
	 * I2C timings
	 * The timings must be configured in order to guarantee a correct data hold and setup time,
	 * used in master and slave modes. This is done by programming the PRESC,SCLDEL and SDADEL bits in the I2C_TIMINGR register.
	 */
	 i2c->TIMINGR = (1 << I2C_TIMINGR_PRESC_Pos) | // Standard mode 100 kHz @ 8 MHz (page 849/1141)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <I2C_Init+0x1d8>)
 800183c:	611a      	str	r2, [r3, #16]
	             (0x13 << I2C_TIMINGR_SCLL_Pos)  |
	             (0xF << I2C_TIMINGR_SCLH_Pos)   |
	             (0x2 << I2C_TIMINGR_SDADEL_Pos) |
	             (0x4 << I2C_TIMINGR_SCLDEL_Pos);

	 i2c->CR1 |= I2C_CR1_PE;// enable the i2c peripheral clock (set PE bit inI2C_CR1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	601a      	str	r2, [r3, #0]

}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40005400 	.word	0x40005400
 8001858:	40021000 	.word	0x40021000
 800185c:	48000400 	.word	0x48000400
 8001860:	40005800 	.word	0x40005800
 8001864:	40007800 	.word	0x40007800
 8001868:	10420f13 	.word	0x10420f13

0800186c <I2C_Write>:

After that, it writes the data buffer to the I2C device using a for loop, the loop iterates len-1 times and writes a byte to the TXDR register each time.
 */

void I2C_Write(I2C_TypeDef * i2c , uint8_t address , uint8_t * data , uint8_t len)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	461a      	mov	r2, r3
 8001878:	460b      	mov	r3, r1
 800187a:	72fb      	strb	r3, [r7, #11]
 800187c:	4613      	mov	r3, r2
 800187e:	72bb      	strb	r3, [r7, #10]
    //configuring the CR2 register to send the device address, the length of the data buffer, and the write bit.
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (len << I2C_CR2_NBYTES_Pos)
 8001880:	7afb      	ldrb	r3, [r7, #11]
 8001882:	005a      	lsls	r2, r3, #1
 8001884:	7abb      	ldrb	r3, [r7, #10]
 8001886:	041b      	lsls	r3, r3, #16
 8001888:	4313      	orrs	r3, r2
			                                        | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);
 800188a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (len << I2C_CR2_NBYTES_Pos)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	605a      	str	r2, [r3, #4]
    //sending start condition
		i2c->CR2 |= I2C_CR2_START;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	605a      	str	r2, [r3, #4]
    //waiting until the TXDR register is empty
		while ((i2c->ISR & I2C_ISR_TXIS)==0) {
 800189e:	e005      	b.n	80018ac <I2C_Write+0x40>
			if ((i2c->ISR & I2C_ISR_NACKF)){
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d123      	bne.n	80018f4 <I2C_Write+0x88>
		while ((i2c->ISR & I2C_ISR_TXIS)==0) {
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f3      	beq.n	80018a0 <I2C_Write+0x34>
				return;}}
    //writing data buffer to the I2C device using a for loop
		for(uint8_t j=0; j <= (len-1); j++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	75fb      	strb	r3, [r7, #23]
 80018bc:	e015      	b.n	80018ea <I2C_Write+0x7e>
		{
			i2c->TXDR = data[j];
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
			if(j < (len-1))
 80018cc:	7dfa      	ldrb	r2, [r7, #23]
 80018ce:	7abb      	ldrb	r3, [r7, #10]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	429a      	cmp	r2, r3
 80018d4:	da06      	bge.n	80018e4 <I2C_Write+0x78>
			{
                //waiting until the TXIS flag is set
				while((i2c->ISR & I2C_ISR_TXIS)==0){}
 80018d6:	bf00      	nop
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f9      	beq.n	80018d8 <I2C_Write+0x6c>
		for(uint8_t j=0; j <= (len-1); j++)
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	3301      	adds	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
 80018ea:	7aba      	ldrb	r2, [r7, #10]
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d8e5      	bhi.n	80018be <I2C_Write+0x52>
 80018f2:	e000      	b.n	80018f6 <I2C_Write+0x8a>
				return;}}
 80018f4:	bf00      	nop
			}
		}
}
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <I2C_Read>:
This stops the current I2C communication and releases the bus for other devices to use it.
 */


void I2C_Read(I2C_TypeDef * i2c ,uint8_t address , uint8_t * buffer , int len)
{
 80018fe:	b480      	push	{r7}
 8001900:	b087      	sub	sp, #28
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	460b      	mov	r3, r1
 800190c:	72fb      	strb	r3, [r7, #11]
    //setting the slave address and the number of bytes to be transmitted
    i2c->CR2  = ((address << 1) << I2C_CR2_SADD_Pos) ;
 800190e:	7afb      	ldrb	r3, [r7, #11]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	605a      	str	r2, [r3, #4]
	i2c->CR2 |=   (len << I2C_CR2_NBYTES_Pos);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	0412      	lsls	r2, r2, #16
 8001920:	431a      	orrs	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	605a      	str	r2, [r3, #4]
    //setting the read bit
	i2c->CR2 |= (1<<I2C_CR2_RD_WRN_Pos);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	605a      	str	r2, [r3, #4]
    //generating start condition
	i2c->CR2 |= I2C_CR2_START;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	605a      	str	r2, [r3, #4]

    //reading data from the i2c device using a for loop
	 for( int i = 0 ;i<len ;i++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e01d      	b.n	8001980 <I2C_Read+0x82>
	 {
        //waiting for the RXNE flag to be set
		 while((i2c->ISR & I2C_ISR_RXNE) == 0) ;
 8001944:	bf00      	nop
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f9      	beq.n	8001946 <I2C_Read+0x48>
        //reading the data from the RXDR register
		 *buffer = i2c->RXDR ;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	b2da      	uxtb	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	701a      	strb	r2, [r3, #0]
        //incrementing the buffer pointer
		 buffer++ ;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3301      	adds	r3, #1
 8001960:	607b      	str	r3, [r7, #4]

		 if(i == len - 1)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	3b01      	subs	r3, #1
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	d106      	bne.n	800197a <I2C_Read+0x7c>
		 {
            //waiting for the TC flag to be set
			 while((i2c->ISR & I2C_ISR_TC) == 0) ;
 800196c:	bf00      	nop
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f9      	beq.n	800196e <I2C_Read+0x70>
	 for( int i = 0 ;i<len ;i++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbdd      	blt.n	8001944 <I2C_Read+0x46>
		 }
		 else{
			 //nope
		 }
	 }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <keypad_init>:
 * The function initializes the keypad by setting the keypad port and start pin, enabling the clock for the specified GPIO port,
 * and configuring the keypad's key direction (input or output) using the keypad_config_key_direction() function.

 */
void keypad_init(GPIO_TypeDef * port , int s_pin)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
	keypad_port = port   ;
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <keypad_init+0x2c>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6013      	str	r3, [r2, #0]
	start_pin   = s_pin  ;
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <keypad_init+0x30>)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6013      	str	r3, [r2, #0]
	gpio_clock_enable(port) ;
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fd90 	bl	80014d0 <gpio_clock_enable>
	keypad_config_key_direction(port , s_pin) ;////set  the first 4 pins as output and the second 4 pins as input
 80019b0:	6839      	ldr	r1, [r7, #0]
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f808 	bl	80019c8 <keypad_config_key_direction>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000d38 	.word	0x20000d38
 80019c4:	20000d3c 	.word	0x20000d3c

080019c8 <keypad_config_key_direction>:
 */



static void keypad_config_key_direction( GPIO_TypeDef * port , int s_pin)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fdec 	bl	80015b0 <reset_io>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r1  1
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	1c4b      	adds	r3, r1, #1
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	2300      	movs	r3, #0
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	2300      	movs	r3, #0
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2300      	movs	r3, #0
 80019e8:	2201      	movs	r2, #1
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fdf5 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r2  0
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	1c4b      	adds	r3, r1, #1
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	2300      	movs	r3, #0
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2300      	movs	r3, #0
 8001a00:	2201      	movs	r2, #1
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fde9 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r3  0
 8001a08:	6839      	ldr	r1, [r7, #0]
 8001a0a:	1c4b      	adds	r3, r1, #1
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	2300      	movs	r3, #0
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2300      	movs	r3, #0
 8001a18:	2201      	movs	r2, #1
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fddd 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r4  0
 8001a20:	6839      	ldr	r1, [r7, #0]
 8001a22:	1c4b      	adds	r3, r1, #1
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2201      	movs	r2, #1
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fdd1 	bl	80015da <gpio_config_pin>
	//configure the pins as Intput with pull-up
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C1  1
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	1c4b      	adds	r3, r1, #1
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	2301      	movs	r3, #1
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2300      	movs	r3, #0
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fdc5 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C2  0
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	1c4b      	adds	r3, r1, #1
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2200      	movs	r2, #0
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fdb9 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C3  1
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	1c4b      	adds	r3, r1, #1
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	2301      	movs	r3, #1
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fdad 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C4  1
 8001a80:	6839      	ldr	r1, [r7, #0]
 8001a82:	1c4b      	adds	r3, r1, #1
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	2300      	movs	r3, #0
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2200      	movs	r2, #0
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fda1 	bl	80015da <gpio_config_pin>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <keypad_inverse_pin_direction>:
 * The reset_io() function is used to reset the pin direction and configuration of the specified port.
 * The s_pin argument is used to specify the starting pin number for the keypad pins on the specified port.
 * This is likely to be used in a keypad driver to configure the keypad pins and read keypad input.
 */
static void keypad_inverse_pin_direction( GPIO_TypeDef * port , int s_pin)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fd80 	bl	80015b0 <reset_io>
	//configure the pins as Intput with pull-down
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R1     0
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	1c4b      	adds	r3, r1, #1
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	2302      	movs	r3, #2
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fd89 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R2     1
 8001ac8:	6839      	ldr	r1, [r7, #0]
 8001aca:	1c4b      	adds	r3, r1, #1
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fd7d 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R3     1
 8001ae0:	6839      	ldr	r1, [r7, #0]
 8001ae2:	1c4b      	adds	r3, r1, #1
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	2302      	movs	r3, #2
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2300      	movs	r3, #0
 8001af0:	2200      	movs	r2, #0
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fd71 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN  , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R4     1
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	1c4b      	adds	r3, r1, #1
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	2302      	movs	r3, #2
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2300      	movs	r3, #0
 8001b08:	2200      	movs	r2, #0
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fd65 	bl	80015da <gpio_config_pin>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C1     0
 8001b10:	6839      	ldr	r1, [r7, #0]
 8001b12:	1c4b      	adds	r3, r1, #1
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	2300      	movs	r3, #0
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2201      	movs	r2, #1
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fd59 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C2     1
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	1c4b      	adds	r3, r1, #1
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	2300      	movs	r3, #0
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	2201      	movs	r2, #1
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fd4d 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C3     0
 8001b40:	6839      	ldr	r1, [r7, #0]
 8001b42:	1c4b      	adds	r3, r1, #1
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	2201      	movs	r2, #1
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fd41 	bl	80015da <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C4     0
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	1c4b      	adds	r3, r1, #1
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	2300      	movs	r3, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2300      	movs	r3, #0
 8001b68:	2201      	movs	r2, #1
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fd35 	bl	80015da <gpio_config_pin>

}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <keypad_get_pressedkey>:
 * The function then returns the value of the pressed key, or 0 if no key was pressed.
 * Overall, this function uses a combination of bit shifting, bit masking and loops to read the state of the keypad and determine which key is pressed.
 * The function is not very readable and could be improved by adding more comments and breaking it down into smaller functions for better readability and maintainability.
 */
	char keypad_get_pressedkey()
					{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
					    uint16_t porte = 0;   // Set a variable to store the state of the GPIOC pins
 8001b7e:	2300      	movs	r3, #0
 8001b80:	817b      	strh	r3, [r7, #10]
					    porte = GPIOC->IDR ; /* IDR is a register of the GPIOC that contains the input states of the pins.
 8001b82:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <keypad_get_pressedkey+0x150>)
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	817b      	strh	r3, [r7, #10]
					                            * We can read the whole pin status of the GPIOC port with the IDR register.
					                            */
					    uint8_t  eidr  = 0;  // Set a variable to store the state of the 8 keypad pins
 8001b88:	2300      	movs	r3, #0
 8001b8a:	727b      	strb	r3, [r7, #9]
					    uint8_t  ch    = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	723b      	strb	r3, [r7, #8]
					    char ret = 0 ;
 8001b90:	2300      	movs	r3, #0
 8001b92:	75fb      	strb	r3, [r7, #23]

					    // Check the current state of the keypad
					    switch(state)
 8001b94:	4b4d      	ldr	r3, [pc, #308]	; (8001ccc <keypad_get_pressedkey+0x154>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	f000 8087 	beq.w	8001cac <keypad_get_pressedkey+0x134>
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	f300 8088 	bgt.w	8001cb4 <keypad_get_pressedkey+0x13c>
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <keypad_get_pressedkey+0x36>
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d072      	beq.n	8001c92 <keypad_get_pressedkey+0x11a>

				state = State_free ;
				break ;
			}
		default :
			break ;
 8001bac:	e082      	b.n	8001cb4 <keypad_get_pressedkey+0x13c>
					                eidr = (porte >> start_pin) ; // Get the state of the keypad pins
 8001bae:	897a      	ldrh	r2, [r7, #10]
 8001bb0:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <keypad_get_pressedkey+0x158>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa42 f303 	asr.w	r3, r2, r3
 8001bb8:	727b      	strb	r3, [r7, #9]
					                if(eidr != DEFAULT_KEYPAD_PORT_INP) // If the value is different than the default input state
 8001bba:	7a7b      	ldrb	r3, [r7, #9]
 8001bbc:	2bf0      	cmp	r3, #240	; 0xf0
 8001bbe:	d07b      	beq.n	8001cb8 <keypad_get_pressedkey+0x140>
					                    ch = ~eidr; // Set the inverse of eidr in ch
 8001bc0:	7a7b      	ldrb	r3, [r7, #9]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	723b      	strb	r3, [r7, #8]
					                    ch = ch & DEFAULT_KEYPAD_PORT_INP; // Get the row of the pressed key
 8001bc6:	7a3b      	ldrb	r3, [r7, #8]
 8001bc8:	f023 030f 	bic.w	r3, r3, #15
 8001bcc:	723b      	strb	r3, [r7, #8]
					                    keypad_inverse_pin_direction(keypad_port ,start_pin ) ;
 8001bce:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <keypad_get_pressedkey+0x15c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a3f      	ldr	r2, [pc, #252]	; (8001cd0 <keypad_get_pressedkey+0x158>)
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff61 	bl	8001aa0 <keypad_inverse_pin_direction>
					uint16_t out = (ch << start_pin) ;  //
 8001bde:	7a3a      	ldrb	r2, [r7, #8]
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <keypad_get_pressedkey+0x158>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	80fb      	strh	r3, [r7, #6]
					keypad_port->ODR = out ;
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <keypad_get_pressedkey+0x15c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	88fa      	ldrh	r2, [r7, #6]
 8001bf0:	615a      	str	r2, [r3, #20]
					delay_ms(1) ;
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff f84e 	bl	8000c94 <delay_ms>
					porte = keypad_port->IDR ;//get the state of input port
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <keypad_get_pressedkey+0x15c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	817b      	strh	r3, [r7, #10]
					eidr = (porte >> start_pin) ;//& 0xff ; //get the state of keypad pins
 8001c00:	897a      	ldrh	r2, [r7, #10]
 8001c02:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <keypad_get_pressedkey+0x158>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa42 f303 	asr.w	r3, r2, r3
 8001c0a:	727b      	strb	r3, [r7, #9]
					int col = 0 ;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
					for(col = 0 ; col <4 ; col++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	e00d      	b.n	8001c32 <keypad_get_pressedkey+0xba>
						if(   (((eidr & 0xf0) >> 4) &  (1<<col)) != 0 )
 8001c16:	7a7b      	ldrb	r3, [r7, #9]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	fa42 f303 	asr.w	r3, r2, r3
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d106      	bne.n	8001c3a <keypad_get_pressedkey+0xc2>
					for(col = 0 ; col <4 ; col++)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	ddee      	ble.n	8001c16 <keypad_get_pressedkey+0x9e>
 8001c38:	e000      	b.n	8001c3c <keypad_get_pressedkey+0xc4>
							break ;
 8001c3a:	bf00      	nop
					int row = 0 ;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
					for(row = 0 ; row <4 ; row++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e00c      	b.n	8001c60 <keypad_get_pressedkey+0xe8>
						if( ((eidr & 0x0f) & (1<<row)) != 0)
 8001c46:	7a7b      	ldrb	r3, [r7, #9]
 8001c48:	f003 020f 	and.w	r2, r3, #15
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	fa42 f303 	asr.w	r3, r2, r3
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <keypad_get_pressedkey+0xf0>
					for(row = 0 ; row <4 ; row++)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	ddef      	ble.n	8001c46 <keypad_get_pressedkey+0xce>
 8001c66:	e000      	b.n	8001c6a <keypad_get_pressedkey+0xf2>
							break ;
 8001c68:	bf00      	nop
					ret = keys[row][col] ;
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <keypad_get_pressedkey+0x160>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	441a      	add	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	75fb      	strb	r3, [r7, #23]
					keypad_config_key_direction(keypad_port ,start_pin ) ;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <keypad_get_pressedkey+0x15c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <keypad_get_pressedkey+0x158>)
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fe9f 	bl	80019c8 <keypad_config_key_direction>
					state = State_key_pressed ;
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <keypad_get_pressedkey+0x154>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
				break ;
 8001c90:	e012      	b.n	8001cb8 <keypad_get_pressedkey+0x140>
				eidr = (porte >> start_pin) & 0xff ;
 8001c92:	897a      	ldrh	r2, [r7, #10]
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <keypad_get_pressedkey+0x158>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa42 f303 	asr.w	r3, r2, r3
 8001c9c:	727b      	strb	r3, [r7, #9]
				if(eidr == DEFAULT_KEYPAD_PORT_INP)
 8001c9e:	7a7b      	ldrb	r3, [r7, #9]
 8001ca0:	2bf0      	cmp	r3, #240	; 0xf0
 8001ca2:	d10b      	bne.n	8001cbc <keypad_get_pressedkey+0x144>
					state = State_key_released ;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <keypad_get_pressedkey+0x154>)
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	701a      	strb	r2, [r3, #0]
				break ;
 8001caa:	e007      	b.n	8001cbc <keypad_get_pressedkey+0x144>
				state = State_free ;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <keypad_get_pressedkey+0x154>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
				break ;
 8001cb2:	e004      	b.n	8001cbe <keypad_get_pressedkey+0x146>
			break ;
 8001cb4:	bf00      	nop
 8001cb6:	e002      	b.n	8001cbe <keypad_get_pressedkey+0x146>
				break ;
 8001cb8:	bf00      	nop
 8001cba:	e000      	b.n	8001cbe <keypad_get_pressedkey+0x146>
				break ;
 8001cbc:	bf00      	nop

	}


	return ret ;
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	48000800 	.word	0x48000800
 8001ccc:	20000d40 	.word	0x20000d40
 8001cd0:	20000d3c 	.word	0x20000d3c
 8001cd4:	20000d38 	.word	0x20000d38
 8001cd8:	20000064 	.word	0x20000064

08001cdc <rtc_write_reg>:
 * - The register to write the data to (a uint8_t)
 * - The data to be written (a uint8_t)
 * - the lenght of the data to be written (an int)
 */
static void rtc_write_reg(uint8_t address ,uint8_t reg , uint8_t  data , int len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	71bb      	strb	r3, [r7, #6]
 8001cec:	4613      	mov	r3, r2
 8001cee:	717b      	strb	r3, [r7, #5]
    // Declare a temporary array of 2 elements
    uint8_t tmp[2] ;

    // Assign the value of the register to the first element of the temporary array
    tmp[0]  = reg ;
 8001cf0:	79bb      	ldrb	r3, [r7, #6]
 8001cf2:	733b      	strb	r3, [r7, #12]
    // Assign the value of the data to the second element of the temporary array
    tmp[1]  = data ;
 8001cf4:	797b      	ldrb	r3, [r7, #5]
 8001cf6:	737b      	strb	r3, [r7, #13]

    // Call the I2C_Write function to send the data in the temporary array to the RTC device at the specified address on the I2C bus.
    I2C_Write(rtc_i2c , address , tmp ,2 ) ;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <rtc_write_reg+0x34>)
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	f107 020c 	add.w	r2, r7, #12
 8001d00:	79f9      	ldrb	r1, [r7, #7]
 8001d02:	2302      	movs	r3, #2
 8001d04:	f7ff fdb2 	bl	800186c <I2C_Write>
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000d44 	.word	0x20000d44

08001d14 <rtc_init>:
 * This allows the other functions of the RTC driver to use the same I2C peripheral without having to pass it as a parameter every time.
 * It assigns the passed I2C peripheral to a global variable so that the same peripheral can be used by other functions
 *  without having to pass it as a parameter every time.
 */
void rtc_init(I2C_TypeDef * dev)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    // Assign the passed I2C peripheral to a global variable
    rtc_i2c = dev ;
 8001d1c:	4a03      	ldr	r2, [pc, #12]	; (8001d2c <rtc_init+0x18>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000d44 	.word	0x20000d44

08001d30 <rtc_get_reg>:
 * This function retrieves the value of a specified register from the RTC (Real-time clock) device.
 * The function takes in one parameter:
 * - The address of the register (uint8_t)
 */
uint8_t rtc_get_reg(uint8_t reg)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
    // Declare a variable to hold the value of the register
    uint8_t val ;

    // Send the register address to the RTC device
    I2C_Write(rtc_i2c , RTC_I2C_ADDR , &reg  , 1) ;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <rtc_get_reg+0x38>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	1dfa      	adds	r2, r7, #7
 8001d40:	2301      	movs	r3, #1
 8001d42:	2168      	movs	r1, #104	; 0x68
 8001d44:	f7ff fd92 	bl	800186c <I2C_Write>

    // Wait for 2ms
    delay_ms(2);
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7fe ffa3 	bl	8000c94 <delay_ms>

    // Read the value of the register from the RTC device
    I2C_Read(rtc_i2c  , RTC_I2C_ADDR , &val , 1) ;
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <rtc_get_reg+0x38>)
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	f107 020f 	add.w	r2, r7, #15
 8001d56:	2301      	movs	r3, #1
 8001d58:	2168      	movs	r1, #104	; 0x68
 8001d5a:	f7ff fdd0 	bl	80018fe <I2C_Read>

    // Return the value of the register
    return val ;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000d44 	.word	0x20000d44

08001d6c <rtc_get_time>:
 * If it is in 12 hour mode, it also checks the AM/PM bit using the RTC_AM_PM_BIT_MASK and stores the value in the "am_pm" field of the struct.
 * After all values are stored, the function returns the struct.
*/

void rtc_get_time(rtc_time_t * rtc_time )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	uint8_t tmp = rtc_get_reg(RTC_REG_SECOND) ;
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff ffdb 	bl	8001d30 <rtc_get_reg>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	73fb      	strb	r3, [r7, #15]
	tm = tmp ;
 8001d7e:	4a38      	ldr	r2, [pc, #224]	; (8001e60 <rtc_get_time+0xf4>)
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	7013      	strb	r3, [r2, #0]
	//BCD --> DEC
	rtc_time->sec  = ((tmp >> 4) & 0x0f) * 10 + (tmp & 0x0f) ;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	0092      	lsls	r2, r2, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	701a      	strb	r2, [r3, #0]

	tmp = rtc_get_reg(RTC_REG_MINUTE) ;
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff ffc3 	bl	8001d30 <rtc_get_reg>
 8001daa:	4603      	mov	r3, r0
 8001dac:	73fb      	strb	r3, [r7, #15]
	//BCD --> DEC
	rtc_time->min  = ((tmp >> 4) & 0x0f) * 10 + (tmp & 0x0f) ;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	705a      	strb	r2, [r3, #1]

	tmp = rtc_get_reg(RTC_REG_HOUR) ;
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f7ff ffae 	bl	8001d30 <rtc_get_reg>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	73fb      	strb	r3, [r7, #15]


	if( (tmp & RTC_BIT_MODE_MASK) != 0)
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d022      	beq.n	8001e28 <rtc_get_time+0xbc>
	{
		//12 hour mode
		rtc_time->mode = H_12 ;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	70da      	strb	r2, [r3, #3]
		if((tmp & RTC_AM_PM_BIT_MASK) != 0)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <rtc_get_time+0x8e>
		{
			rtc_time->am_pm = PM ;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	711a      	strb	r2, [r3, #4]
 8001df8:	e002      	b.n	8001e00 <rtc_get_time+0x94>
		}
		else{
			rtc_time->am_pm = AM ;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	711a      	strb	r2, [r3, #4]
		}

		rtc_time->hr = ((tmp & 0x1f) >> 4) * 10 + (tmp & 0x0f) ;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	111b      	asrs	r3, r3, #4
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	0092      	lsls	r2, r2, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	709a      	strb	r2, [r3, #2]
		rtc_time->mode = H_24 ;
		tmp = RTC_24H_MASK & tmp ;
		rtc_time->hr = (tmp >> 4) * 10 + (tmp & 0x0f) ;
	}

}
 8001e26:	e016      	b.n	8001e56 <rtc_get_time+0xea>
		rtc_time->mode = H_24 ;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	70da      	strb	r2, [r3, #3]
		tmp = RTC_24H_MASK & tmp ;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e34:	73fb      	strb	r3, [r7, #15]
		rtc_time->hr = (tmp >> 4) * 10 + (tmp & 0x0f) ;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	709a      	strb	r2, [r3, #2]
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000d48 	.word	0x20000d48

08001e64 <rtc_get_date>:
 * The function then reads the month register from the RTC device and clears the century bit by ANDing it with 0x7f.
 * It then extracts the tens and ones digits of the month from the BCD value in the same way as the day.
 * Finally, the function reads the year register from the RTC device and extracts the tens and ones digits of the year from the BCD value using bitwise operations.
 */
void rtc_get_date(rtc_date_t * date)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    // Read the date register from the RTC device
    uint8_t tmp = rtc_get_reg(RTC_REG_DATE) ;
 8001e6c:	2004      	movs	r0, #4
 8001e6e:	f7ff ff5f 	bl	8001d30 <rtc_get_reg>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]

    // Extract the tens and ones digits from the BCD value
    date->day = (tmp >> 4)*10 + (tmp & 0x0f) ;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	0092      	lsls	r2, r2, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	701a      	strb	r2, [r3, #0]

    // Read the month register from the RTC device
    tmp = rtc_get_reg(RTC_REG_MONTH) ;
 8001e96:	2005      	movs	r0, #5
 8001e98:	f7ff ff4a 	bl	8001d30 <rtc_get_reg>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]

    // Clear the century bit
    tmp &= 0x7f ;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea6:	73fb      	strb	r3, [r7, #15]

    // Extract the tens and ones digits from the BCD value
    date->month = (tmp >> 4) *10 +(tmp & 0x0f) ;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	0092      	lsls	r2, r2, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	705a      	strb	r2, [r3, #1]

    // Read the year register from the RTC device
    tmp = rtc_get_reg(RTC_REG_YEAR) ;
 8001ec8:	2006      	movs	r0, #6
 8001eca:	f7ff ff31 	bl	8001d30 <rtc_get_reg>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	73fb      	strb	r3, [r7, #15]

    // Extract the tens and ones digits from the BCD value
    date->year = (tmp >> 4) *10 +(tmp & 0x0f) ;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	0092      	lsls	r2, r2, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	709a      	strb	r2, [r3, #2]
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <rtc_set_alarm>:
 * The function then clears the alarm flag by ANDing the status register with 0xfe, and enables the alarm by setting the AE1 bit in the control register.
*/


void rtc_set_alarm(rtc_time_t * alarm)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
// Convert the alarm time to BCD format
uint8_t tmp = GET_BCD_HIGH(alarm->sec) | GET_BCD_LOW(alarm->sec);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4a44      	ldr	r2, [pc, #272]	; (800201c <rtc_set_alarm+0x120>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	08db      	lsrs	r3, r3, #3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	b258      	sxtb	r0, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b40      	ldr	r3, [pc, #256]	; (800201c <rtc_set_alarm+0x120>)
 8001f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f20:	08d9      	lsrs	r1, r3, #3
 8001f22:	460b      	mov	r3, r1
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	b25b      	sxtb	r3, r3
 8001f30:	4303      	orrs	r3, r0
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	73fb      	strb	r3, [r7, #15]

// Write the BCD-formatted alarm time to the seconds register
rtc_write_reg( RTC_I2C_ADDR , RTC_A1_SECOND ,tmp , 1) ;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	2107      	movs	r1, #7
 8001f3c:	2068      	movs	r0, #104	; 0x68
 8001f3e:	f7ff fecd 	bl	8001cdc <rtc_write_reg>

	tmp = GET_BCD_HIGH(alarm->min)  | GET_BCD_LOW(alarm->min)   ;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	785b      	ldrb	r3, [r3, #1]
 8001f46:	4a35      	ldr	r2, [pc, #212]	; (800201c <rtc_set_alarm+0x120>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	b258      	sxtb	r0, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	785a      	ldrb	r2, [r3, #1]
 8001f58:	4b30      	ldr	r3, [pc, #192]	; (800201c <rtc_set_alarm+0x120>)
 8001f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f5e:	08d9      	lsrs	r1, r3, #3
 8001f60:	460b      	mov	r3, r1
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	4303      	orrs	r3, r0
 8001f70:	b25b      	sxtb	r3, r3
 8001f72:	73fb      	strb	r3, [r7, #15]

	rtc_write_reg( RTC_I2C_ADDR , RTC_A1_MINUTE ,tmp , 1) ;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	2301      	movs	r3, #1
 8001f78:	2108      	movs	r1, #8
 8001f7a:	2068      	movs	r0, #104	; 0x68
 8001f7c:	f7ff feae 	bl	8001cdc <rtc_write_reg>

	tmp = GET_BCD_HIGH(alarm->hr)  | GET_BCD_LOW(alarm->hr)     ;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	789b      	ldrb	r3, [r3, #2]
 8001f84:	4a25      	ldr	r2, [pc, #148]	; (800201c <rtc_set_alarm+0x120>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	b258      	sxtb	r0, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	789a      	ldrb	r2, [r3, #2]
 8001f96:	4b21      	ldr	r3, [pc, #132]	; (800201c <rtc_set_alarm+0x120>)
 8001f98:	fba3 1302 	umull	r1, r3, r3, r2
 8001f9c:	08d9      	lsrs	r1, r3, #3
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	4303      	orrs	r3, r0
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	73fb      	strb	r3, [r7, #15]

	rtc_write_reg( RTC_I2C_ADDR , RTC_A1_HOUR ,tmp , 1) ;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	2109      	movs	r1, #9
 8001fb8:	2068      	movs	r0, #104	; 0x68
 8001fba:	f7ff fe8f 	bl	8001cdc <rtc_write_reg>

	//set alarm when sec ,mi, and hour matchs

	tmp = rtc_get_reg(RTC_A1_DATE) ;
 8001fbe:	200a      	movs	r0, #10
 8001fc0:	f7ff feb6 	bl	8001d30 <rtc_get_reg>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]

	//set A1M4 bit to one
	tmp |= 0x80 ;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fce:	73fb      	strb	r3, [r7, #15]

	rtc_write_reg( RTC_I2C_ADDR , RTC_A1_DATE ,tmp , 1) ;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	210a      	movs	r1, #10
 8001fd6:	2068      	movs	r0, #104	; 0x68
 8001fd8:	f7ff fe80 	bl	8001cdc <rtc_write_reg>

	//clear alarm flag
	tmp  = rtc_get_reg(RTC_STATUS_REG) & 0xfe; // set A1F to 0
 8001fdc:	200f      	movs	r0, #15
 8001fde:	f7ff fea7 	bl	8001d30 <rtc_get_reg>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]

	rtc_write_reg( RTC_I2C_ADDR , RTC_STATUS_REG ,tmp , 1) ;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	2301      	movs	r3, #1
 8001fee:	210f      	movs	r1, #15
 8001ff0:	2068      	movs	r0, #104	; 0x68
 8001ff2:	f7ff fe73 	bl	8001cdc <rtc_write_reg>

	//enable rtc alarm
	tmp = rtc_get_reg(RTC_CONTROL_REG) ;
 8001ff6:	200e      	movs	r0, #14
 8001ff8:	f7ff fe9a 	bl	8001d30 <rtc_get_reg>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]

	//set AE1 in control reg
	tmp |= 0x01;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]

	rtc_write_reg( RTC_I2C_ADDR , RTC_CONTROL_REG ,tmp , 1) ;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	2301      	movs	r3, #1
 800200c:	210e      	movs	r1, #14
 800200e:	2068      	movs	r0, #104	; 0x68
 8002010:	f7ff fe64 	bl	8001cdc <rtc_write_reg>

}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	cccccccd 	.word	0xcccccccd

08002020 <rtc_is_alarm_set>:
 * Then it checks if the A1F bit is set in the status register by ANDing it with the RTC_STATUS_AF1_MASK.
 * If the A1F bit is set, it returns true, indicating that the alarm is set.
 * Otherwise, it returns false, indicating that the alarm is not set.
*/
bool rtc_is_alarm_set( )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
bool ret = false ;
 8002026:	2300      	movs	r3, #0
 8002028:	71fb      	strb	r3, [r7, #7]
// Check if A1F in status register is set
if( (rtc_get_reg(RTC_STATUS_REG) & RTC_STATUS_AF1_MASK ) != 0 )
 800202a:	200f      	movs	r0, #15
 800202c:	f7ff fe80 	bl	8001d30 <rtc_get_reg>
 8002030:	4603      	mov	r3, r0
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <rtc_is_alarm_set+0x20>
{
ret = true ;
 800203a:	2301      	movs	r3, #1
 800203c:	71fb      	strb	r3, [r7, #7]
 800203e:	e001      	b.n	8002044 <rtc_is_alarm_set+0x24>
}
else{
ret = false ;
 8002040:	2300      	movs	r3, #0
 8002042:	71fb      	strb	r3, [r7, #7]
}
return ret ;
 8002044:	79fb      	ldrb	r3, [r7, #7]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <rtc_set_alarm_callback>:
 * so that it can be called later when the alarm goes off.
 */
callback_t 	alarm1_callback  ;

void rtc_set_alarm_callback(callback_t  callback)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	alarm1_callback = callback ;
 8002058:	4a03      	ldr	r2, [pc, #12]	; (8002068 <rtc_set_alarm_callback+0x18>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	20000d4c 	.word	0x20000d4c

0800206c <rtc_update>:
 * it calls the callback function that was previously set using rtc_set_alarm_callback().
 * If the alarm is not set, the function does nothing.
 * This function should be called periodically in the main loop of the program to check for the alarm status and respond accordingly.
 */
void rtc_update(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	if(rtc_is_alarm_set( ) == true)
 8002070:	f7ff ffd6 	bl	8002020 <rtc_is_alarm_set>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <rtc_update+0x14>
	{
		alarm1_callback() ;
 800207a:	4b02      	ldr	r3, [pc, #8]	; (8002084 <rtc_update+0x18>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4798      	blx	r3
	}
	else
	{

	}
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000d4c 	.word	0x20000d4c

08002088 <__libc_init_array>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	4d0d      	ldr	r5, [pc, #52]	; (80020c0 <__libc_init_array+0x38>)
 800208c:	4c0d      	ldr	r4, [pc, #52]	; (80020c4 <__libc_init_array+0x3c>)
 800208e:	1b64      	subs	r4, r4, r5
 8002090:	10a4      	asrs	r4, r4, #2
 8002092:	2600      	movs	r6, #0
 8002094:	42a6      	cmp	r6, r4
 8002096:	d109      	bne.n	80020ac <__libc_init_array+0x24>
 8002098:	4d0b      	ldr	r5, [pc, #44]	; (80020c8 <__libc_init_array+0x40>)
 800209a:	4c0c      	ldr	r4, [pc, #48]	; (80020cc <__libc_init_array+0x44>)
 800209c:	f000 fcae 	bl	80029fc <_init>
 80020a0:	1b64      	subs	r4, r4, r5
 80020a2:	10a4      	asrs	r4, r4, #2
 80020a4:	2600      	movs	r6, #0
 80020a6:	42a6      	cmp	r6, r4
 80020a8:	d105      	bne.n	80020b6 <__libc_init_array+0x2e>
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
 80020ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b0:	4798      	blx	r3
 80020b2:	3601      	adds	r6, #1
 80020b4:	e7ee      	b.n	8002094 <__libc_init_array+0xc>
 80020b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ba:	4798      	blx	r3
 80020bc:	3601      	adds	r6, #1
 80020be:	e7f2      	b.n	80020a6 <__libc_init_array+0x1e>
 80020c0:	080043ec 	.word	0x080043ec
 80020c4:	080043ec 	.word	0x080043ec
 80020c8:	080043ec 	.word	0x080043ec
 80020cc:	080043f0 	.word	0x080043f0

080020d0 <memset>:
 80020d0:	4402      	add	r2, r0
 80020d2:	4603      	mov	r3, r0
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d100      	bne.n	80020da <memset+0xa>
 80020d8:	4770      	bx	lr
 80020da:	f803 1b01 	strb.w	r1, [r3], #1
 80020de:	e7f9      	b.n	80020d4 <memset+0x4>

080020e0 <siprintf>:
 80020e0:	b40e      	push	{r1, r2, r3}
 80020e2:	b500      	push	{lr}
 80020e4:	b09c      	sub	sp, #112	; 0x70
 80020e6:	ab1d      	add	r3, sp, #116	; 0x74
 80020e8:	9002      	str	r0, [sp, #8]
 80020ea:	9006      	str	r0, [sp, #24]
 80020ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020f0:	4809      	ldr	r0, [pc, #36]	; (8002118 <siprintf+0x38>)
 80020f2:	9107      	str	r1, [sp, #28]
 80020f4:	9104      	str	r1, [sp, #16]
 80020f6:	4909      	ldr	r1, [pc, #36]	; (800211c <siprintf+0x3c>)
 80020f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80020fc:	9105      	str	r1, [sp, #20]
 80020fe:	6800      	ldr	r0, [r0, #0]
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	a902      	add	r1, sp, #8
 8002104:	f000 f87c 	bl	8002200 <_svfiprintf_r>
 8002108:	9b02      	ldr	r3, [sp, #8]
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	b01c      	add	sp, #112	; 0x70
 8002110:	f85d eb04 	ldr.w	lr, [sp], #4
 8002114:	b003      	add	sp, #12
 8002116:	4770      	bx	lr
 8002118:	20000074 	.word	0x20000074
 800211c:	ffff0208 	.word	0xffff0208

08002120 <strncmp>:
 8002120:	b510      	push	{r4, lr}
 8002122:	4603      	mov	r3, r0
 8002124:	b172      	cbz	r2, 8002144 <strncmp+0x24>
 8002126:	3901      	subs	r1, #1
 8002128:	1884      	adds	r4, r0, r2
 800212a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800212e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002132:	4290      	cmp	r0, r2
 8002134:	d101      	bne.n	800213a <strncmp+0x1a>
 8002136:	42a3      	cmp	r3, r4
 8002138:	d101      	bne.n	800213e <strncmp+0x1e>
 800213a:	1a80      	subs	r0, r0, r2
 800213c:	bd10      	pop	{r4, pc}
 800213e:	2800      	cmp	r0, #0
 8002140:	d1f3      	bne.n	800212a <strncmp+0xa>
 8002142:	e7fa      	b.n	800213a <strncmp+0x1a>
 8002144:	4610      	mov	r0, r2
 8002146:	e7f9      	b.n	800213c <strncmp+0x1c>

08002148 <__ssputs_r>:
 8002148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800214c:	688e      	ldr	r6, [r1, #8]
 800214e:	429e      	cmp	r6, r3
 8002150:	4682      	mov	sl, r0
 8002152:	460c      	mov	r4, r1
 8002154:	4690      	mov	r8, r2
 8002156:	461f      	mov	r7, r3
 8002158:	d838      	bhi.n	80021cc <__ssputs_r+0x84>
 800215a:	898a      	ldrh	r2, [r1, #12]
 800215c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002160:	d032      	beq.n	80021c8 <__ssputs_r+0x80>
 8002162:	6825      	ldr	r5, [r4, #0]
 8002164:	6909      	ldr	r1, [r1, #16]
 8002166:	eba5 0901 	sub.w	r9, r5, r1
 800216a:	6965      	ldr	r5, [r4, #20]
 800216c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002170:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002174:	3301      	adds	r3, #1
 8002176:	444b      	add	r3, r9
 8002178:	106d      	asrs	r5, r5, #1
 800217a:	429d      	cmp	r5, r3
 800217c:	bf38      	it	cc
 800217e:	461d      	movcc	r5, r3
 8002180:	0553      	lsls	r3, r2, #21
 8002182:	d531      	bpl.n	80021e8 <__ssputs_r+0xa0>
 8002184:	4629      	mov	r1, r5
 8002186:	f000 fb61 	bl	800284c <_malloc_r>
 800218a:	4606      	mov	r6, r0
 800218c:	b950      	cbnz	r0, 80021a4 <__ssputs_r+0x5c>
 800218e:	230c      	movs	r3, #12
 8002190:	f8ca 3000 	str.w	r3, [sl]
 8002194:	89a3      	ldrh	r3, [r4, #12]
 8002196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219a:	81a3      	strh	r3, [r4, #12]
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021a4:	6921      	ldr	r1, [r4, #16]
 80021a6:	464a      	mov	r2, r9
 80021a8:	f000 fabe 	bl	8002728 <memcpy>
 80021ac:	89a3      	ldrh	r3, [r4, #12]
 80021ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80021b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b6:	81a3      	strh	r3, [r4, #12]
 80021b8:	6126      	str	r6, [r4, #16]
 80021ba:	6165      	str	r5, [r4, #20]
 80021bc:	444e      	add	r6, r9
 80021be:	eba5 0509 	sub.w	r5, r5, r9
 80021c2:	6026      	str	r6, [r4, #0]
 80021c4:	60a5      	str	r5, [r4, #8]
 80021c6:	463e      	mov	r6, r7
 80021c8:	42be      	cmp	r6, r7
 80021ca:	d900      	bls.n	80021ce <__ssputs_r+0x86>
 80021cc:	463e      	mov	r6, r7
 80021ce:	6820      	ldr	r0, [r4, #0]
 80021d0:	4632      	mov	r2, r6
 80021d2:	4641      	mov	r1, r8
 80021d4:	f000 fab6 	bl	8002744 <memmove>
 80021d8:	68a3      	ldr	r3, [r4, #8]
 80021da:	1b9b      	subs	r3, r3, r6
 80021dc:	60a3      	str	r3, [r4, #8]
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	4433      	add	r3, r6
 80021e2:	6023      	str	r3, [r4, #0]
 80021e4:	2000      	movs	r0, #0
 80021e6:	e7db      	b.n	80021a0 <__ssputs_r+0x58>
 80021e8:	462a      	mov	r2, r5
 80021ea:	f000 fba3 	bl	8002934 <_realloc_r>
 80021ee:	4606      	mov	r6, r0
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d1e1      	bne.n	80021b8 <__ssputs_r+0x70>
 80021f4:	6921      	ldr	r1, [r4, #16]
 80021f6:	4650      	mov	r0, sl
 80021f8:	f000 fabe 	bl	8002778 <_free_r>
 80021fc:	e7c7      	b.n	800218e <__ssputs_r+0x46>
	...

08002200 <_svfiprintf_r>:
 8002200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002204:	4698      	mov	r8, r3
 8002206:	898b      	ldrh	r3, [r1, #12]
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	b09d      	sub	sp, #116	; 0x74
 800220c:	4607      	mov	r7, r0
 800220e:	460d      	mov	r5, r1
 8002210:	4614      	mov	r4, r2
 8002212:	d50e      	bpl.n	8002232 <_svfiprintf_r+0x32>
 8002214:	690b      	ldr	r3, [r1, #16]
 8002216:	b963      	cbnz	r3, 8002232 <_svfiprintf_r+0x32>
 8002218:	2140      	movs	r1, #64	; 0x40
 800221a:	f000 fb17 	bl	800284c <_malloc_r>
 800221e:	6028      	str	r0, [r5, #0]
 8002220:	6128      	str	r0, [r5, #16]
 8002222:	b920      	cbnz	r0, 800222e <_svfiprintf_r+0x2e>
 8002224:	230c      	movs	r3, #12
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	e0d1      	b.n	80023d2 <_svfiprintf_r+0x1d2>
 800222e:	2340      	movs	r3, #64	; 0x40
 8002230:	616b      	str	r3, [r5, #20]
 8002232:	2300      	movs	r3, #0
 8002234:	9309      	str	r3, [sp, #36]	; 0x24
 8002236:	2320      	movs	r3, #32
 8002238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800223c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002240:	2330      	movs	r3, #48	; 0x30
 8002242:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80023ec <_svfiprintf_r+0x1ec>
 8002246:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800224a:	f04f 0901 	mov.w	r9, #1
 800224e:	4623      	mov	r3, r4
 8002250:	469a      	mov	sl, r3
 8002252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002256:	b10a      	cbz	r2, 800225c <_svfiprintf_r+0x5c>
 8002258:	2a25      	cmp	r2, #37	; 0x25
 800225a:	d1f9      	bne.n	8002250 <_svfiprintf_r+0x50>
 800225c:	ebba 0b04 	subs.w	fp, sl, r4
 8002260:	d00b      	beq.n	800227a <_svfiprintf_r+0x7a>
 8002262:	465b      	mov	r3, fp
 8002264:	4622      	mov	r2, r4
 8002266:	4629      	mov	r1, r5
 8002268:	4638      	mov	r0, r7
 800226a:	f7ff ff6d 	bl	8002148 <__ssputs_r>
 800226e:	3001      	adds	r0, #1
 8002270:	f000 80aa 	beq.w	80023c8 <_svfiprintf_r+0x1c8>
 8002274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002276:	445a      	add	r2, fp
 8002278:	9209      	str	r2, [sp, #36]	; 0x24
 800227a:	f89a 3000 	ldrb.w	r3, [sl]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80a2 	beq.w	80023c8 <_svfiprintf_r+0x1c8>
 8002284:	2300      	movs	r3, #0
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800228e:	f10a 0a01 	add.w	sl, sl, #1
 8002292:	9304      	str	r3, [sp, #16]
 8002294:	9307      	str	r3, [sp, #28]
 8002296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800229a:	931a      	str	r3, [sp, #104]	; 0x68
 800229c:	4654      	mov	r4, sl
 800229e:	2205      	movs	r2, #5
 80022a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022a4:	4851      	ldr	r0, [pc, #324]	; (80023ec <_svfiprintf_r+0x1ec>)
 80022a6:	f7fd ff9b 	bl	80001e0 <memchr>
 80022aa:	9a04      	ldr	r2, [sp, #16]
 80022ac:	b9d8      	cbnz	r0, 80022e6 <_svfiprintf_r+0xe6>
 80022ae:	06d0      	lsls	r0, r2, #27
 80022b0:	bf44      	itt	mi
 80022b2:	2320      	movmi	r3, #32
 80022b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022b8:	0711      	lsls	r1, r2, #28
 80022ba:	bf44      	itt	mi
 80022bc:	232b      	movmi	r3, #43	; 0x2b
 80022be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022c2:	f89a 3000 	ldrb.w	r3, [sl]
 80022c6:	2b2a      	cmp	r3, #42	; 0x2a
 80022c8:	d015      	beq.n	80022f6 <_svfiprintf_r+0xf6>
 80022ca:	9a07      	ldr	r2, [sp, #28]
 80022cc:	4654      	mov	r4, sl
 80022ce:	2000      	movs	r0, #0
 80022d0:	f04f 0c0a 	mov.w	ip, #10
 80022d4:	4621      	mov	r1, r4
 80022d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022da:	3b30      	subs	r3, #48	; 0x30
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d94e      	bls.n	800237e <_svfiprintf_r+0x17e>
 80022e0:	b1b0      	cbz	r0, 8002310 <_svfiprintf_r+0x110>
 80022e2:	9207      	str	r2, [sp, #28]
 80022e4:	e014      	b.n	8002310 <_svfiprintf_r+0x110>
 80022e6:	eba0 0308 	sub.w	r3, r0, r8
 80022ea:	fa09 f303 	lsl.w	r3, r9, r3
 80022ee:	4313      	orrs	r3, r2
 80022f0:	9304      	str	r3, [sp, #16]
 80022f2:	46a2      	mov	sl, r4
 80022f4:	e7d2      	b.n	800229c <_svfiprintf_r+0x9c>
 80022f6:	9b03      	ldr	r3, [sp, #12]
 80022f8:	1d19      	adds	r1, r3, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	9103      	str	r1, [sp, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bfbb      	ittet	lt
 8002302:	425b      	neglt	r3, r3
 8002304:	f042 0202 	orrlt.w	r2, r2, #2
 8002308:	9307      	strge	r3, [sp, #28]
 800230a:	9307      	strlt	r3, [sp, #28]
 800230c:	bfb8      	it	lt
 800230e:	9204      	strlt	r2, [sp, #16]
 8002310:	7823      	ldrb	r3, [r4, #0]
 8002312:	2b2e      	cmp	r3, #46	; 0x2e
 8002314:	d10c      	bne.n	8002330 <_svfiprintf_r+0x130>
 8002316:	7863      	ldrb	r3, [r4, #1]
 8002318:	2b2a      	cmp	r3, #42	; 0x2a
 800231a:	d135      	bne.n	8002388 <_svfiprintf_r+0x188>
 800231c:	9b03      	ldr	r3, [sp, #12]
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	9203      	str	r2, [sp, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	bfb8      	it	lt
 8002328:	f04f 33ff 	movlt.w	r3, #4294967295
 800232c:	3402      	adds	r4, #2
 800232e:	9305      	str	r3, [sp, #20]
 8002330:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80023f0 <_svfiprintf_r+0x1f0>
 8002334:	7821      	ldrb	r1, [r4, #0]
 8002336:	2203      	movs	r2, #3
 8002338:	4650      	mov	r0, sl
 800233a:	f7fd ff51 	bl	80001e0 <memchr>
 800233e:	b140      	cbz	r0, 8002352 <_svfiprintf_r+0x152>
 8002340:	2340      	movs	r3, #64	; 0x40
 8002342:	eba0 000a 	sub.w	r0, r0, sl
 8002346:	fa03 f000 	lsl.w	r0, r3, r0
 800234a:	9b04      	ldr	r3, [sp, #16]
 800234c:	4303      	orrs	r3, r0
 800234e:	3401      	adds	r4, #1
 8002350:	9304      	str	r3, [sp, #16]
 8002352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002356:	4827      	ldr	r0, [pc, #156]	; (80023f4 <_svfiprintf_r+0x1f4>)
 8002358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800235c:	2206      	movs	r2, #6
 800235e:	f7fd ff3f 	bl	80001e0 <memchr>
 8002362:	2800      	cmp	r0, #0
 8002364:	d038      	beq.n	80023d8 <_svfiprintf_r+0x1d8>
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <_svfiprintf_r+0x1f8>)
 8002368:	bb1b      	cbnz	r3, 80023b2 <_svfiprintf_r+0x1b2>
 800236a:	9b03      	ldr	r3, [sp, #12]
 800236c:	3307      	adds	r3, #7
 800236e:	f023 0307 	bic.w	r3, r3, #7
 8002372:	3308      	adds	r3, #8
 8002374:	9303      	str	r3, [sp, #12]
 8002376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002378:	4433      	add	r3, r6
 800237a:	9309      	str	r3, [sp, #36]	; 0x24
 800237c:	e767      	b.n	800224e <_svfiprintf_r+0x4e>
 800237e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002382:	460c      	mov	r4, r1
 8002384:	2001      	movs	r0, #1
 8002386:	e7a5      	b.n	80022d4 <_svfiprintf_r+0xd4>
 8002388:	2300      	movs	r3, #0
 800238a:	3401      	adds	r4, #1
 800238c:	9305      	str	r3, [sp, #20]
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 0c0a 	mov.w	ip, #10
 8002394:	4620      	mov	r0, r4
 8002396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800239a:	3a30      	subs	r2, #48	; 0x30
 800239c:	2a09      	cmp	r2, #9
 800239e:	d903      	bls.n	80023a8 <_svfiprintf_r+0x1a8>
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0c5      	beq.n	8002330 <_svfiprintf_r+0x130>
 80023a4:	9105      	str	r1, [sp, #20]
 80023a6:	e7c3      	b.n	8002330 <_svfiprintf_r+0x130>
 80023a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80023ac:	4604      	mov	r4, r0
 80023ae:	2301      	movs	r3, #1
 80023b0:	e7f0      	b.n	8002394 <_svfiprintf_r+0x194>
 80023b2:	ab03      	add	r3, sp, #12
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	462a      	mov	r2, r5
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <_svfiprintf_r+0x1fc>)
 80023ba:	a904      	add	r1, sp, #16
 80023bc:	4638      	mov	r0, r7
 80023be:	f3af 8000 	nop.w
 80023c2:	1c42      	adds	r2, r0, #1
 80023c4:	4606      	mov	r6, r0
 80023c6:	d1d6      	bne.n	8002376 <_svfiprintf_r+0x176>
 80023c8:	89ab      	ldrh	r3, [r5, #12]
 80023ca:	065b      	lsls	r3, r3, #25
 80023cc:	f53f af2c 	bmi.w	8002228 <_svfiprintf_r+0x28>
 80023d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023d2:	b01d      	add	sp, #116	; 0x74
 80023d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d8:	ab03      	add	r3, sp, #12
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	462a      	mov	r2, r5
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <_svfiprintf_r+0x1fc>)
 80023e0:	a904      	add	r1, sp, #16
 80023e2:	4638      	mov	r0, r7
 80023e4:	f000 f87a 	bl	80024dc <_printf_i>
 80023e8:	e7eb      	b.n	80023c2 <_svfiprintf_r+0x1c2>
 80023ea:	bf00      	nop
 80023ec:	080043b8 	.word	0x080043b8
 80023f0:	080043be 	.word	0x080043be
 80023f4:	080043c2 	.word	0x080043c2
 80023f8:	00000000 	.word	0x00000000
 80023fc:	08002149 	.word	0x08002149

08002400 <_printf_common>:
 8002400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002404:	4616      	mov	r6, r2
 8002406:	4699      	mov	r9, r3
 8002408:	688a      	ldr	r2, [r1, #8]
 800240a:	690b      	ldr	r3, [r1, #16]
 800240c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002410:	4293      	cmp	r3, r2
 8002412:	bfb8      	it	lt
 8002414:	4613      	movlt	r3, r2
 8002416:	6033      	str	r3, [r6, #0]
 8002418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800241c:	4607      	mov	r7, r0
 800241e:	460c      	mov	r4, r1
 8002420:	b10a      	cbz	r2, 8002426 <_printf_common+0x26>
 8002422:	3301      	adds	r3, #1
 8002424:	6033      	str	r3, [r6, #0]
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	0699      	lsls	r1, r3, #26
 800242a:	bf42      	ittt	mi
 800242c:	6833      	ldrmi	r3, [r6, #0]
 800242e:	3302      	addmi	r3, #2
 8002430:	6033      	strmi	r3, [r6, #0]
 8002432:	6825      	ldr	r5, [r4, #0]
 8002434:	f015 0506 	ands.w	r5, r5, #6
 8002438:	d106      	bne.n	8002448 <_printf_common+0x48>
 800243a:	f104 0a19 	add.w	sl, r4, #25
 800243e:	68e3      	ldr	r3, [r4, #12]
 8002440:	6832      	ldr	r2, [r6, #0]
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	42ab      	cmp	r3, r5
 8002446:	dc26      	bgt.n	8002496 <_printf_common+0x96>
 8002448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800244c:	1e13      	subs	r3, r2, #0
 800244e:	6822      	ldr	r2, [r4, #0]
 8002450:	bf18      	it	ne
 8002452:	2301      	movne	r3, #1
 8002454:	0692      	lsls	r2, r2, #26
 8002456:	d42b      	bmi.n	80024b0 <_printf_common+0xb0>
 8002458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800245c:	4649      	mov	r1, r9
 800245e:	4638      	mov	r0, r7
 8002460:	47c0      	blx	r8
 8002462:	3001      	adds	r0, #1
 8002464:	d01e      	beq.n	80024a4 <_printf_common+0xa4>
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	68e5      	ldr	r5, [r4, #12]
 800246a:	6832      	ldr	r2, [r6, #0]
 800246c:	f003 0306 	and.w	r3, r3, #6
 8002470:	2b04      	cmp	r3, #4
 8002472:	bf08      	it	eq
 8002474:	1aad      	subeq	r5, r5, r2
 8002476:	68a3      	ldr	r3, [r4, #8]
 8002478:	6922      	ldr	r2, [r4, #16]
 800247a:	bf0c      	ite	eq
 800247c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002480:	2500      	movne	r5, #0
 8002482:	4293      	cmp	r3, r2
 8002484:	bfc4      	itt	gt
 8002486:	1a9b      	subgt	r3, r3, r2
 8002488:	18ed      	addgt	r5, r5, r3
 800248a:	2600      	movs	r6, #0
 800248c:	341a      	adds	r4, #26
 800248e:	42b5      	cmp	r5, r6
 8002490:	d11a      	bne.n	80024c8 <_printf_common+0xc8>
 8002492:	2000      	movs	r0, #0
 8002494:	e008      	b.n	80024a8 <_printf_common+0xa8>
 8002496:	2301      	movs	r3, #1
 8002498:	4652      	mov	r2, sl
 800249a:	4649      	mov	r1, r9
 800249c:	4638      	mov	r0, r7
 800249e:	47c0      	blx	r8
 80024a0:	3001      	adds	r0, #1
 80024a2:	d103      	bne.n	80024ac <_printf_common+0xac>
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024ac:	3501      	adds	r5, #1
 80024ae:	e7c6      	b.n	800243e <_printf_common+0x3e>
 80024b0:	18e1      	adds	r1, r4, r3
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	2030      	movs	r0, #48	; 0x30
 80024b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024ba:	4422      	add	r2, r4
 80024bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024c4:	3302      	adds	r3, #2
 80024c6:	e7c7      	b.n	8002458 <_printf_common+0x58>
 80024c8:	2301      	movs	r3, #1
 80024ca:	4622      	mov	r2, r4
 80024cc:	4649      	mov	r1, r9
 80024ce:	4638      	mov	r0, r7
 80024d0:	47c0      	blx	r8
 80024d2:	3001      	adds	r0, #1
 80024d4:	d0e6      	beq.n	80024a4 <_printf_common+0xa4>
 80024d6:	3601      	adds	r6, #1
 80024d8:	e7d9      	b.n	800248e <_printf_common+0x8e>
	...

080024dc <_printf_i>:
 80024dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024e0:	7e0f      	ldrb	r7, [r1, #24]
 80024e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024e4:	2f78      	cmp	r7, #120	; 0x78
 80024e6:	4691      	mov	r9, r2
 80024e8:	4680      	mov	r8, r0
 80024ea:	460c      	mov	r4, r1
 80024ec:	469a      	mov	sl, r3
 80024ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80024f2:	d807      	bhi.n	8002504 <_printf_i+0x28>
 80024f4:	2f62      	cmp	r7, #98	; 0x62
 80024f6:	d80a      	bhi.n	800250e <_printf_i+0x32>
 80024f8:	2f00      	cmp	r7, #0
 80024fa:	f000 80d8 	beq.w	80026ae <_printf_i+0x1d2>
 80024fe:	2f58      	cmp	r7, #88	; 0x58
 8002500:	f000 80a3 	beq.w	800264a <_printf_i+0x16e>
 8002504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800250c:	e03a      	b.n	8002584 <_printf_i+0xa8>
 800250e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002512:	2b15      	cmp	r3, #21
 8002514:	d8f6      	bhi.n	8002504 <_printf_i+0x28>
 8002516:	a101      	add	r1, pc, #4	; (adr r1, 800251c <_printf_i+0x40>)
 8002518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800251c:	08002575 	.word	0x08002575
 8002520:	08002589 	.word	0x08002589
 8002524:	08002505 	.word	0x08002505
 8002528:	08002505 	.word	0x08002505
 800252c:	08002505 	.word	0x08002505
 8002530:	08002505 	.word	0x08002505
 8002534:	08002589 	.word	0x08002589
 8002538:	08002505 	.word	0x08002505
 800253c:	08002505 	.word	0x08002505
 8002540:	08002505 	.word	0x08002505
 8002544:	08002505 	.word	0x08002505
 8002548:	08002695 	.word	0x08002695
 800254c:	080025b9 	.word	0x080025b9
 8002550:	08002677 	.word	0x08002677
 8002554:	08002505 	.word	0x08002505
 8002558:	08002505 	.word	0x08002505
 800255c:	080026b7 	.word	0x080026b7
 8002560:	08002505 	.word	0x08002505
 8002564:	080025b9 	.word	0x080025b9
 8002568:	08002505 	.word	0x08002505
 800256c:	08002505 	.word	0x08002505
 8002570:	0800267f 	.word	0x0800267f
 8002574:	682b      	ldr	r3, [r5, #0]
 8002576:	1d1a      	adds	r2, r3, #4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	602a      	str	r2, [r5, #0]
 800257c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002584:	2301      	movs	r3, #1
 8002586:	e0a3      	b.n	80026d0 <_printf_i+0x1f4>
 8002588:	6820      	ldr	r0, [r4, #0]
 800258a:	6829      	ldr	r1, [r5, #0]
 800258c:	0606      	lsls	r6, r0, #24
 800258e:	f101 0304 	add.w	r3, r1, #4
 8002592:	d50a      	bpl.n	80025aa <_printf_i+0xce>
 8002594:	680e      	ldr	r6, [r1, #0]
 8002596:	602b      	str	r3, [r5, #0]
 8002598:	2e00      	cmp	r6, #0
 800259a:	da03      	bge.n	80025a4 <_printf_i+0xc8>
 800259c:	232d      	movs	r3, #45	; 0x2d
 800259e:	4276      	negs	r6, r6
 80025a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025a4:	485e      	ldr	r0, [pc, #376]	; (8002720 <_printf_i+0x244>)
 80025a6:	230a      	movs	r3, #10
 80025a8:	e019      	b.n	80025de <_printf_i+0x102>
 80025aa:	680e      	ldr	r6, [r1, #0]
 80025ac:	602b      	str	r3, [r5, #0]
 80025ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025b2:	bf18      	it	ne
 80025b4:	b236      	sxthne	r6, r6
 80025b6:	e7ef      	b.n	8002598 <_printf_i+0xbc>
 80025b8:	682b      	ldr	r3, [r5, #0]
 80025ba:	6820      	ldr	r0, [r4, #0]
 80025bc:	1d19      	adds	r1, r3, #4
 80025be:	6029      	str	r1, [r5, #0]
 80025c0:	0601      	lsls	r1, r0, #24
 80025c2:	d501      	bpl.n	80025c8 <_printf_i+0xec>
 80025c4:	681e      	ldr	r6, [r3, #0]
 80025c6:	e002      	b.n	80025ce <_printf_i+0xf2>
 80025c8:	0646      	lsls	r6, r0, #25
 80025ca:	d5fb      	bpl.n	80025c4 <_printf_i+0xe8>
 80025cc:	881e      	ldrh	r6, [r3, #0]
 80025ce:	4854      	ldr	r0, [pc, #336]	; (8002720 <_printf_i+0x244>)
 80025d0:	2f6f      	cmp	r7, #111	; 0x6f
 80025d2:	bf0c      	ite	eq
 80025d4:	2308      	moveq	r3, #8
 80025d6:	230a      	movne	r3, #10
 80025d8:	2100      	movs	r1, #0
 80025da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025de:	6865      	ldr	r5, [r4, #4]
 80025e0:	60a5      	str	r5, [r4, #8]
 80025e2:	2d00      	cmp	r5, #0
 80025e4:	bfa2      	ittt	ge
 80025e6:	6821      	ldrge	r1, [r4, #0]
 80025e8:	f021 0104 	bicge.w	r1, r1, #4
 80025ec:	6021      	strge	r1, [r4, #0]
 80025ee:	b90e      	cbnz	r6, 80025f4 <_printf_i+0x118>
 80025f0:	2d00      	cmp	r5, #0
 80025f2:	d04d      	beq.n	8002690 <_printf_i+0x1b4>
 80025f4:	4615      	mov	r5, r2
 80025f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80025fa:	fb03 6711 	mls	r7, r3, r1, r6
 80025fe:	5dc7      	ldrb	r7, [r0, r7]
 8002600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002604:	4637      	mov	r7, r6
 8002606:	42bb      	cmp	r3, r7
 8002608:	460e      	mov	r6, r1
 800260a:	d9f4      	bls.n	80025f6 <_printf_i+0x11a>
 800260c:	2b08      	cmp	r3, #8
 800260e:	d10b      	bne.n	8002628 <_printf_i+0x14c>
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	07de      	lsls	r6, r3, #31
 8002614:	d508      	bpl.n	8002628 <_printf_i+0x14c>
 8002616:	6923      	ldr	r3, [r4, #16]
 8002618:	6861      	ldr	r1, [r4, #4]
 800261a:	4299      	cmp	r1, r3
 800261c:	bfde      	ittt	le
 800261e:	2330      	movle	r3, #48	; 0x30
 8002620:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002624:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002628:	1b52      	subs	r2, r2, r5
 800262a:	6122      	str	r2, [r4, #16]
 800262c:	f8cd a000 	str.w	sl, [sp]
 8002630:	464b      	mov	r3, r9
 8002632:	aa03      	add	r2, sp, #12
 8002634:	4621      	mov	r1, r4
 8002636:	4640      	mov	r0, r8
 8002638:	f7ff fee2 	bl	8002400 <_printf_common>
 800263c:	3001      	adds	r0, #1
 800263e:	d14c      	bne.n	80026da <_printf_i+0x1fe>
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	b004      	add	sp, #16
 8002646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800264a:	4835      	ldr	r0, [pc, #212]	; (8002720 <_printf_i+0x244>)
 800264c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002650:	6829      	ldr	r1, [r5, #0]
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	f851 6b04 	ldr.w	r6, [r1], #4
 8002658:	6029      	str	r1, [r5, #0]
 800265a:	061d      	lsls	r5, r3, #24
 800265c:	d514      	bpl.n	8002688 <_printf_i+0x1ac>
 800265e:	07df      	lsls	r7, r3, #31
 8002660:	bf44      	itt	mi
 8002662:	f043 0320 	orrmi.w	r3, r3, #32
 8002666:	6023      	strmi	r3, [r4, #0]
 8002668:	b91e      	cbnz	r6, 8002672 <_printf_i+0x196>
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	f023 0320 	bic.w	r3, r3, #32
 8002670:	6023      	str	r3, [r4, #0]
 8002672:	2310      	movs	r3, #16
 8002674:	e7b0      	b.n	80025d8 <_printf_i+0xfc>
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	f043 0320 	orr.w	r3, r3, #32
 800267c:	6023      	str	r3, [r4, #0]
 800267e:	2378      	movs	r3, #120	; 0x78
 8002680:	4828      	ldr	r0, [pc, #160]	; (8002724 <_printf_i+0x248>)
 8002682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002686:	e7e3      	b.n	8002650 <_printf_i+0x174>
 8002688:	0659      	lsls	r1, r3, #25
 800268a:	bf48      	it	mi
 800268c:	b2b6      	uxthmi	r6, r6
 800268e:	e7e6      	b.n	800265e <_printf_i+0x182>
 8002690:	4615      	mov	r5, r2
 8002692:	e7bb      	b.n	800260c <_printf_i+0x130>
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	6826      	ldr	r6, [r4, #0]
 8002698:	6961      	ldr	r1, [r4, #20]
 800269a:	1d18      	adds	r0, r3, #4
 800269c:	6028      	str	r0, [r5, #0]
 800269e:	0635      	lsls	r5, r6, #24
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	d501      	bpl.n	80026a8 <_printf_i+0x1cc>
 80026a4:	6019      	str	r1, [r3, #0]
 80026a6:	e002      	b.n	80026ae <_printf_i+0x1d2>
 80026a8:	0670      	lsls	r0, r6, #25
 80026aa:	d5fb      	bpl.n	80026a4 <_printf_i+0x1c8>
 80026ac:	8019      	strh	r1, [r3, #0]
 80026ae:	2300      	movs	r3, #0
 80026b0:	6123      	str	r3, [r4, #16]
 80026b2:	4615      	mov	r5, r2
 80026b4:	e7ba      	b.n	800262c <_printf_i+0x150>
 80026b6:	682b      	ldr	r3, [r5, #0]
 80026b8:	1d1a      	adds	r2, r3, #4
 80026ba:	602a      	str	r2, [r5, #0]
 80026bc:	681d      	ldr	r5, [r3, #0]
 80026be:	6862      	ldr	r2, [r4, #4]
 80026c0:	2100      	movs	r1, #0
 80026c2:	4628      	mov	r0, r5
 80026c4:	f7fd fd8c 	bl	80001e0 <memchr>
 80026c8:	b108      	cbz	r0, 80026ce <_printf_i+0x1f2>
 80026ca:	1b40      	subs	r0, r0, r5
 80026cc:	6060      	str	r0, [r4, #4]
 80026ce:	6863      	ldr	r3, [r4, #4]
 80026d0:	6123      	str	r3, [r4, #16]
 80026d2:	2300      	movs	r3, #0
 80026d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026d8:	e7a8      	b.n	800262c <_printf_i+0x150>
 80026da:	6923      	ldr	r3, [r4, #16]
 80026dc:	462a      	mov	r2, r5
 80026de:	4649      	mov	r1, r9
 80026e0:	4640      	mov	r0, r8
 80026e2:	47d0      	blx	sl
 80026e4:	3001      	adds	r0, #1
 80026e6:	d0ab      	beq.n	8002640 <_printf_i+0x164>
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	079b      	lsls	r3, r3, #30
 80026ec:	d413      	bmi.n	8002716 <_printf_i+0x23a>
 80026ee:	68e0      	ldr	r0, [r4, #12]
 80026f0:	9b03      	ldr	r3, [sp, #12]
 80026f2:	4298      	cmp	r0, r3
 80026f4:	bfb8      	it	lt
 80026f6:	4618      	movlt	r0, r3
 80026f8:	e7a4      	b.n	8002644 <_printf_i+0x168>
 80026fa:	2301      	movs	r3, #1
 80026fc:	4632      	mov	r2, r6
 80026fe:	4649      	mov	r1, r9
 8002700:	4640      	mov	r0, r8
 8002702:	47d0      	blx	sl
 8002704:	3001      	adds	r0, #1
 8002706:	d09b      	beq.n	8002640 <_printf_i+0x164>
 8002708:	3501      	adds	r5, #1
 800270a:	68e3      	ldr	r3, [r4, #12]
 800270c:	9903      	ldr	r1, [sp, #12]
 800270e:	1a5b      	subs	r3, r3, r1
 8002710:	42ab      	cmp	r3, r5
 8002712:	dcf2      	bgt.n	80026fa <_printf_i+0x21e>
 8002714:	e7eb      	b.n	80026ee <_printf_i+0x212>
 8002716:	2500      	movs	r5, #0
 8002718:	f104 0619 	add.w	r6, r4, #25
 800271c:	e7f5      	b.n	800270a <_printf_i+0x22e>
 800271e:	bf00      	nop
 8002720:	080043c9 	.word	0x080043c9
 8002724:	080043da 	.word	0x080043da

08002728 <memcpy>:
 8002728:	440a      	add	r2, r1
 800272a:	4291      	cmp	r1, r2
 800272c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002730:	d100      	bne.n	8002734 <memcpy+0xc>
 8002732:	4770      	bx	lr
 8002734:	b510      	push	{r4, lr}
 8002736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800273a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800273e:	4291      	cmp	r1, r2
 8002740:	d1f9      	bne.n	8002736 <memcpy+0xe>
 8002742:	bd10      	pop	{r4, pc}

08002744 <memmove>:
 8002744:	4288      	cmp	r0, r1
 8002746:	b510      	push	{r4, lr}
 8002748:	eb01 0402 	add.w	r4, r1, r2
 800274c:	d902      	bls.n	8002754 <memmove+0x10>
 800274e:	4284      	cmp	r4, r0
 8002750:	4623      	mov	r3, r4
 8002752:	d807      	bhi.n	8002764 <memmove+0x20>
 8002754:	1e43      	subs	r3, r0, #1
 8002756:	42a1      	cmp	r1, r4
 8002758:	d008      	beq.n	800276c <memmove+0x28>
 800275a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800275e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002762:	e7f8      	b.n	8002756 <memmove+0x12>
 8002764:	4402      	add	r2, r0
 8002766:	4601      	mov	r1, r0
 8002768:	428a      	cmp	r2, r1
 800276a:	d100      	bne.n	800276e <memmove+0x2a>
 800276c:	bd10      	pop	{r4, pc}
 800276e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002776:	e7f7      	b.n	8002768 <memmove+0x24>

08002778 <_free_r>:
 8002778:	b538      	push	{r3, r4, r5, lr}
 800277a:	4605      	mov	r5, r0
 800277c:	2900      	cmp	r1, #0
 800277e:	d041      	beq.n	8002804 <_free_r+0x8c>
 8002780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002784:	1f0c      	subs	r4, r1, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	bfb8      	it	lt
 800278a:	18e4      	addlt	r4, r4, r3
 800278c:	f000 f912 	bl	80029b4 <__malloc_lock>
 8002790:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <_free_r+0x90>)
 8002792:	6813      	ldr	r3, [r2, #0]
 8002794:	b933      	cbnz	r3, 80027a4 <_free_r+0x2c>
 8002796:	6063      	str	r3, [r4, #4]
 8002798:	6014      	str	r4, [r2, #0]
 800279a:	4628      	mov	r0, r5
 800279c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027a0:	f000 b90e 	b.w	80029c0 <__malloc_unlock>
 80027a4:	42a3      	cmp	r3, r4
 80027a6:	d908      	bls.n	80027ba <_free_r+0x42>
 80027a8:	6820      	ldr	r0, [r4, #0]
 80027aa:	1821      	adds	r1, r4, r0
 80027ac:	428b      	cmp	r3, r1
 80027ae:	bf01      	itttt	eq
 80027b0:	6819      	ldreq	r1, [r3, #0]
 80027b2:	685b      	ldreq	r3, [r3, #4]
 80027b4:	1809      	addeq	r1, r1, r0
 80027b6:	6021      	streq	r1, [r4, #0]
 80027b8:	e7ed      	b.n	8002796 <_free_r+0x1e>
 80027ba:	461a      	mov	r2, r3
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	b10b      	cbz	r3, 80027c4 <_free_r+0x4c>
 80027c0:	42a3      	cmp	r3, r4
 80027c2:	d9fa      	bls.n	80027ba <_free_r+0x42>
 80027c4:	6811      	ldr	r1, [r2, #0]
 80027c6:	1850      	adds	r0, r2, r1
 80027c8:	42a0      	cmp	r0, r4
 80027ca:	d10b      	bne.n	80027e4 <_free_r+0x6c>
 80027cc:	6820      	ldr	r0, [r4, #0]
 80027ce:	4401      	add	r1, r0
 80027d0:	1850      	adds	r0, r2, r1
 80027d2:	4283      	cmp	r3, r0
 80027d4:	6011      	str	r1, [r2, #0]
 80027d6:	d1e0      	bne.n	800279a <_free_r+0x22>
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	6053      	str	r3, [r2, #4]
 80027de:	4401      	add	r1, r0
 80027e0:	6011      	str	r1, [r2, #0]
 80027e2:	e7da      	b.n	800279a <_free_r+0x22>
 80027e4:	d902      	bls.n	80027ec <_free_r+0x74>
 80027e6:	230c      	movs	r3, #12
 80027e8:	602b      	str	r3, [r5, #0]
 80027ea:	e7d6      	b.n	800279a <_free_r+0x22>
 80027ec:	6820      	ldr	r0, [r4, #0]
 80027ee:	1821      	adds	r1, r4, r0
 80027f0:	428b      	cmp	r3, r1
 80027f2:	bf04      	itt	eq
 80027f4:	6819      	ldreq	r1, [r3, #0]
 80027f6:	685b      	ldreq	r3, [r3, #4]
 80027f8:	6063      	str	r3, [r4, #4]
 80027fa:	bf04      	itt	eq
 80027fc:	1809      	addeq	r1, r1, r0
 80027fe:	6021      	streq	r1, [r4, #0]
 8002800:	6054      	str	r4, [r2, #4]
 8002802:	e7ca      	b.n	800279a <_free_r+0x22>
 8002804:	bd38      	pop	{r3, r4, r5, pc}
 8002806:	bf00      	nop
 8002808:	20000d50 	.word	0x20000d50

0800280c <sbrk_aligned>:
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	4e0e      	ldr	r6, [pc, #56]	; (8002848 <sbrk_aligned+0x3c>)
 8002810:	460c      	mov	r4, r1
 8002812:	6831      	ldr	r1, [r6, #0]
 8002814:	4605      	mov	r5, r0
 8002816:	b911      	cbnz	r1, 800281e <sbrk_aligned+0x12>
 8002818:	f000 f8bc 	bl	8002994 <_sbrk_r>
 800281c:	6030      	str	r0, [r6, #0]
 800281e:	4621      	mov	r1, r4
 8002820:	4628      	mov	r0, r5
 8002822:	f000 f8b7 	bl	8002994 <_sbrk_r>
 8002826:	1c43      	adds	r3, r0, #1
 8002828:	d00a      	beq.n	8002840 <sbrk_aligned+0x34>
 800282a:	1cc4      	adds	r4, r0, #3
 800282c:	f024 0403 	bic.w	r4, r4, #3
 8002830:	42a0      	cmp	r0, r4
 8002832:	d007      	beq.n	8002844 <sbrk_aligned+0x38>
 8002834:	1a21      	subs	r1, r4, r0
 8002836:	4628      	mov	r0, r5
 8002838:	f000 f8ac 	bl	8002994 <_sbrk_r>
 800283c:	3001      	adds	r0, #1
 800283e:	d101      	bne.n	8002844 <sbrk_aligned+0x38>
 8002840:	f04f 34ff 	mov.w	r4, #4294967295
 8002844:	4620      	mov	r0, r4
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	20000d54 	.word	0x20000d54

0800284c <_malloc_r>:
 800284c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002850:	1ccd      	adds	r5, r1, #3
 8002852:	f025 0503 	bic.w	r5, r5, #3
 8002856:	3508      	adds	r5, #8
 8002858:	2d0c      	cmp	r5, #12
 800285a:	bf38      	it	cc
 800285c:	250c      	movcc	r5, #12
 800285e:	2d00      	cmp	r5, #0
 8002860:	4607      	mov	r7, r0
 8002862:	db01      	blt.n	8002868 <_malloc_r+0x1c>
 8002864:	42a9      	cmp	r1, r5
 8002866:	d905      	bls.n	8002874 <_malloc_r+0x28>
 8002868:	230c      	movs	r3, #12
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	2600      	movs	r6, #0
 800286e:	4630      	mov	r0, r6
 8002870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002874:	4e2e      	ldr	r6, [pc, #184]	; (8002930 <_malloc_r+0xe4>)
 8002876:	f000 f89d 	bl	80029b4 <__malloc_lock>
 800287a:	6833      	ldr	r3, [r6, #0]
 800287c:	461c      	mov	r4, r3
 800287e:	bb34      	cbnz	r4, 80028ce <_malloc_r+0x82>
 8002880:	4629      	mov	r1, r5
 8002882:	4638      	mov	r0, r7
 8002884:	f7ff ffc2 	bl	800280c <sbrk_aligned>
 8002888:	1c43      	adds	r3, r0, #1
 800288a:	4604      	mov	r4, r0
 800288c:	d14d      	bne.n	800292a <_malloc_r+0xde>
 800288e:	6834      	ldr	r4, [r6, #0]
 8002890:	4626      	mov	r6, r4
 8002892:	2e00      	cmp	r6, #0
 8002894:	d140      	bne.n	8002918 <_malloc_r+0xcc>
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	4631      	mov	r1, r6
 800289a:	4638      	mov	r0, r7
 800289c:	eb04 0803 	add.w	r8, r4, r3
 80028a0:	f000 f878 	bl	8002994 <_sbrk_r>
 80028a4:	4580      	cmp	r8, r0
 80028a6:	d13a      	bne.n	800291e <_malloc_r+0xd2>
 80028a8:	6821      	ldr	r1, [r4, #0]
 80028aa:	3503      	adds	r5, #3
 80028ac:	1a6d      	subs	r5, r5, r1
 80028ae:	f025 0503 	bic.w	r5, r5, #3
 80028b2:	3508      	adds	r5, #8
 80028b4:	2d0c      	cmp	r5, #12
 80028b6:	bf38      	it	cc
 80028b8:	250c      	movcc	r5, #12
 80028ba:	4629      	mov	r1, r5
 80028bc:	4638      	mov	r0, r7
 80028be:	f7ff ffa5 	bl	800280c <sbrk_aligned>
 80028c2:	3001      	adds	r0, #1
 80028c4:	d02b      	beq.n	800291e <_malloc_r+0xd2>
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	442b      	add	r3, r5
 80028ca:	6023      	str	r3, [r4, #0]
 80028cc:	e00e      	b.n	80028ec <_malloc_r+0xa0>
 80028ce:	6822      	ldr	r2, [r4, #0]
 80028d0:	1b52      	subs	r2, r2, r5
 80028d2:	d41e      	bmi.n	8002912 <_malloc_r+0xc6>
 80028d4:	2a0b      	cmp	r2, #11
 80028d6:	d916      	bls.n	8002906 <_malloc_r+0xba>
 80028d8:	1961      	adds	r1, r4, r5
 80028da:	42a3      	cmp	r3, r4
 80028dc:	6025      	str	r5, [r4, #0]
 80028de:	bf18      	it	ne
 80028e0:	6059      	strne	r1, [r3, #4]
 80028e2:	6863      	ldr	r3, [r4, #4]
 80028e4:	bf08      	it	eq
 80028e6:	6031      	streq	r1, [r6, #0]
 80028e8:	5162      	str	r2, [r4, r5]
 80028ea:	604b      	str	r3, [r1, #4]
 80028ec:	4638      	mov	r0, r7
 80028ee:	f104 060b 	add.w	r6, r4, #11
 80028f2:	f000 f865 	bl	80029c0 <__malloc_unlock>
 80028f6:	f026 0607 	bic.w	r6, r6, #7
 80028fa:	1d23      	adds	r3, r4, #4
 80028fc:	1af2      	subs	r2, r6, r3
 80028fe:	d0b6      	beq.n	800286e <_malloc_r+0x22>
 8002900:	1b9b      	subs	r3, r3, r6
 8002902:	50a3      	str	r3, [r4, r2]
 8002904:	e7b3      	b.n	800286e <_malloc_r+0x22>
 8002906:	6862      	ldr	r2, [r4, #4]
 8002908:	42a3      	cmp	r3, r4
 800290a:	bf0c      	ite	eq
 800290c:	6032      	streq	r2, [r6, #0]
 800290e:	605a      	strne	r2, [r3, #4]
 8002910:	e7ec      	b.n	80028ec <_malloc_r+0xa0>
 8002912:	4623      	mov	r3, r4
 8002914:	6864      	ldr	r4, [r4, #4]
 8002916:	e7b2      	b.n	800287e <_malloc_r+0x32>
 8002918:	4634      	mov	r4, r6
 800291a:	6876      	ldr	r6, [r6, #4]
 800291c:	e7b9      	b.n	8002892 <_malloc_r+0x46>
 800291e:	230c      	movs	r3, #12
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	4638      	mov	r0, r7
 8002924:	f000 f84c 	bl	80029c0 <__malloc_unlock>
 8002928:	e7a1      	b.n	800286e <_malloc_r+0x22>
 800292a:	6025      	str	r5, [r4, #0]
 800292c:	e7de      	b.n	80028ec <_malloc_r+0xa0>
 800292e:	bf00      	nop
 8002930:	20000d50 	.word	0x20000d50

08002934 <_realloc_r>:
 8002934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002938:	4680      	mov	r8, r0
 800293a:	4614      	mov	r4, r2
 800293c:	460e      	mov	r6, r1
 800293e:	b921      	cbnz	r1, 800294a <_realloc_r+0x16>
 8002940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002944:	4611      	mov	r1, r2
 8002946:	f7ff bf81 	b.w	800284c <_malloc_r>
 800294a:	b92a      	cbnz	r2, 8002958 <_realloc_r+0x24>
 800294c:	f7ff ff14 	bl	8002778 <_free_r>
 8002950:	4625      	mov	r5, r4
 8002952:	4628      	mov	r0, r5
 8002954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002958:	f000 f838 	bl	80029cc <_malloc_usable_size_r>
 800295c:	4284      	cmp	r4, r0
 800295e:	4607      	mov	r7, r0
 8002960:	d802      	bhi.n	8002968 <_realloc_r+0x34>
 8002962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002966:	d812      	bhi.n	800298e <_realloc_r+0x5a>
 8002968:	4621      	mov	r1, r4
 800296a:	4640      	mov	r0, r8
 800296c:	f7ff ff6e 	bl	800284c <_malloc_r>
 8002970:	4605      	mov	r5, r0
 8002972:	2800      	cmp	r0, #0
 8002974:	d0ed      	beq.n	8002952 <_realloc_r+0x1e>
 8002976:	42bc      	cmp	r4, r7
 8002978:	4622      	mov	r2, r4
 800297a:	4631      	mov	r1, r6
 800297c:	bf28      	it	cs
 800297e:	463a      	movcs	r2, r7
 8002980:	f7ff fed2 	bl	8002728 <memcpy>
 8002984:	4631      	mov	r1, r6
 8002986:	4640      	mov	r0, r8
 8002988:	f7ff fef6 	bl	8002778 <_free_r>
 800298c:	e7e1      	b.n	8002952 <_realloc_r+0x1e>
 800298e:	4635      	mov	r5, r6
 8002990:	e7df      	b.n	8002952 <_realloc_r+0x1e>
	...

08002994 <_sbrk_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	4d06      	ldr	r5, [pc, #24]	; (80029b0 <_sbrk_r+0x1c>)
 8002998:	2300      	movs	r3, #0
 800299a:	4604      	mov	r4, r0
 800299c:	4608      	mov	r0, r1
 800299e:	602b      	str	r3, [r5, #0]
 80029a0:	f000 f81e 	bl	80029e0 <_sbrk>
 80029a4:	1c43      	adds	r3, r0, #1
 80029a6:	d102      	bne.n	80029ae <_sbrk_r+0x1a>
 80029a8:	682b      	ldr	r3, [r5, #0]
 80029aa:	b103      	cbz	r3, 80029ae <_sbrk_r+0x1a>
 80029ac:	6023      	str	r3, [r4, #0]
 80029ae:	bd38      	pop	{r3, r4, r5, pc}
 80029b0:	20000d58 	.word	0x20000d58

080029b4 <__malloc_lock>:
 80029b4:	4801      	ldr	r0, [pc, #4]	; (80029bc <__malloc_lock+0x8>)
 80029b6:	f000 b811 	b.w	80029dc <__retarget_lock_acquire_recursive>
 80029ba:	bf00      	nop
 80029bc:	20000d5c 	.word	0x20000d5c

080029c0 <__malloc_unlock>:
 80029c0:	4801      	ldr	r0, [pc, #4]	; (80029c8 <__malloc_unlock+0x8>)
 80029c2:	f000 b80c 	b.w	80029de <__retarget_lock_release_recursive>
 80029c6:	bf00      	nop
 80029c8:	20000d5c 	.word	0x20000d5c

080029cc <_malloc_usable_size_r>:
 80029cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029d0:	1f18      	subs	r0, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bfbc      	itt	lt
 80029d6:	580b      	ldrlt	r3, [r1, r0]
 80029d8:	18c0      	addlt	r0, r0, r3
 80029da:	4770      	bx	lr

080029dc <__retarget_lock_acquire_recursive>:
 80029dc:	4770      	bx	lr

080029de <__retarget_lock_release_recursive>:
 80029de:	4770      	bx	lr

080029e0 <_sbrk>:
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <_sbrk+0x14>)
 80029e2:	6811      	ldr	r1, [r2, #0]
 80029e4:	4603      	mov	r3, r0
 80029e6:	b909      	cbnz	r1, 80029ec <_sbrk+0xc>
 80029e8:	4903      	ldr	r1, [pc, #12]	; (80029f8 <_sbrk+0x18>)
 80029ea:	6011      	str	r1, [r2, #0]
 80029ec:	6810      	ldr	r0, [r2, #0]
 80029ee:	4403      	add	r3, r0
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4770      	bx	lr
 80029f4:	20000d60 	.word	0x20000d60
 80029f8:	20000d68 	.word	0x20000d68

080029fc <_init>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr

08002a08 <_fini>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	bf00      	nop
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr
