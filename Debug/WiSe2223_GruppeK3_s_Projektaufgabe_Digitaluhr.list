
WiSe2223_GruppeK3_s_Projektaufgabe_Digitaluhr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f08  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  0800109c  0800109c  0001109c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800149c  0800149c  0001149c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080014a0  080014a0  000114a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080014a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000434  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000448  20000448  00020014  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001f7e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000008eb  00000000  00000000  00021fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000001a0  00000000  00000000  000228a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000148  00000000  00000000  00022a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000185a4  00000000  00000000  00022b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00002577  00000000  00000000  0003b134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00086bd4  00000000  00000000  0003d6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c427f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000534  00000000  00000000  000c42d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001084 	.word	0x08001084

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08001084 	.word	0x08001084

080001d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	db0a      	blt.n	80001fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	490c      	ldr	r1, [pc, #48]	; (8000220 <__NVIC_SetPriority+0x4c>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	0112      	lsls	r2, r2, #4
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	440b      	add	r3, r1
 80001f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001fc:	e00a      	b.n	8000214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4908      	ldr	r1, [pc, #32]	; (8000224 <__NVIC_SetPriority+0x50>)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	3b04      	subs	r3, #4
 800020c:	0112      	lsls	r2, r2, #4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	440b      	add	r3, r1
 8000212:	761a      	strb	r2, [r3, #24]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <main>:
uint8_t data = 0 ;
uint8_t i = 0 ;
int error ;

int main()
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af02      	add	r7, sp, #8

	while ((RCC->CR & 2) == 0);  //wait until HSI is Ready
 800022e:	bf00      	nop
 8000230:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <main+0xb4>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f003 0302 	and.w	r3, r3, #2
 8000238:	2b00      	cmp	r3, #0
 800023a:	d0f9      	beq.n	8000230 <main+0x8>

	systick_enable() ;
 800023c:	f000 f856 	bl	80002ec <systick_enable>

	RCC->CFGR &= ~(1<<7)  ; //reset HPRE4 The AHB clock frequency == sys clk
 8000240:	4b26      	ldr	r3, [pc, #152]	; (80002dc <main+0xb4>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a25      	ldr	r2, [pc, #148]	; (80002dc <main+0xb4>)
 8000246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800024a:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<12) ; // APB1 clock no division
 800024c:	4b23      	ldr	r3, [pc, #140]	; (80002dc <main+0xb4>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a22      	ldr	r2, [pc, #136]	; (80002dc <main+0xb4>)
 8000252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000256:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<15) ; // APB2 clock no division
 8000258:	4b20      	ldr	r3, [pc, #128]	; (80002dc <main+0xb4>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	4a1f      	ldr	r2, [pc, #124]	; (80002dc <main+0xb4>)
 800025e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000262:	6053      	str	r3, [r2, #4]

	gpio_clock_enable(GPIOA) ;
 8000264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000268:	f000 fb6e 	bl	8000948 <gpio_clock_enable>

	gpio_config_pin(GPIOA,5,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 800026c:	2300      	movs	r3, #0
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	2300      	movs	r3, #0
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2300      	movs	r3, #0
 8000276:	2201      	movs	r2, #1
 8000278:	2105      	movs	r1, #5
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f000 fbe8 	bl	8000a52 <gpio_config_pin>

	gpio_set_pinState(GPIOA , 5 , LOW) ;
 8000282:	2201      	movs	r2, #1
 8000284:	2105      	movs	r1, #5
 8000286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028a:	f000 fc19 	bl	8000ac0 <gpio_set_pinState>
	 I2C_Read(I2C2 ,0x57 , buff , 2) ;

     //128*64
#endif

	 I2C_Init(I2C1) ;
 800028e:	4814      	ldr	r0, [pc, #80]	; (80002e0 <main+0xb8>)
 8000290:	f000 fc3a 	bl	8000b08 <I2C_Init>

	 Display_Init();	//Configure Display
 8000294:	f000 f900 	bl	8000498 <Display_Init>

	 keypad_init(GPIOC , 0) ;
 8000298:	2100      	movs	r1, #0
 800029a:	4812      	ldr	r0, [pc, #72]	; (80002e4 <main+0xbc>)
 800029c:	f000 fd22 	bl	8000ce4 <keypad_init>


	while(1)
	{
		//Example: print a picture on screen
		Display_Fill(Display_COLOR_WHITE);	//the entire Display is white (written to RAM)
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 f9f9 	bl	8000698 <Display_Fill>
		Display_DrawBitmap(0, 0, helix, 128, 64, Display_COLOR_BLACK);	//data of picture into RAM	(available pictures: helix & looping)
 80002a6:	2300      	movs	r3, #0
 80002a8:	9301      	str	r3, [sp, #4]
 80002aa:	2340      	movs	r3, #64	; 0x40
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2380      	movs	r3, #128	; 0x80
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <main+0xc0>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	2000      	movs	r0, #0
 80002b6:	f000 f88c 	bl	80003d2 <Display_DrawBitmap>
		Display_UpdateScreen();		//all Data written to RAM of Display is printed on display
 80002ba:	f000 f9bd 	bl	8000638 <Display_UpdateScreen>

		char c = keypad_get_pressedkey() ;
 80002be:	f000 fe03 	bl	8000ec8 <keypad_get_pressedkey>
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]

		if(c != 0)
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0e9      	beq.n	80002a0 <main+0x78>
		{
			gpio_set_pinState(GPIOA , 5 , HIGH) ;
 80002cc:	2200      	movs	r2, #0
 80002ce:	2105      	movs	r1, #5
 80002d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d4:	f000 fbf4 	bl	8000ac0 <gpio_set_pinState>
	{
 80002d8:	e7e2      	b.n	80002a0 <main+0x78>
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40005400 	.word	0x40005400
 80002e4:	48000800 	.word	0x48000800
 80002e8:	0800109c 	.word	0x0800109c

080002ec <systick_enable>:
	}
}


void systick_enable()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	SysTick->LOAD  = (SystemCoreClock_/1000) - 1;                  /* set reload register */
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <systick_enable+0x30>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <systick_enable+0x34>)
 80002f6:	fba2 2303 	umull	r2, r3, r2, r3
 80002fa:	099b      	lsrs	r3, r3, #6
 80002fc:	4a09      	ldr	r2, [pc, #36]	; (8000324 <systick_enable+0x38>)
 80002fe:	3b01      	subs	r3, #1
 8000300:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000302:	210f      	movs	r1, #15
 8000304:	f04f 30ff 	mov.w	r0, #4294967295
 8000308:	f7ff ff64 	bl	80001d4 <__NVIC_SetPriority>
	SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <systick_enable+0x38>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000312:	4b04      	ldr	r3, [pc, #16]	; (8000324 <systick_enable+0x38>)
 8000314:	2207      	movs	r2, #7
 8000316:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_TICKINT_Msk   |
					 SysTick_CTRL_ENABLE_Msk;
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000000 	.word	0x20000000
 8000320:	10624dd3 	.word	0x10624dd3
 8000324:	e000e010 	.word	0xe000e010

08000328 <SysTick_Handler>:


void SysTick_Handler()
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  mtick++;
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <SysTick_Handler+0x18>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	4a03      	ldr	r2, [pc, #12]	; (8000340 <SysTick_Handler+0x18>)
 8000334:	6013      	str	r3, [r2, #0]
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	20000030 	.word	0x20000030

08000344 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  uint32_t st = get_mtick();
 800034c:	f000 f810 	bl	8000370 <get_mtick>
 8000350:	60f8      	str	r0, [r7, #12]

  while( get_mtick() - st <ms);
 8000352:	bf00      	nop
 8000354:	f000 f80c 	bl	8000370 <get_mtick>
 8000358:	4602      	mov	r2, r0
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	1ad3      	subs	r3, r2, r3
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	429a      	cmp	r2, r3
 8000362:	d8f7      	bhi.n	8000354 <delay_ms+0x10>
}
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <get_mtick>:

uint32_t get_mtick()
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  return mtick;
 8000374:	4b02      	ldr	r3, [pc, #8]	; (8000380 <get_mtick+0x10>)
 8000376:	681b      	ldr	r3, [r3, #0]
}
 8000378:	4618      	mov	r0, r3
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	20000030 	.word	0x20000030

08000384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000384:	f8df d030 	ldr.w	sp, [pc, #48]	; 80003b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000388:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800038a:	e003      	b.n	8000394 <LoopCopyDataInit>

0800038c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800038e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000390:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000392:	3104      	adds	r1, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000394:	480a      	ldr	r0, [pc, #40]	; (80003c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000398:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800039a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800039c:	d3f6      	bcc.n	800038c <CopyDataInit>
	ldr	r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80003a0:	e002      	b.n	80003a8 <LoopFillZerobss>

080003a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003a4:	f842 3b04 	str.w	r3, [r2], #4

080003a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <LoopForever+0x16>)
	cmp	r2, r3
 80003aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003ac:	d3f9      	bcc.n	80003a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    //bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 80003ae:	f000 fe3d 	bl	800102c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003b2:	f7ff ff39 	bl	8000228 <main>

080003b6 <LoopForever>:

LoopForever:
    b LoopForever
 80003b6:	e7fe      	b.n	80003b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003b8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80003bc:	080014a4 	.word	0x080014a4
	ldr	r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003c4:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80003c8:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80003cc:	20000448 	.word	0x20000448

080003d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC1_2_IRQHandler>

080003d2 <Display_DrawBitmap>:
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
}
*/

void Display_DrawBitmap(uint16_t x, uint16_t y, const unsigned char *bitmap, uint16_t w, uint16_t h, Display_COLOR_t color)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b086      	sub	sp, #24
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	60ba      	str	r2, [r7, #8]
 80003da:	461a      	mov	r2, r3
 80003dc:	4603      	mov	r3, r0
 80003de:	81fb      	strh	r3, [r7, #14]
 80003e0:	460b      	mov	r3, r1
 80003e2:	81bb      	strh	r3, [r7, #12]
 80003e4:	4613      	mov	r3, r2
 80003e6:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80003e8:	88fb      	ldrh	r3, [r7, #6]
 80003ea:	3307      	adds	r3, #7
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	da00      	bge.n	80003f2 <Display_DrawBitmap+0x20>
 80003f0:	3307      	adds	r3, #7
 80003f2:	10db      	asrs	r3, r3, #3
 80003f4:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	82bb      	strh	r3, [r7, #20]
 80003fe:	e040      	b.n	8000482 <Display_DrawBitmap+0xb0>
    {
        for(int16_t i=0; i<w; i++)
 8000400:	2300      	movs	r3, #0
 8000402:	827b      	strh	r3, [r7, #18]
 8000404:	e02f      	b.n	8000466 <Display_DrawBitmap+0x94>
        {
            if(i & 7)
 8000406:	8a7b      	ldrh	r3, [r7, #18]
 8000408:	f003 0307 	and.w	r3, r3, #7
 800040c:	2b00      	cmp	r3, #0
 800040e:	d003      	beq.n	8000418 <Display_DrawBitmap+0x46>
            {
               byte <<= 1;
 8000410:	7dfb      	ldrb	r3, [r7, #23]
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	75fb      	strb	r3, [r7, #23]
 8000416:	e012      	b.n	800043e <Display_DrawBitmap+0x6c>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000418:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800041c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000420:	fb03 f202 	mul.w	r2, r3, r2
 8000424:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000428:	2b00      	cmp	r3, #0
 800042a:	da00      	bge.n	800042e <Display_DrawBitmap+0x5c>
 800042c:	3307      	adds	r3, #7
 800042e:	10db      	asrs	r3, r3, #3
 8000430:	b21b      	sxth	r3, r3
 8000432:	4413      	add	r3, r2
 8000434:	461a      	mov	r2, r3
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	4413      	add	r3, r2
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80)
 800043e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000442:	2b00      	cmp	r3, #0
 8000444:	da09      	bge.n	800045a <Display_DrawBitmap+0x88>
            	Display_DrawPixel(x+i, y, color);
 8000446:	89fa      	ldrh	r2, [r7, #14]
 8000448:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800044c:	4413      	add	r3, r2
 800044e:	89b9      	ldrh	r1, [r7, #12]
 8000450:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f937 	bl	80006c8 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800045a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800045e:	b29b      	uxth	r3, r3
 8000460:	3301      	adds	r3, #1
 8000462:	b29b      	uxth	r3, r3
 8000464:	827b      	strh	r3, [r7, #18]
 8000466:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800046a:	88fb      	ldrh	r3, [r7, #6]
 800046c:	429a      	cmp	r2, r3
 800046e:	dbca      	blt.n	8000406 <Display_DrawBitmap+0x34>
    for(int16_t j=0; j<h; j++, y++)
 8000470:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000474:	b29b      	uxth	r3, r3
 8000476:	3301      	adds	r3, #1
 8000478:	b29b      	uxth	r3, r3
 800047a:	82bb      	strh	r3, [r7, #20]
 800047c:	89bb      	ldrh	r3, [r7, #12]
 800047e:	3301      	adds	r3, #1
 8000480:	81bb      	strh	r3, [r7, #12]
 8000482:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000486:	8c3b      	ldrh	r3, [r7, #32]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbb9      	blt.n	8000400 <Display_DrawBitmap+0x2e>
        }
    }
}
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <Display_Init>:




uint8_t Display_Init(void) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0

	//delay
	uint32_t p = 2500;
 800049e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80004a2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004a4:	e002      	b.n	80004ac <Display_Init+0x14>
		p--;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f9      	bne.n	80004a6 <Display_Init+0xe>

	Display_WriteCommand(0xAE); //display off
 80004b2:	2302      	movs	r3, #2
 80004b4:	22ae      	movs	r2, #174	; 0xae
 80004b6:	2100      	movs	r1, #0
 80004b8:	203c      	movs	r0, #60	; 0x3c
 80004ba:	f000 f9f1 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x20); //Set Memory Addressing Mode
 80004be:	2302      	movs	r3, #2
 80004c0:	2220      	movs	r2, #32
 80004c2:	2100      	movs	r1, #0
 80004c4:	203c      	movs	r0, #60	; 0x3c
 80004c6:	f000 f9eb 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80004ca:	2302      	movs	r3, #2
 80004cc:	2210      	movs	r2, #16
 80004ce:	2100      	movs	r1, #0
 80004d0:	203c      	movs	r0, #60	; 0x3c
 80004d2:	f000 f9e5 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80004d6:	2302      	movs	r3, #2
 80004d8:	22b0      	movs	r2, #176	; 0xb0
 80004da:	2100      	movs	r1, #0
 80004dc:	203c      	movs	r0, #60	; 0x3c
 80004de:	f000 f9df 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xC8); //Set COM Output Scan Direction
 80004e2:	2302      	movs	r3, #2
 80004e4:	22c8      	movs	r2, #200	; 0xc8
 80004e6:	2100      	movs	r1, #0
 80004e8:	203c      	movs	r0, #60	; 0x3c
 80004ea:	f000 f9d9 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x00); //---set low column address
 80004ee:	2302      	movs	r3, #2
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	203c      	movs	r0, #60	; 0x3c
 80004f6:	f000 f9d3 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x10); //---set high column address
 80004fa:	2302      	movs	r3, #2
 80004fc:	2210      	movs	r2, #16
 80004fe:	2100      	movs	r1, #0
 8000500:	203c      	movs	r0, #60	; 0x3c
 8000502:	f000 f9cd 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x40); //--set start line address
 8000506:	2302      	movs	r3, #2
 8000508:	2240      	movs	r2, #64	; 0x40
 800050a:	2100      	movs	r1, #0
 800050c:	203c      	movs	r0, #60	; 0x3c
 800050e:	f000 f9c7 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x81); //--set contrast control register
 8000512:	2302      	movs	r3, #2
 8000514:	2281      	movs	r2, #129	; 0x81
 8000516:	2100      	movs	r1, #0
 8000518:	203c      	movs	r0, #60	; 0x3c
 800051a:	f000 f9c1 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xFF);
 800051e:	2302      	movs	r3, #2
 8000520:	22ff      	movs	r2, #255	; 0xff
 8000522:	2100      	movs	r1, #0
 8000524:	203c      	movs	r0, #60	; 0x3c
 8000526:	f000 f9bb 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800052a:	2302      	movs	r3, #2
 800052c:	22a1      	movs	r2, #161	; 0xa1
 800052e:	2100      	movs	r1, #0
 8000530:	203c      	movs	r0, #60	; 0x3c
 8000532:	f000 f9b5 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xA6); //--set normal display
 8000536:	2302      	movs	r3, #2
 8000538:	22a6      	movs	r2, #166	; 0xa6
 800053a:	2100      	movs	r1, #0
 800053c:	203c      	movs	r0, #60	; 0x3c
 800053e:	f000 f9af 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000542:	2302      	movs	r3, #2
 8000544:	22a8      	movs	r2, #168	; 0xa8
 8000546:	2100      	movs	r1, #0
 8000548:	203c      	movs	r0, #60	; 0x3c
 800054a:	f000 f9a9 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x3F); //
 800054e:	2302      	movs	r3, #2
 8000550:	223f      	movs	r2, #63	; 0x3f
 8000552:	2100      	movs	r1, #0
 8000554:	203c      	movs	r0, #60	; 0x3c
 8000556:	f000 f9a3 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800055a:	2302      	movs	r3, #2
 800055c:	22a4      	movs	r2, #164	; 0xa4
 800055e:	2100      	movs	r1, #0
 8000560:	203c      	movs	r0, #60	; 0x3c
 8000562:	f000 f99d 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xD3); //-set display offset
 8000566:	2302      	movs	r3, #2
 8000568:	22d3      	movs	r2, #211	; 0xd3
 800056a:	2100      	movs	r1, #0
 800056c:	203c      	movs	r0, #60	; 0x3c
 800056e:	f000 f997 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x00); //-not offset
 8000572:	2302      	movs	r3, #2
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	203c      	movs	r0, #60	; 0x3c
 800057a:	f000 f991 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800057e:	2302      	movs	r3, #2
 8000580:	22d5      	movs	r2, #213	; 0xd5
 8000582:	2100      	movs	r1, #0
 8000584:	203c      	movs	r0, #60	; 0x3c
 8000586:	f000 f98b 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xF0); //--set divide ratio
 800058a:	2302      	movs	r3, #2
 800058c:	22f0      	movs	r2, #240	; 0xf0
 800058e:	2100      	movs	r1, #0
 8000590:	203c      	movs	r0, #60	; 0x3c
 8000592:	f000 f985 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xD9); //--set pre-charge period
 8000596:	2302      	movs	r3, #2
 8000598:	22d9      	movs	r2, #217	; 0xd9
 800059a:	2100      	movs	r1, #0
 800059c:	203c      	movs	r0, #60	; 0x3c
 800059e:	f000 f97f 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x22); //
 80005a2:	2302      	movs	r3, #2
 80005a4:	2222      	movs	r2, #34	; 0x22
 80005a6:	2100      	movs	r1, #0
 80005a8:	203c      	movs	r0, #60	; 0x3c
 80005aa:	f000 f979 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xDA); //--set Com pins hardware configuration
 80005ae:	2302      	movs	r3, #2
 80005b0:	22da      	movs	r2, #218	; 0xda
 80005b2:	2100      	movs	r1, #0
 80005b4:	203c      	movs	r0, #60	; 0x3c
 80005b6:	f000 f973 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x12);
 80005ba:	2302      	movs	r3, #2
 80005bc:	2212      	movs	r2, #18
 80005be:	2100      	movs	r1, #0
 80005c0:	203c      	movs	r0, #60	; 0x3c
 80005c2:	f000 f96d 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xDB); //--set vcomh
 80005c6:	2302      	movs	r3, #2
 80005c8:	22db      	movs	r2, #219	; 0xdb
 80005ca:	2100      	movs	r1, #0
 80005cc:	203c      	movs	r0, #60	; 0x3c
 80005ce:	f000 f967 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x20); //0x20,0.77xVcc
 80005d2:	2302      	movs	r3, #2
 80005d4:	2220      	movs	r2, #32
 80005d6:	2100      	movs	r1, #0
 80005d8:	203c      	movs	r0, #60	; 0x3c
 80005da:	f000 f961 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x8D); //--set DC-DC enable
 80005de:	2302      	movs	r3, #2
 80005e0:	228d      	movs	r2, #141	; 0x8d
 80005e2:	2100      	movs	r1, #0
 80005e4:	203c      	movs	r0, #60	; 0x3c
 80005e6:	f000 f95b 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0x14); //
 80005ea:	2302      	movs	r3, #2
 80005ec:	2214      	movs	r2, #20
 80005ee:	2100      	movs	r1, #0
 80005f0:	203c      	movs	r0, #60	; 0x3c
 80005f2:	f000 f955 	bl	80008a0 <Display_I2C_Write>
	Display_WriteCommand(0xAF); //--turn on SSD1306 panel
 80005f6:	2302      	movs	r3, #2
 80005f8:	22af      	movs	r2, #175	; 0xaf
 80005fa:	2100      	movs	r1, #0
 80005fc:	203c      	movs	r0, #60	; 0x3c
 80005fe:	f000 f94f 	bl	80008a0 <Display_I2C_Write>


	Display_WriteCommand(Display_DEACTIVATE_SCROLL);
 8000602:	2302      	movs	r3, #2
 8000604:	222e      	movs	r2, #46	; 0x2e
 8000606:	2100      	movs	r1, #0
 8000608:	203c      	movs	r0, #60	; 0x3c
 800060a:	f000 f949 	bl	80008a0 <Display_I2C_Write>
	//Display_Fill(Display_COLOR_WHITE);	// Clear screen
	Display_Fill(Display_COLOR_BLACK);	// Clear screen
 800060e:	2000      	movs	r0, #0
 8000610:	f000 f842 	bl	8000698 <Display_Fill>
	Display_UpdateScreen();		// Update screen
 8000614:	f000 f810 	bl	8000638 <Display_UpdateScreen>

	// Set default values
	Display.CurrentX = 0;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <Display_Init+0x19c>)
 800061a:	2200      	movs	r2, #0
 800061c:	801a      	strh	r2, [r3, #0]
	Display.CurrentY = 0;
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <Display_Init+0x19c>)
 8000620:	2200      	movs	r2, #0
 8000622:	805a      	strh	r2, [r3, #2]

	// Initialized OK
	Display.Initialized = 1;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <Display_Init+0x19c>)
 8000626:	2201      	movs	r2, #1
 8000628:	715a      	strb	r2, [r3, #5]

	// Return OK
	return 1;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000434 	.word	0x20000434

08000638 <Display_UpdateScreen>:

void Display_UpdateScreen(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800063e:	2300      	movs	r3, #0
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	e01f      	b.n	8000684 <Display_UpdateScreen+0x4c>
		Display_WriteCommand(0xB0 + m);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	3b50      	subs	r3, #80	; 0x50
 8000648:	b2da      	uxtb	r2, r3
 800064a:	2302      	movs	r3, #2
 800064c:	2100      	movs	r1, #0
 800064e:	203c      	movs	r0, #60	; 0x3c
 8000650:	f000 f926 	bl	80008a0 <Display_I2C_Write>
		Display_WriteCommand(0x00);
 8000654:	2302      	movs	r3, #2
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	203c      	movs	r0, #60	; 0x3c
 800065c:	f000 f920 	bl	80008a0 <Display_I2C_Write>
		Display_WriteCommand(0x10);
 8000660:	2302      	movs	r3, #2
 8000662:	2210      	movs	r2, #16
 8000664:	2100      	movs	r1, #0
 8000666:	203c      	movs	r0, #60	; 0x3c
 8000668:	f000 f91a 	bl	80008a0 <Display_I2C_Write>

		Display_I2C_WriteMulti(0x3C, 0x40, &Display_Buffer[Display_WIDTH * m], Display_WIDTH);
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	01db      	lsls	r3, r3, #7
 8000670:	4a08      	ldr	r2, [pc, #32]	; (8000694 <Display_UpdateScreen+0x5c>)
 8000672:	441a      	add	r2, r3
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	203c      	movs	r0, #60	; 0x3c
 800067a:	f000 f883 	bl	8000784 <Display_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	3301      	adds	r3, #1
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b07      	cmp	r3, #7
 8000688:	d9dc      	bls.n	8000644 <Display_UpdateScreen+0xc>

	}
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000034 	.word	0x20000034

08000698 <Display_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}
*/

void Display_Fill(Display_COLOR_t color) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	// Set memory, fill a block of memory with value
	memset(Display_Buffer, (color == Display_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(Display_Buffer));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <Display_Fill+0x14>
 80006a8:	2300      	movs	r3, #0
 80006aa:	e000      	b.n	80006ae <Display_Fill+0x16>
 80006ac:	23ff      	movs	r3, #255	; 0xff
 80006ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b2:	4619      	mov	r1, r3
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <Display_Fill+0x2c>)
 80006b6:	f000 fcdd 	bl	8001074 <memset>
  //memset(starting address, value to be filled, number of bytes to be filled)
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000034 	.word	0x20000034

080006c8 <Display_DrawPixel>:


void Display_DrawPixel(uint16_t x, uint16_t y, Display_COLOR_t color) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
 80006d2:	460b      	mov	r3, r1
 80006d4:	80bb      	strh	r3, [r7, #4]
 80006d6:	4613      	mov	r3, r2
 80006d8:	70fb      	strb	r3, [r7, #3]

	if (x >= Display_WIDTH || y >= Display_HEIGHT)
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	2b7f      	cmp	r3, #127	; 0x7f
 80006de:	d848      	bhi.n	8000772 <Display_DrawPixel+0xaa>
 80006e0:	88bb      	ldrh	r3, [r7, #4]
 80006e2:	2b3f      	cmp	r3, #63	; 0x3f
 80006e4:	d845      	bhi.n	8000772 <Display_DrawPixel+0xaa>
		// Error
		return;
	}

	// Check if pixels are inverted
	if (Display.Inverted) {
 80006e6:	4b25      	ldr	r3, [pc, #148]	; (800077c <Display_DrawPixel+0xb4>)
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d006      	beq.n	80006fc <Display_DrawPixel+0x34>
		color = (Display_COLOR_t)!color;
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	bf0c      	ite	eq
 80006f4:	2301      	moveq	r3, #1
 80006f6:	2300      	movne	r3, #0
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	70fb      	strb	r3, [r7, #3]
	}

	// Set color
	if (color == Display_COLOR_WHITE) {
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d11a      	bne.n	8000738 <Display_DrawPixel+0x70>
		Display_Buffer[x + (y / 8) * Display_WIDTH] |= 1 << (y % 8);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	88bb      	ldrh	r3, [r7, #4]
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	b298      	uxth	r0, r3
 800070a:	4603      	mov	r3, r0
 800070c:	01db      	lsls	r3, r3, #7
 800070e:	4413      	add	r3, r2
 8000710:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <Display_DrawPixel+0xb8>)
 8000712:	5cd3      	ldrb	r3, [r2, r3]
 8000714:	b25a      	sxtb	r2, r3
 8000716:	88bb      	ldrh	r3, [r7, #4]
 8000718:	f003 0307 	and.w	r3, r3, #7
 800071c:	2101      	movs	r1, #1
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	b25b      	sxtb	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b259      	sxtb	r1, r3
 8000728:	88fa      	ldrh	r2, [r7, #6]
 800072a:	4603      	mov	r3, r0
 800072c:	01db      	lsls	r3, r3, #7
 800072e:	4413      	add	r3, r2
 8000730:	b2c9      	uxtb	r1, r1
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <Display_DrawPixel+0xb8>)
 8000734:	54d1      	strb	r1, [r2, r3]
 8000736:	e01d      	b.n	8000774 <Display_DrawPixel+0xac>
	} else {
		Display_Buffer[x + (y / 8) * Display_WIDTH] &= ~(1 << (y % 8));
 8000738:	88fa      	ldrh	r2, [r7, #6]
 800073a:	88bb      	ldrh	r3, [r7, #4]
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	b298      	uxth	r0, r3
 8000740:	4603      	mov	r3, r0
 8000742:	01db      	lsls	r3, r3, #7
 8000744:	4413      	add	r3, r2
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <Display_DrawPixel+0xb8>)
 8000748:	5cd3      	ldrb	r3, [r2, r3]
 800074a:	b25a      	sxtb	r2, r3
 800074c:	88bb      	ldrh	r3, [r7, #4]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	2101      	movs	r1, #1
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	b25b      	sxtb	r3, r3
 800075a:	43db      	mvns	r3, r3
 800075c:	b25b      	sxtb	r3, r3
 800075e:	4013      	ands	r3, r2
 8000760:	b259      	sxtb	r1, r3
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	4603      	mov	r3, r0
 8000766:	01db      	lsls	r3, r3, #7
 8000768:	4413      	add	r3, r2
 800076a:	b2c9      	uxtb	r1, r1
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <Display_DrawPixel+0xb8>)
 800076e:	54d1      	strb	r1, [r2, r3]
 8000770:	e000      	b.n	8000774 <Display_DrawPixel+0xac>
		return;
 8000772:	bf00      	nop
	}
}
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20000434 	.word	0x20000434
 8000780:	20000034 	.word	0x20000034

08000784 <Display_I2C_WriteMulti>:
}
*/


void Display_I2C_WriteMulti(uint8_t address, uint8_t dataRegister, uint8_t *data , uint16_t numBytes)	//data is a pointer
{
 8000784:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000788:	b087      	sub	sp, #28
 800078a:	af00      	add	r7, sp, #0
 800078c:	603a      	str	r2, [r7, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	4603      	mov	r3, r0
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	460b      	mov	r3, r1
 8000796:	71bb      	strb	r3, [r7, #6]
 8000798:	4613      	mov	r3, r2
 800079a:	80bb      	strh	r3, [r7, #4]
 800079c:	466b      	mov	r3, sp
 800079e:	4618      	mov	r0, r3
	uint8_t i;
	uint8_t j;
	uint8_t dt[numBytes];		//necessary for multi Write
 80007a0:	88b9      	ldrh	r1, [r7, #4]
 80007a2:	460b      	mov	r3, r1
 80007a4:	3b01      	subs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	b28b      	uxth	r3, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	4698      	mov	r8, r3
 80007ae:	4691      	mov	r9, r2
 80007b0:	f04f 0200 	mov.w	r2, #0
 80007b4:	f04f 0300 	mov.w	r3, #0
 80007b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007c4:	b28b      	uxth	r3, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	461c      	mov	r4, r3
 80007ca:	4615      	mov	r5, r2
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	00eb      	lsls	r3, r5, #3
 80007d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007da:	00e2      	lsls	r2, r4, #3
 80007dc:	460b      	mov	r3, r1
 80007de:	3307      	adds	r3, #7
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	ebad 0d03 	sub.w	sp, sp, r3
 80007e8:	466b      	mov	r3, sp
 80007ea:	3300      	adds	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]

	I2C1->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	005a      	lsls	r2, r3, #1
 80007f2:	88bb      	ldrh	r3, [r7, #4]
 80007f4:	041b      	lsls	r3, r3, #16
 80007f6:	4313      	orrs	r3, r2
 80007f8:	4a28      	ldr	r2, [pc, #160]	; (800089c <Display_I2C_WriteMulti+0x118>)
 80007fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fe:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_START;
 8000800:	4b26      	ldr	r3, [pc, #152]	; (800089c <Display_I2C_WriteMulti+0x118>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	4a25      	ldr	r2, [pc, #148]	; (800089c <Display_I2C_WriteMulti+0x118>)
 8000806:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800080a:	6053      	str	r3, [r2, #4]
	while ((I2C1->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 800080c:	e007      	b.n	800081e <Display_I2C_WriteMulti+0x9a>
		if ((I2C1->ISR & I2C_ISR_NACKF)){
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <Display_I2C_WriteMulti+0x118>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <Display_I2C_WriteMulti+0x9a>
 800081a:	4685      	mov	sp, r0
 800081c:	e038      	b.n	8000890 <Display_I2C_WriteMulti+0x10c>
	while ((I2C1->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <Display_I2C_WriteMulti+0x118>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f1      	beq.n	800080e <Display_I2C_WriteMulti+0x8a>
			return;}}

	dt[0] = dataRegister;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	79ba      	ldrb	r2, [r7, #6]
 800082e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<numBytes; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	75bb      	strb	r3, [r7, #22]
 8000834:	e00a      	b.n	800084c <Display_I2C_WriteMulti+0xc8>
	{
	dt[i+1] = data[i];	//necessary for multi Write
 8000836:	7dbb      	ldrb	r3, [r7, #22]
 8000838:	683a      	ldr	r2, [r7, #0]
 800083a:	441a      	add	r2, r3
 800083c:	7dbb      	ldrb	r3, [r7, #22]
 800083e:	3301      	adds	r3, #1
 8000840:	7811      	ldrb	r1, [r2, #0]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<numBytes; i++)
 8000846:	7dbb      	ldrb	r3, [r7, #22]
 8000848:	3301      	adds	r3, #1
 800084a:	75bb      	strb	r3, [r7, #22]
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b29b      	uxth	r3, r3
 8000850:	88ba      	ldrh	r2, [r7, #4]
 8000852:	429a      	cmp	r2, r3
 8000854:	d8ef      	bhi.n	8000836 <Display_I2C_WriteMulti+0xb2>
	}

	for(j=0; j <= (numBytes-1); j++)
 8000856:	2300      	movs	r3, #0
 8000858:	75fb      	strb	r3, [r7, #23]
 800085a:	e013      	b.n	8000884 <Display_I2C_WriteMulti+0x100>
	{
		I2C1->TXDR = dt[j];
 800085c:	7dfb      	ldrb	r3, [r7, #23]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	5cd2      	ldrb	r2, [r2, r3]
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <Display_I2C_WriteMulti+0x118>)
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000866:	7dfa      	ldrb	r2, [r7, #23]
 8000868:	88bb      	ldrh	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	429a      	cmp	r2, r3
 800086e:	da06      	bge.n	800087e <Display_I2C_WriteMulti+0xfa>
		{
			while((I2C1->ISR & I2C_ISR_TXIS)==0){}		//ggf TXIS mit TXE ergänzen
 8000870:	bf00      	nop
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <Display_I2C_WriteMulti+0x118>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f9      	beq.n	8000872 <Display_I2C_WriteMulti+0xee>
	for(j=0; j <= (numBytes-1); j++)
 800087e:	7dfb      	ldrb	r3, [r7, #23]
 8000880:	3301      	adds	r3, #1
 8000882:	75fb      	strb	r3, [r7, #23]
 8000884:	7dfb      	ldrb	r3, [r7, #23]
 8000886:	b29b      	uxth	r3, r3
 8000888:	88ba      	ldrh	r2, [r7, #4]
 800088a:	429a      	cmp	r2, r3
 800088c:	d8e6      	bhi.n	800085c <Display_I2C_WriteMulti+0xd8>
 800088e:	4685      	mov	sp, r0
		}
	}
}
 8000890:	371c      	adds	r7, #28
 8000892:	46bd      	mov	sp, r7
 8000894:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40005400 	.word	0x40005400

080008a0 <Display_I2C_Write>:


void Display_I2C_Write(uint8_t address, uint8_t dataRegister, uint8_t data , uint8_t numBytes)
{
 80008a0:	b490      	push	{r4, r7}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4604      	mov	r4, r0
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	4623      	mov	r3, r4
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	4603      	mov	r3, r0
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	460b      	mov	r3, r1
 80008b8:	717b      	strb	r3, [r7, #5]
 80008ba:	4613      	mov	r3, r2
 80008bc:	713b      	strb	r3, [r7, #4]
	uint8_t j;
	uint8_t dt[2];

	dt[0] = dataRegister;
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80008c2:	797b      	ldrb	r3, [r7, #5]
 80008c4:	737b      	strb	r3, [r7, #13]

	I2C1->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	005a      	lsls	r2, r3, #1
 80008ca:	793b      	ldrb	r3, [r7, #4]
 80008cc:	041b      	lsls	r3, r3, #16
 80008ce:	4313      	orrs	r3, r2
 80008d0:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <Display_I2C_Write+0xa4>)
 80008d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d6:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_START;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <Display_I2C_Write+0xa4>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <Display_I2C_Write+0xa4>)
 80008de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008e2:	6053      	str	r3, [r2, #4]
	while ((I2C1->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 80008e4:	e005      	b.n	80008f2 <Display_I2C_Write+0x52>
		if ((I2C1->ISR & I2C_ISR_NACKF)){
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <Display_I2C_Write+0xa4>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d123      	bne.n	800093a <Display_I2C_Write+0x9a>
	while ((I2C1->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <Display_I2C_Write+0xa4>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f3      	beq.n	80008e6 <Display_I2C_Write+0x46>
			return;}}

	for(j=0; j <= (numBytes-1); j++)
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
 8000902:	e015      	b.n	8000930 <Display_I2C_Write+0x90>
	{
		I2C1->TXDR = dt[j];
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	3310      	adds	r3, #16
 8000908:	443b      	add	r3, r7
 800090a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <Display_I2C_Write+0xa4>)
 8000910:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	793b      	ldrb	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	429a      	cmp	r2, r3
 800091a:	da06      	bge.n	800092a <Display_I2C_Write+0x8a>
		{
			while((I2C1->ISR & I2C_ISR_TXIS)==0){}
 800091c:	bf00      	nop
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <Display_I2C_Write+0xa4>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0f9      	beq.n	800091e <Display_I2C_Write+0x7e>
	for(j=0; j <= (numBytes-1); j++)
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	793a      	ldrb	r2, [r7, #4]
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8e5      	bhi.n	8000904 <Display_I2C_Write+0x64>
 8000938:	e000      	b.n	800093c <Display_I2C_Write+0x9c>
			return;}}
 800093a:	bf00      	nop
		}
	}
}
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bc90      	pop	{r4, r7}
 8000942:	4770      	bx	lr
 8000944:	40005400 	.word	0x40005400

08000948 <gpio_clock_enable>:
 * After each device reset, all peripheral clocks are disabled (except for the SRAM and FLITF).
Before using a peripheral user has to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.  s.50
 */
void gpio_clock_enable(GPIO_TypeDef * Port)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if(Port == GPIOA)        //  Bit 17 IOPAEN: I/O port A clock enable
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000956:	d106      	bne.n	8000966 <gpio_clock_enable+0x1e>
	{
		RCC->AHBENR |= (1 << GPIOA_CLOCK_ENABLE_BIT) ;
 8000958:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <gpio_clock_enable+0xc0>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a2a      	ldr	r2, [pc, #168]	; (8000a08 <gpio_clock_enable+0xc0>)
 800095e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000962:	6153      	str	r3, [r2, #20]
	}
	*/
	else{

	}
}
 8000964:	e04b      	b.n	80009fe <gpio_clock_enable+0xb6>
	else if(Port == GPIOB)  //    Bit 18 IOPBEN: I/O port B  clock enable
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <gpio_clock_enable+0xc4>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d106      	bne.n	800097c <gpio_clock_enable+0x34>
		RCC->AHBENR |= (1 << GPIOB_CLOCK_ENABLE_BIT) ;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <gpio_clock_enable+0xc0>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <gpio_clock_enable+0xc0>)
 8000974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000978:	6153      	str	r3, [r2, #20]
}
 800097a:	e040      	b.n	80009fe <gpio_clock_enable+0xb6>
	else if(Port == GPIOC)   //  Bit 19 IOPCEN: I/O port C clock enable
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a24      	ldr	r2, [pc, #144]	; (8000a10 <gpio_clock_enable+0xc8>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d106      	bne.n	8000992 <gpio_clock_enable+0x4a>
		RCC->AHBENR |= (1 << GPIOC_CLOCK_ENABLE_BIT) ;
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <gpio_clock_enable+0xc0>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <gpio_clock_enable+0xc0>)
 800098a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800098e:	6153      	str	r3, [r2, #20]
}
 8000990:	e035      	b.n	80009fe <gpio_clock_enable+0xb6>
	else if(Port == GPIOD)    //  Bit 20 IOPDEN: I/O port D clock enable
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <gpio_clock_enable+0xcc>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d106      	bne.n	80009a8 <gpio_clock_enable+0x60>
		RCC->AHBENR |= (1 << GPIOD_CLOCK_ENABLE_BIT) ;
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <gpio_clock_enable+0xc0>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <gpio_clock_enable+0xc0>)
 80009a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009a4:	6153      	str	r3, [r2, #20]
}
 80009a6:	e02a      	b.n	80009fe <gpio_clock_enable+0xb6>
	else if(Port == GPIOE)    //  Bit 21 IOPEEN: I/O port E clock enable
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <gpio_clock_enable+0xd0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d106      	bne.n	80009be <gpio_clock_enable+0x76>
		RCC->AHBENR |= (1 << GPIOE_CLOCK_ENABLE_BIT) ;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <gpio_clock_enable+0xc0>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <gpio_clock_enable+0xc0>)
 80009b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ba:	6153      	str	r3, [r2, #20]
}
 80009bc:	e01f      	b.n	80009fe <gpio_clock_enable+0xb6>
	else if(Port == GPIOF)   //  Bit 22 IOPFEN: I/O port F clock enable
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <gpio_clock_enable+0xd4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d106      	bne.n	80009d4 <gpio_clock_enable+0x8c>
		RCC->AHBENR |= (1 << GPIOF_CLOCK_ENABLE_BIT) ;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <gpio_clock_enable+0xc0>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <gpio_clock_enable+0xc0>)
 80009cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d0:	6153      	str	r3, [r2, #20]
}
 80009d2:	e014      	b.n	80009fe <gpio_clock_enable+0xb6>
	else if(Port == GPIOG)    //  Bit 23 IOPGEN: I/O port G clock enable
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <gpio_clock_enable+0xd8>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d106      	bne.n	80009ea <gpio_clock_enable+0xa2>
		RCC->AHBENR |= (1 << GPIOG_CLOCK_ENABLE_BIT) ;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <gpio_clock_enable+0xc0>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <gpio_clock_enable+0xc0>)
 80009e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009e6:	6153      	str	r3, [r2, #20]
}
 80009e8:	e009      	b.n	80009fe <gpio_clock_enable+0xb6>
	else if(Port == GPIOH)    //  Bit 16 IOPHEN: I/O port H clock enable
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <gpio_clock_enable+0xdc>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d105      	bne.n	80009fe <gpio_clock_enable+0xb6>
		RCC->AHBENR |= (1 << GPIOH_CLOCK_ENABLE_BIT) ;
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <gpio_clock_enable+0xc0>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <gpio_clock_enable+0xc0>)
 80009f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009fc:	6153      	str	r3, [r2, #20]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000400 	.word	0x48000400
 8000a10:	48000800 	.word	0x48000800
 8000a14:	48000c00 	.word	0x48000c00
 8000a18:	48001000 	.word	0x48001000
 8000a1c:	48001400 	.word	0x48001400
 8000a20:	48001800 	.word	0x48001800
 8000a24:	48001c00 	.word	0x48001c00

08000a28 <reset_io>:

void reset_io(GPIO_TypeDef * Port ) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	Port->MODER   = 0x00 ;             // set  pin Mode
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
	Port->OTYPER  = 0x00 ;             //set output type OD/PP
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR = 0x00 ;             //set output speed
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  = 0x00 ;             //set pin Pull
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <gpio_config_pin>:

void gpio_config_pin(GPIO_TypeDef * Port , int Pin , GPIO_Mode_t Mode ,
					   GPIO_Speed_t speed ,GPIO_Pull_t pull, GPIO_out_type_t otype)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b085      	sub	sp, #20
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	461a      	mov	r2, r3
 8000a60:	460b      	mov	r3, r1
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	4613      	mov	r3, r2
 8000a66:	71bb      	strb	r3, [r7, #6]
	Port->MODER   |= (Mode  << 2 * Pin) ; // set  pin Mode
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	79f9      	ldrb	r1, [r7, #7]
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	0052      	lsls	r2, r2, #1
 8000a72:	fa01 f202 	lsl.w	r2, r1, r2
 8000a76:	431a      	orrs	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	601a      	str	r2, [r3, #0]
	Port->OTYPER  |= (otype << Pin)     ; //set output type OD/PP
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	7f39      	ldrb	r1, [r7, #28]
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	fa01 f202 	lsl.w	r2, r1, r2
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR |= (speed << 2 * Pin) ; //set output speed
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	79b9      	ldrb	r1, [r7, #6]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	0052      	lsls	r2, r2, #1
 8000a98:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  |= (pull  << 2 * Pin) ; //set pin Pull
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	7e39      	ldrb	r1, [r7, #24]
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	0052      	lsls	r2, r2, #1
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	60da      	str	r2, [r3, #12]
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <gpio_set_pinState>:

void gpio_set_pinState(GPIO_TypeDef * Port , int Pin , Pin_State State)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	4613      	mov	r3, r2
 8000acc:	71fb      	strb	r3, [r7, #7]
	//assert pin < 16
	if(State == HIGH)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d109      	bne.n	8000ae8 <gpio_set_pinState+0x28>
	{
		Port->ODR |= (1 << Pin) ;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	615a      	str	r2, [r3, #20]
	}
	else {
		Port->ODR &= ~(1 << Pin) ;
	}
}
 8000ae6:	e009      	b.n	8000afc <gpio_set_pinState+0x3c>
		Port->ODR &= ~(1 << Pin) ;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	2101      	movs	r1, #1
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	fa01 f202 	lsl.w	r2, r1, r2
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	401a      	ands	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	615a      	str	r2, [r3, #20]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
	...

08000b08 <I2C_Init>:

/*
 * TESTED
 */
void I2C_Init(I2C_TypeDef * i2c)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]


 	 if( i2c == I2C1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a6e      	ldr	r2, [pc, #440]	; (8000ccc <I2C_Init+0x1c4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d118      	bne.n	8000b4a <I2C_Init+0x42>
 	 {
 		// PB6  I2C1_SCL, PB7   I2C1_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000b18:	4b6d      	ldr	r3, [pc, #436]	; (8000cd0 <I2C_Init+0x1c8>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	4a6c      	ldr	r2, [pc, #432]	; (8000cd0 <I2C_Init+0x1c8>)
 8000b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b22:	6153      	str	r3, [r2, #20]
 		GPIOB->MODER |= (0b10 << GPIO_MODER_MODER6_Pos) |
 8000b24:	4b6b      	ldr	r3, [pc, #428]	; (8000cd4 <I2C_Init+0x1cc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a6a      	ldr	r2, [pc, #424]	; (8000cd4 <I2C_Init+0x1cc>)
 8000b2a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000b2e:	6013      	str	r3, [r2, #0]
		   (0b10 << GPIO_MODER_MODER7_Pos); // PB6, PB7: Alternate function
		 GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFRL6_Pos) |
 8000b30:	4b68      	ldr	r3, [pc, #416]	; (8000cd4 <I2C_Init+0x1cc>)
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	4a67      	ldr	r2, [pc, #412]	; (8000cd4 <I2C_Init+0x1cc>)
 8000b36:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000b3a:	6213      	str	r3, [r2, #32]
		   (4 << GPIO_AFRL_AFRL7_Pos);         // 0100: AF4

		 RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //i2c clock enable
 8000b3c:	4b64      	ldr	r3, [pc, #400]	; (8000cd0 <I2C_Init+0x1c8>)
 8000b3e:	69db      	ldr	r3, [r3, #28]
 8000b40:	4a63      	ldr	r2, [pc, #396]	; (8000cd0 <I2C_Init+0x1c8>)
 8000b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b46:	61d3      	str	r3, [r2, #28]
 8000b48:	e0ac      	b.n	8000ca4 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C2 )
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a62      	ldr	r2, [pc, #392]	; (8000cd8 <I2C_Init+0x1d0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d14c      	bne.n	8000bec <I2C_Init+0xe4>
 	 {
 		//PA9 I2C2_SCL , PA10 I2C2_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000b52:	4b5f      	ldr	r3, [pc, #380]	; (8000cd0 <I2C_Init+0x1c8>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a5e      	ldr	r2, [pc, #376]	; (8000cd0 <I2C_Init+0x1c8>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6153      	str	r3, [r2, #20]
 		GPIOA->MODER |= (2 << 18) ;// PA9 10: Alternate function mode
 8000b5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b6c:	6013      	str	r3, [r2, #0]
 		GPIOA->MODER |= (2 << 20) ;//PA10 10: Alternate function mode
 8000b6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7c:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER |= (1 << 9 ) ;//PA9  GPIO port output type register 1: Output open-drain
 8000b7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8c:	6053      	str	r3, [r2, #4]
 		GPIOA->OTYPER |= (1 << 10) ;//PA10 Oepn Drain
 8000b8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9c:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 18) | (3 << 20) ; //PA9,PA10  GPIO port output speed register 11: High speed
 8000b9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ba8:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8000bac:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR  |= (1<<18) | (1<<20) ;//PA9 ,PA10 GPIO port pull-up/pull-down register 01: Pull-up
 8000bae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bb8:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8000bbc:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1] |= ( 4 << 4 );   //select GPIO alternate function high register  PA9  0100: AF4
 8000bbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bcc:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOA->AFR[1] |= (4 << 8);   //select GPIO alternate function high register  PA10   0100: AF4
 8000bce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bdc:	6253      	str	r3, [r2, #36]	; 0x24

 		RCC->APB1ENR |=RCC_APB1ENR_I2C2EN ; //i2c clock enable
 8000bde:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <I2C_Init+0x1c8>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a3b      	ldr	r2, [pc, #236]	; (8000cd0 <I2C_Init+0x1c8>)
 8000be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	e05b      	b.n	8000ca4 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C3 )
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3b      	ldr	r2, [pc, #236]	; (8000cdc <I2C_Init+0x1d4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d157      	bne.n	8000ca4 <I2C_Init+0x19c>
 	 {
 		//PA8 I2C3_SCL , PB5 I2C3_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000bf4:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <I2C_Init+0x1c8>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4a35      	ldr	r2, [pc, #212]	; (8000cd0 <I2C_Init+0x1c8>)
 8000bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfe:	6153      	str	r3, [r2, #20]
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000c00:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <I2C_Init+0x1c8>)
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	4a32      	ldr	r2, [pc, #200]	; (8000cd0 <I2C_Init+0x1c8>)
 8000c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0a:	6153      	str	r3, [r2, #20]

 		GPIOA->MODER   |= (2 << 16) ;// PA8 ALF
 8000c0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1a:	6013      	str	r3, [r2, #0]
 		GPIOB->MODER   |= (2 << 10) ;//PB5 ALF
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <I2C_Init+0x1cc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <I2C_Init+0x1cc>)
 8000c22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c26:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER  |= (1 << 8 ) ;//PA8 Open Drain
 8000c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6053      	str	r3, [r2, #4]
 		GPIOB->OTYPER  |= (1 << 5 ) ;//PB5 Oepn Drain
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <I2C_Init+0x1cc>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	4a25      	ldr	r2, [pc, #148]	; (8000cd4 <I2C_Init+0x1cc>)
 8000c3e:	f043 0320 	orr.w	r3, r3, #32
 8000c42:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 16) ;//PA8 High Speed
 8000c44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c4e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000c52:	6093      	str	r3, [r2, #8]
 		GPIOB->OSPEEDR |= (3 << 10) ; //PB5 High Speed
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <I2C_Init+0x1cc>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <I2C_Init+0x1cc>)
 8000c5a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000c5e:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR   |= (1 << 16) ;//PA8 PULL up
 8000c60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6e:	60d3      	str	r3, [r2, #12]
 		GPIOB->PUPDR   |= (1 << 10) ;//PB5 PULL up
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <I2C_Init+0x1cc>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <I2C_Init+0x1cc>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7a:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1]  |= ( 3 << 0 );//select Alf PA8    0011: AF3
 8000c7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c86:	f043 0303 	orr.w	r3, r3, #3
 8000c8a:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOB->AFR[0]  |= (8 << 20) ;//select Alf PB5     1000: AF8
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <I2C_Init+0x1cc>)
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <I2C_Init+0x1cc>)
 8000c92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c96:	6213      	str	r3, [r2, #32]

 		RCC->APB1ENR |=RCC_APB1ENR_I2C3EN ; //i2c clock enable
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <I2C_Init+0x1c8>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <I2C_Init+0x1c8>)
 8000c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ca2:	61d3      	str	r3, [r2, #28]
	 * Enabling and disabling the peripheral
	 * The I2C peripheral clock must be configured and enabled in the clock controller.
	 * Then the I2C can be enabled by setting the PE bit in the I2C_CR1 register.
	 * When the I2C is disabled (PE=0), the I2C performs a software reset.
	 */
	 i2c->CR1 &= ~I2C_CR1_PE;                // disable the i2c peripheral clock  (clear PE bit in I2C_CR1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f023 0201 	bic.w	r2, r3, #1
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	601a      	str	r2, [r3, #0]
	/*
	 * I2C timings
	 * The timings must be configured in order to guarantee a correct data hold and setup time,
	 * used in master and slave modes. This is done by programming the PRESC,SCLDEL and SDADEL bits in the I2C_TIMINGR register.
	 */
	 i2c->TIMINGR = (1 << I2C_TIMINGR_PRESC_Pos) | // Standard mode 100 kHz @ 8 MHz (page 849/1141)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <I2C_Init+0x1d8>)
 8000cb4:	611a      	str	r2, [r3, #16]
	             (0x13 << I2C_TIMINGR_SCLL_Pos)  |
	             (0xF << I2C_TIMINGR_SCLH_Pos)   |
	             (0x2 << I2C_TIMINGR_SDADEL_Pos) |
	             (0x4 << I2C_TIMINGR_SCLDEL_Pos);

	 i2c->CR1 |= I2C_CR1_PE;// enable the i2c peripheral clock (set PE bit inI2C_CR1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f043 0201 	orr.w	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]

}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	40005800 	.word	0x40005800
 8000cdc:	40007800 	.word	0x40007800
 8000ce0:	10420f13 	.word	0x10420f13

08000ce4 <keypad_init>:

/**
 * config keypad pins
 */
void keypad_init(GPIO_TypeDef * port , int s_pin)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
	keypad_port = port   ;
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <keypad_init+0x2c>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6013      	str	r3, [r2, #0]
	start_pin   = s_pin  ;
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <keypad_init+0x30>)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	6013      	str	r3, [r2, #0]
	gpio_clock_enable(port) ;
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fe24 	bl	8000948 <gpio_clock_enable>
	keypad_config_key_direction(port , s_pin) ;
 8000d00:	6839      	ldr	r1, [r7, #0]
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f874 	bl	8000df0 <keypad_config_key_direction>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000043c 	.word	0x2000043c
 8000d14:	20000440 	.word	0x20000440

08000d18 <keypad_inverse_pin_direction>:

static void keypad_inverse_pin_direction( GPIO_TypeDef * port , int s_pin)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fe80 	bl	8000a28 <reset_io>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R1     0
 8000d28:	6839      	ldr	r1, [r7, #0]
 8000d2a:	1c4b      	adds	r3, r1, #1
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	2302      	movs	r3, #2
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fe89 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R2     1
 8000d40:	6839      	ldr	r1, [r7, #0]
 8000d42:	1c4b      	adds	r3, r1, #1
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	2200      	movs	r2, #0
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fe7d 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R3     0
 8000d58:	6839      	ldr	r1, [r7, #0]
 8000d5a:	1c4b      	adds	r3, r1, #1
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	2302      	movs	r3, #2
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2300      	movs	r3, #0
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff fe71 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN  , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R4     0
 8000d70:	6839      	ldr	r1, [r7, #0]
 8000d72:	1c4b      	adds	r3, r1, #1
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	2300      	movs	r3, #0
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2200      	movs	r2, #0
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fe65 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C1     1
 8000d88:	6839      	ldr	r1, [r7, #0]
 8000d8a:	1c4b      	adds	r3, r1, #1
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	2300      	movs	r3, #0
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	2201      	movs	r2, #1
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fe59 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C2     1
 8000da0:	6839      	ldr	r1, [r7, #0]
 8000da2:	1c4b      	adds	r3, r1, #1
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	2300      	movs	r3, #0
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	2201      	movs	r2, #1
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fe4d 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C3     1
 8000db8:	6839      	ldr	r1, [r7, #0]
 8000dba:	1c4b      	adds	r3, r1, #1
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	2201      	movs	r2, #1
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fe41 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C4     1
 8000dd0:	6839      	ldr	r1, [r7, #0]
 8000dd2:	1c4b      	adds	r3, r1, #1
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	2201      	movs	r2, #1
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fe35 	bl	8000a52 <gpio_config_pin>

}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <keypad_config_key_direction>:

static void keypad_config_key_direction( GPIO_TypeDef * port , int s_pin)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fe14 	bl	8000a28 <reset_io>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//R1  0
 8000e00:	6839      	ldr	r1, [r7, #0]
 8000e02:	1c4b      	adds	r3, r1, #1
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	2300      	movs	r3, #0
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2201      	movs	r2, #1
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fe1d 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//R2  0
 8000e18:	6839      	ldr	r1, [r7, #0]
 8000e1a:	1c4b      	adds	r3, r1, #1
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	2300      	movs	r3, #0
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	2201      	movs	r2, #1
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fe11 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//R3  0
 8000e30:	6839      	ldr	r1, [r7, #0]
 8000e32:	1c4b      	adds	r3, r1, #1
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2201      	movs	r2, #1
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fe05 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//R4   0
 8000e48:	6839      	ldr	r1, [r7, #0]
 8000e4a:	1c4b      	adds	r3, r1, #1
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	2300      	movs	r3, #0
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2300      	movs	r3, #0
 8000e58:	2201      	movs	r2, #1
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fdf9 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C1  1
 8000e60:	6839      	ldr	r1, [r7, #0]
 8000e62:	1c4b      	adds	r3, r1, #1
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	2300      	movs	r3, #0
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2200      	movs	r2, #0
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fded 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C2  1
 8000e78:	6839      	ldr	r1, [r7, #0]
 8000e7a:	1c4b      	adds	r3, r1, #1
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	2301      	movs	r3, #1
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2300      	movs	r3, #0
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fde1 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C3  0
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	1c4b      	adds	r3, r1, #1
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	2300      	movs	r3, #0
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fdd5 	bl	8000a52 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C4  1
 8000ea8:	6839      	ldr	r1, [r7, #0]
 8000eaa:	1c4b      	adds	r3, r1, #1
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fdc9 	bl	8000a52 <gpio_config_pin>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <keypad_get_pressedkey>:

/**
 * return the pressedkey other wise 0
 */
char keypad_get_pressedkey()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0

	uint16_t porte = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	817b      	strh	r3, [r7, #10]
	uint8_t  eidr  = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	727b      	strb	r3, [r7, #9]
	uint8_t  ch    = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	723b      	strb	r3, [r7, #8]
	char ret = 0 ;
 8000eda:	2300      	movs	r3, #0
 8000edc:	75fb      	strb	r3, [r7, #23]

	porte = GPIOC->IDR ;
 8000ede:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <keypad_get_pressedkey+0x150>)
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	817b      	strh	r3, [r7, #10]
	 * 0b 0000 0111 0100 0000   //7
	 *    &<<
	 *    0000 0000 0111 1111
	 *
	 */
	switch(state)
 8000ee4:	4b4d      	ldr	r3, [pc, #308]	; (800101c <keypad_get_pressedkey+0x154>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	f000 8087 	beq.w	8000ffc <keypad_get_pressedkey+0x134>
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	f300 8088 	bgt.w	8001004 <keypad_get_pressedkey+0x13c>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <keypad_get_pressedkey+0x36>
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d072      	beq.n	8000fe2 <keypad_get_pressedkey+0x11a>

				state = State_free ;
				break ;
			}
		default :
			break ;
 8000efc:	e082      	b.n	8001004 <keypad_get_pressedkey+0x13c>
				eidr = (porte >> start_pin) ;//  & 0x0000000007f ;  //
 8000efe:	897a      	ldrh	r2, [r7, #10]
 8000f00:	4b47      	ldr	r3, [pc, #284]	; (8001020 <keypad_get_pressedkey+0x158>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	fa42 f303 	asr.w	r3, r2, r3
 8000f08:	727b      	strb	r3, [r7, #9]
				if(eidr != DEFAULT_KEYPAD_PORT_INP)
 8000f0a:	7a7b      	ldrb	r3, [r7, #9]
 8000f0c:	2bf0      	cmp	r3, #240	; 0xf0
 8000f0e:	d07b      	beq.n	8001008 <keypad_get_pressedkey+0x140>
					ch = ~eidr;
 8000f10:	7a7b      	ldrb	r3, [r7, #9]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	723b      	strb	r3, [r7, #8]
					ch = ch & DEFAULT_KEYPAD_PORT_INP;  //the bit that changed
 8000f16:	7a3b      	ldrb	r3, [r7, #8]
 8000f18:	f023 030f 	bic.w	r3, r3, #15
 8000f1c:	723b      	strb	r3, [r7, #8]
					keypad_inverse_pin_direction(keypad_port ,start_pin ) ;
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <keypad_get_pressedkey+0x15c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a3f      	ldr	r2, [pc, #252]	; (8001020 <keypad_get_pressedkey+0x158>)
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fef5 	bl	8000d18 <keypad_inverse_pin_direction>
					uint16_t out = (ch << start_pin) ;
 8000f2e:	7a3a      	ldrb	r2, [r7, #8]
 8000f30:	4b3b      	ldr	r3, [pc, #236]	; (8001020 <keypad_get_pressedkey+0x158>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	80fb      	strh	r3, [r7, #6]
					keypad_port->ODR = out ;
 8000f3a:	4b3a      	ldr	r3, [pc, #232]	; (8001024 <keypad_get_pressedkey+0x15c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	615a      	str	r2, [r3, #20]
					delay_ms(1) ;
 8000f42:	2001      	movs	r0, #1
 8000f44:	f7ff f9fe 	bl	8000344 <delay_ms>
					porte = keypad_port->IDR ;
 8000f48:	4b36      	ldr	r3, [pc, #216]	; (8001024 <keypad_get_pressedkey+0x15c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	817b      	strh	r3, [r7, #10]
					eidr = (porte >> start_pin) & 0xff ;
 8000f50:	897a      	ldrh	r2, [r7, #10]
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <keypad_get_pressedkey+0x158>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	fa42 f303 	asr.w	r3, r2, r3
 8000f5a:	727b      	strb	r3, [r7, #9]
					int col = 0 ;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
					for(col = 0 ; col <4 ; col++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	e00d      	b.n	8000f82 <keypad_get_pressedkey+0xba>
						if(   (((eidr & 0xf0) >> 4) &  (1<<col)) != 0 )
 8000f66:	7a7b      	ldrb	r3, [r7, #9]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	fa42 f303 	asr.w	r3, r2, r3
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d106      	bne.n	8000f8a <keypad_get_pressedkey+0xc2>
					for(col = 0 ; col <4 ; col++)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	ddee      	ble.n	8000f66 <keypad_get_pressedkey+0x9e>
 8000f88:	e000      	b.n	8000f8c <keypad_get_pressedkey+0xc4>
							break ;
 8000f8a:	bf00      	nop
					int row = 0 ;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
					for(row = 0 ; row <4 ; row++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e00c      	b.n	8000fb0 <keypad_get_pressedkey+0xe8>
						if( ((eidr & 0x0f) & (1<<row)) != 0)
 8000f96:	7a7b      	ldrb	r3, [r7, #9]
 8000f98:	f003 020f 	and.w	r2, r3, #15
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	fa42 f303 	asr.w	r3, r2, r3
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <keypad_get_pressedkey+0xf0>
					for(row = 0 ; row <4 ; row++)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3301      	adds	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	ddef      	ble.n	8000f96 <keypad_get_pressedkey+0xce>
 8000fb6:	e000      	b.n	8000fba <keypad_get_pressedkey+0xf2>
							break ;
 8000fb8:	bf00      	nop
					ret = keys[row][col] ;
 8000fba:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <keypad_get_pressedkey+0x160>)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	441a      	add	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	75fb      	strb	r3, [r7, #23]
					keypad_config_key_direction(keypad_port ,start_pin ) ;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <keypad_get_pressedkey+0x15c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <keypad_get_pressedkey+0x158>)
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff0b 	bl	8000df0 <keypad_config_key_direction>
					state = State_key_pressed ;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <keypad_get_pressedkey+0x154>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
				break ;
 8000fe0:	e012      	b.n	8001008 <keypad_get_pressedkey+0x140>
				eidr = (porte >> start_pin) & 0xff ;
 8000fe2:	897a      	ldrh	r2, [r7, #10]
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <keypad_get_pressedkey+0x158>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	fa42 f303 	asr.w	r3, r2, r3
 8000fec:	727b      	strb	r3, [r7, #9]
				if(eidr == DEFAULT_KEYPAD_PORT_INP)
 8000fee:	7a7b      	ldrb	r3, [r7, #9]
 8000ff0:	2bf0      	cmp	r3, #240	; 0xf0
 8000ff2:	d10b      	bne.n	800100c <keypad_get_pressedkey+0x144>
					state = State_key_released ;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <keypad_get_pressedkey+0x154>)
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	701a      	strb	r2, [r3, #0]
				break ;
 8000ffa:	e007      	b.n	800100c <keypad_get_pressedkey+0x144>
				state = State_free ;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <keypad_get_pressedkey+0x154>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
				break ;
 8001002:	e004      	b.n	800100e <keypad_get_pressedkey+0x146>
			break ;
 8001004:	bf00      	nop
 8001006:	e002      	b.n	800100e <keypad_get_pressedkey+0x146>
				break ;
 8001008:	bf00      	nop
 800100a:	e000      	b.n	800100e <keypad_get_pressedkey+0x146>
				break ;
 800100c:	bf00      	nop

	}


	return ret ;
 800100e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	48000800 	.word	0x48000800
 800101c:	20000444 	.word	0x20000444
 8001020:	20000440 	.word	0x20000440
 8001024:	2000043c 	.word	0x2000043c
 8001028:	20000004 	.word	0x20000004

0800102c <__libc_init_array>:
 800102c:	b570      	push	{r4, r5, r6, lr}
 800102e:	4d0d      	ldr	r5, [pc, #52]	; (8001064 <__libc_init_array+0x38>)
 8001030:	4c0d      	ldr	r4, [pc, #52]	; (8001068 <__libc_init_array+0x3c>)
 8001032:	1b64      	subs	r4, r4, r5
 8001034:	10a4      	asrs	r4, r4, #2
 8001036:	2600      	movs	r6, #0
 8001038:	42a6      	cmp	r6, r4
 800103a:	d109      	bne.n	8001050 <__libc_init_array+0x24>
 800103c:	4d0b      	ldr	r5, [pc, #44]	; (800106c <__libc_init_array+0x40>)
 800103e:	4c0c      	ldr	r4, [pc, #48]	; (8001070 <__libc_init_array+0x44>)
 8001040:	f000 f820 	bl	8001084 <_init>
 8001044:	1b64      	subs	r4, r4, r5
 8001046:	10a4      	asrs	r4, r4, #2
 8001048:	2600      	movs	r6, #0
 800104a:	42a6      	cmp	r6, r4
 800104c:	d105      	bne.n	800105a <__libc_init_array+0x2e>
 800104e:	bd70      	pop	{r4, r5, r6, pc}
 8001050:	f855 3b04 	ldr.w	r3, [r5], #4
 8001054:	4798      	blx	r3
 8001056:	3601      	adds	r6, #1
 8001058:	e7ee      	b.n	8001038 <__libc_init_array+0xc>
 800105a:	f855 3b04 	ldr.w	r3, [r5], #4
 800105e:	4798      	blx	r3
 8001060:	3601      	adds	r6, #1
 8001062:	e7f2      	b.n	800104a <__libc_init_array+0x1e>
 8001064:	0800149c 	.word	0x0800149c
 8001068:	0800149c 	.word	0x0800149c
 800106c:	0800149c 	.word	0x0800149c
 8001070:	080014a0 	.word	0x080014a0

08001074 <memset>:
 8001074:	4402      	add	r2, r0
 8001076:	4603      	mov	r3, r0
 8001078:	4293      	cmp	r3, r2
 800107a:	d100      	bne.n	800107e <memset+0xa>
 800107c:	4770      	bx	lr
 800107e:	f803 1b01 	strb.w	r1, [r3], #1
 8001082:	e7f9      	b.n	8001078 <memset+0x4>

08001084 <_init>:
 8001084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001086:	bf00      	nop
 8001088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800108a:	bc08      	pop	{r3}
 800108c:	469e      	mov	lr, r3
 800108e:	4770      	bx	lr

08001090 <_fini>:
 8001090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001092:	bf00      	nop
 8001094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001096:	bc08      	pop	{r3}
 8001098:	469e      	mov	lr, r3
 800109a:	4770      	bx	lr
