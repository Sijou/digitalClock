
WiSe2223_GruppeK3_s_Projektaufgabe_Digitaluhr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002064  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080031d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          00000c6c  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000cec  20000cec  00020080  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002d24  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000c37  00000000  00000000  00022dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000248  00000000  00000000  00023a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000001c8  00000000  00000000  00023c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00018f53  00000000  00000000  00023e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000036cf  00000000  00000000  0003cd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00088066  00000000  00000000  0004043a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c84a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000b98  00000000  00000000  000c84f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080021ec 	.word	0x080021ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080021ec 	.word	0x080021ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	db0a      	blt.n	80002aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	490c      	ldr	r1, [pc, #48]	; (80002cc <__NVIC_SetPriority+0x4c>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	0112      	lsls	r2, r2, #4
 80002a0:	b2d2      	uxtb	r2, r2
 80002a2:	440b      	add	r3, r1
 80002a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a8:	e00a      	b.n	80002c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4908      	ldr	r1, [pc, #32]	; (80002d0 <__NVIC_SetPriority+0x50>)
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	3b04      	subs	r3, #4
 80002b8:	0112      	lsls	r2, r2, #4
 80002ba:	b2d2      	uxtb	r2, r2
 80002bc:	440b      	add	r3, r1
 80002be:	761a      	strb	r2, [r3, #24]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e100 	.word	0xe000e100
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <main>:
OLED_t lcd1 ;
OLED_t lcd2 ;
OLED_t lcd3 ;

int main()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b09c      	sub	sp, #112	; 0x70
 80002d8:	af04      	add	r7, sp, #16

  	while ((RCC->CR & 2) == 0);  // RCC Clock control register (RCC_CR) , wait until HSI is Ready
 80002da:	bf00      	nop
 80002dc:	4b81      	ldr	r3, [pc, #516]	; (80004e4 <main+0x210>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f003 0302 	and.w	r3, r3, #2
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0f9      	beq.n	80002dc <main+0x8>

	systick_enable() ;
 80002e8:	f000 f916 	bl	8000518 <systick_enable>
    //Clock configuration register (RCC_CFGR)
	RCC->CFGR &= ~(1<<7)  ; //reset HPRE4 The AHB clock frequency == sys clk
 80002ec:	4b7d      	ldr	r3, [pc, #500]	; (80004e4 <main+0x210>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	4a7c      	ldr	r2, [pc, #496]	; (80004e4 <main+0x210>)
 80002f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002f6:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<12) ; // APB1 clock no division
 80002f8:	4b7a      	ldr	r3, [pc, #488]	; (80004e4 <main+0x210>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a79      	ldr	r2, [pc, #484]	; (80004e4 <main+0x210>)
 80002fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000302:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<15) ; // APB2 clock no division
 8000304:	4b77      	ldr	r3, [pc, #476]	; (80004e4 <main+0x210>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4a76      	ldr	r2, [pc, #472]	; (80004e4 <main+0x210>)
 800030a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800030e:	6053      	str	r3, [r2, #4]

	gpio_clock_enable(GPIOA) ;
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f000 fd3a 	bl	8000d8c <gpio_clock_enable>

	gpio_config_pin(GPIOA,5,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 8000318:	2300      	movs	r3, #0
 800031a:	9301      	str	r3, [sp, #4]
 800031c:	2300      	movs	r3, #0
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	2300      	movs	r3, #0
 8000322:	2201      	movs	r2, #1
 8000324:	2105      	movs	r1, #5
 8000326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032a:	f000 fdb4 	bl	8000e96 <gpio_config_pin>

	gpio_set_pinState(GPIOA , 5 , LOW) ;
 800032e:	2201      	movs	r2, #1
 8000330:	2105      	movs	r1, #5
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f000 fde5 	bl	8000f04 <gpio_set_pinState>

	 data = search_address(I2C1 , buff) ;

#endif

	 lcd1.dev = I2C1 ;
 800033a:	4b6b      	ldr	r3, [pc, #428]	; (80004e8 <main+0x214>)
 800033c:	4a6b      	ldr	r2, [pc, #428]	; (80004ec <main+0x218>)
 800033e:	601a      	str	r2, [r3, #0]
	 lcd2.dev = I2C2 ;
 8000340:	4b6b      	ldr	r3, [pc, #428]	; (80004f0 <main+0x21c>)
 8000342:	4a6c      	ldr	r2, [pc, #432]	; (80004f4 <main+0x220>)
 8000344:	601a      	str	r2, [r3, #0]
	 lcd3.dev = I2C3 ;
 8000346:	4b6c      	ldr	r3, [pc, #432]	; (80004f8 <main+0x224>)
 8000348:	4a6c      	ldr	r2, [pc, #432]	; (80004fc <main+0x228>)
 800034a:	601a      	str	r2, [r3, #0]

	 I2C_Init(I2C1) ;
 800034c:	4867      	ldr	r0, [pc, #412]	; (80004ec <main+0x218>)
 800034e:	f000 fdfd 	bl	8000f4c <I2C_Init>
	 I2C_Init(I2C2) ;
 8000352:	4868      	ldr	r0, [pc, #416]	; (80004f4 <main+0x220>)
 8000354:	f000 fdfa 	bl	8000f4c <I2C_Init>
	 I2C_Init(I2C3) ;
 8000358:	4868      	ldr	r0, [pc, #416]	; (80004fc <main+0x228>)
 800035a:	f000 fdf7 	bl	8000f4c <I2C_Init>

	 rtc_init(I2C1);
 800035e:	4863      	ldr	r0, [pc, #396]	; (80004ec <main+0x218>)
 8000360:	f001 f93c 	bl	80015dc <rtc_init>
	// I2C_Write(I2C1 , 0x68 , buff1 , 1) ;
	// I2C_Read(I2C1 , 0x68 , buff1 , 1) ;



	 Display_Init(&lcd3);	//Configure Display
 8000364:	4864      	ldr	r0, [pc, #400]	; (80004f8 <main+0x224>)
 8000366:	f000 f9aa 	bl	80006be <Display_Init>
	 Display_Init(&lcd2);	//Configure Display
 800036a:	4861      	ldr	r0, [pc, #388]	; (80004f0 <main+0x21c>)
 800036c:	f000 f9a7 	bl	80006be <Display_Init>
	 Display_Init(&lcd1);	//Configure Display
 8000370:	485d      	ldr	r0, [pc, #372]	; (80004e8 <main+0x214>)
 8000372:	f000 f9a4 	bl	80006be <Display_Init>
	 keypad_init(GPIOC , 0) ;
 8000376:	2100      	movs	r1, #0
 8000378:	4861      	ldr	r0, [pc, #388]	; (8000500 <main+0x22c>)
 800037a:	f000 ff6f 	bl	800125c <keypad_init>
	 //Example: print a picture on screen
	Display_Fill(&lcd1, Display_COLOR_BLACK );	//the entire Display is white (written to RAM)
 800037e:	2100      	movs	r1, #0
 8000380:	4859      	ldr	r0, [pc, #356]	; (80004e8 <main+0x214>)
 8000382:	f000 fae2 	bl	800094a <Display_Fill>
	Display_DrawBitmap(&lcd1 ,0, 0, alarm_logo, 128, 64, Display_COLOR_WHITE);	//data of picture into RAM	(available pictures: helix & looping)
 8000386:	2301      	movs	r3, #1
 8000388:	9302      	str	r3, [sp, #8]
 800038a:	2340      	movs	r3, #64	; 0x40
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	4b5c      	ldr	r3, [pc, #368]	; (8000504 <main+0x230>)
 8000394:	2200      	movs	r2, #0
 8000396:	2100      	movs	r1, #0
 8000398:	4853      	ldr	r0, [pc, #332]	; (80004e8 <main+0x214>)
 800039a:	f000 f930 	bl	80005fe <Display_DrawBitmap>
	Display_UpdateScreen(&lcd1);
 800039e:	4852      	ldr	r0, [pc, #328]	; (80004e8 <main+0x214>)
 80003a0:	f000 fa9b 	bl	80008da <Display_UpdateScreen>

	Display_Fill(&lcd2, Display_COLOR_WHITE );	//the entire Display is white (written to RAM)
 80003a4:	2101      	movs	r1, #1
 80003a6:	4852      	ldr	r0, [pc, #328]	; (80004f0 <main+0x21c>)
 80003a8:	f000 facf 	bl	800094a <Display_Fill>
	Display_UpdateScreen(&lcd2);
 80003ac:	4850      	ldr	r0, [pc, #320]	; (80004f0 <main+0x21c>)
 80003ae:	f000 fa94 	bl	80008da <Display_UpdateScreen>


	Display_Fill(&lcd3, Display_COLOR_BLACK);	//the entire Display is white (written to RAM)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4850      	ldr	r0, [pc, #320]	; (80004f8 <main+0x224>)
 80003b6:	f000 fac8 	bl	800094a <Display_Fill>
	Display_DrawBitmap(&lcd3 ,0, 0, horse_image, 128, 64, Display_COLOR_WHITE);	//data of picture into RAM	(available pictures: helix & looping)
 80003ba:	2301      	movs	r3, #1
 80003bc:	9302      	str	r3, [sp, #8]
 80003be:	2340      	movs	r3, #64	; 0x40
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2380      	movs	r3, #128	; 0x80
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	4b50      	ldr	r3, [pc, #320]	; (8000508 <main+0x234>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	2100      	movs	r1, #0
 80003cc:	484a      	ldr	r0, [pc, #296]	; (80004f8 <main+0x224>)
 80003ce:	f000 f916 	bl	80005fe <Display_DrawBitmap>
	Display_UpdateScreen(&lcd3);
 80003d2:	4849      	ldr	r0, [pc, #292]	; (80004f8 <main+0x224>)
 80003d4:	f000 fa81 	bl	80008da <Display_UpdateScreen>

	rtc_time_t t ;
	rtc_date_t d ;


	d.day = 14 ;
 80003d8:	230e      	movs	r3, #14
 80003da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	d.month = 1 ;
 80003de:	2301      	movs	r3, #1
 80003e0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	d.year = 23 ;
 80003e4:	2317      	movs	r3, #23
 80003e6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	rtc_set_date(&d) ;
 80003ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 f99c 	bl	800172c <rtc_set_date>

	delay_ms(1000) ;
 80003f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f8:	f000 f8ba 	bl	8000570 <delay_ms>

	rtc_get_date(&d) ;
 80003fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fa01 	bl	8001808 <rtc_get_date>

	if( d.day != 14 )
 8000406:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800040a:	2b0e      	cmp	r3, #14
 800040c:	d006      	beq.n	800041c <main+0x148>
	{
		gpio_set_pinState(GPIOA , 5 , HIGH) ;
 800040e:	2200      	movs	r2, #0
 8000410:	2105      	movs	r1, #5
 8000412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000416:	f000 fd75 	bl	8000f04 <gpio_set_pinState>
		while(1) ;
 800041a:	e7fe      	b.n	800041a <main+0x146>
	}
	if(d.month != 1)
 800041c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000420:	2b01      	cmp	r3, #1
 8000422:	d006      	beq.n	8000432 <main+0x15e>
	{
		gpio_set_pinState(GPIOA , 5 , HIGH) ;
 8000424:	2200      	movs	r2, #0
 8000426:	2105      	movs	r1, #5
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f000 fd6a 	bl	8000f04 <gpio_set_pinState>
		while(1) ;
 8000430:	e7fe      	b.n	8000430 <main+0x15c>
	}
	if(d.year != 23){
 8000432:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000436:	2b17      	cmp	r3, #23
 8000438:	d006      	beq.n	8000448 <main+0x174>
		gpio_set_pinState(GPIOA , 5 , HIGH) ;
 800043a:	2200      	movs	r2, #0
 800043c:	2105      	movs	r1, #5
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f000 fd5f 	bl	8000f04 <gpio_set_pinState>
		while(1) ;
 8000446:	e7fe      	b.n	8000446 <main+0x172>

	char my_date[60] ;

	while(1)
	{
		rtc_get_time(&t) ;
 8000448:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800044c:	4618      	mov	r0, r3
 800044e:	f001 f8f1 	bl	8001634 <rtc_get_time>

		sprintf(my_time , "%.2d:%.2d:%.2d",t.hr , t.min , t.sec) ;
 8000452:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000456:	461a      	mov	r2, r3
 8000458:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800045c:	4619      	mov	r1, r3
 800045e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000462:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	460b      	mov	r3, r1
 800046a:	4928      	ldr	r1, [pc, #160]	; (800050c <main+0x238>)
 800046c:	f001 fa44 	bl	80018f8 <siprintf>
		sprintf(my_date , " 20%.2d/%.2d/%.2d" , d.year , d.month ,d.day) ;
 8000470:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000474:	461a      	mov	r2, r3
 8000476:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800047a:	4619      	mov	r1, r3
 800047c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000480:	1d38      	adds	r0, r7, #4
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	460b      	mov	r3, r1
 8000486:	4922      	ldr	r1, [pc, #136]	; (8000510 <main+0x23c>)
 8000488:	f001 fa36 	bl	80018f8 <siprintf>

		if(t.sec > 59)
 800048c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000490:	2b3b      	cmp	r3, #59	; 0x3b
 8000492:	d906      	bls.n	80004a2 <main+0x1ce>
		{
			gpio_set_pinState(GPIOA , 5 , HIGH) ;
 8000494:	2200      	movs	r2, #0
 8000496:	2105      	movs	r1, #5
 8000498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049c:	f000 fd32 	bl	8000f04 <gpio_set_pinState>
			while(1) ;
 80004a0:	e7fe      	b.n	80004a0 <main+0x1cc>
		}

		Display_GotoXY(&lcd2 , 20,5);
 80004a2:	2205      	movs	r2, #5
 80004a4:	2114      	movs	r1, #20
 80004a6:	4812      	ldr	r0, [pc, #72]	; (80004f0 <main+0x21c>)
 80004a8:	f000 facb 	bl	8000a42 <Display_GotoXY>

		Display_Puts(&lcd2 ,my_time ,& Font_7x10 , Display_COLOR_BLACK ) ;
 80004ac:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80004b0:	2300      	movs	r3, #0
 80004b2:	4a18      	ldr	r2, [pc, #96]	; (8000514 <main+0x240>)
 80004b4:	480e      	ldr	r0, [pc, #56]	; (80004f0 <main+0x21c>)
 80004b6:	f000 fb60 	bl	8000b7a <Display_Puts>

		Display_GotoXY(&lcd2 , 20,20);
 80004ba:	2214      	movs	r2, #20
 80004bc:	2114      	movs	r1, #20
 80004be:	480c      	ldr	r0, [pc, #48]	; (80004f0 <main+0x21c>)
 80004c0:	f000 fabf 	bl	8000a42 <Display_GotoXY>

		Display_Puts(&lcd2 ,my_date ,& Font_7x10 , Display_COLOR_BLACK ) ;
 80004c4:	1d39      	adds	r1, r7, #4
 80004c6:	2300      	movs	r3, #0
 80004c8:	4a12      	ldr	r2, [pc, #72]	; (8000514 <main+0x240>)
 80004ca:	4809      	ldr	r0, [pc, #36]	; (80004f0 <main+0x21c>)
 80004cc:	f000 fb55 	bl	8000b7a <Display_Puts>

		Display_UpdateScreen(&lcd2);
 80004d0:	4807      	ldr	r0, [pc, #28]	; (80004f0 <main+0x21c>)
 80004d2:	f000 fa02 	bl	80008da <Display_UpdateScreen>
		//delay_ms(10);
		char c = keypad_get_pressedkey() ;
 80004d6:	f000 ffb3 	bl	8001440 <keypad_get_pressedkey>
 80004da:	4603      	mov	r3, r0
 80004dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	{
 80004e0:	e7b2      	b.n	8000448 <main+0x174>
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	200000a0 	.word	0x200000a0
 80004ec:	40005400 	.word	0x40005400
 80004f0:	200004ac 	.word	0x200004ac
 80004f4:	40005800 	.word	0x40005800
 80004f8:	200008b8 	.word	0x200008b8
 80004fc:	40007800 	.word	0x40007800
 8000500:	48000800 	.word	0x48000800
 8000504:	08002228 	.word	0x08002228
 8000508:	08002628 	.word	0x08002628
 800050c:	08002204 	.word	0x08002204
 8000510:	08002214 	.word	0x08002214
 8000514:	20000004 	.word	0x20000004

08000518 <systick_enable>:
// core_cm4.h  Zeile 759 ->765
/**
  \brief  Structure type to access the System Timer (SysTick).
 */
void systick_enable()
{    //uint32_t SystemCoreClock_ = 8000000; //8 Mhz
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	SysTick->LOAD  = (SystemCoreClock_/1000) - 1;                  /* set reload register */
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <systick_enable+0x30>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <systick_enable+0x34>)
 8000522:	fba2 2303 	umull	r2, r3, r2, r3
 8000526:	099b      	lsrs	r3, r3, #6
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <systick_enable+0x38>)
 800052a:	3b01      	subs	r3, #1
 800052c:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800052e:	210f      	movs	r1, #15
 8000530:	f04f 30ff 	mov.w	r0, #4294967295
 8000534:	f7ff fea4 	bl	8000280 <__NVIC_SetPriority>
	SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <systick_enable+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |  /*!< SysTick CTRL: CLKSOURCE Mask */
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <systick_enable+0x38>)
 8000540:	2207      	movs	r2, #7
 8000542:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_TICKINT_Msk   |
					 SysTick_CTRL_ENABLE_Msk;
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000000 	.word	0x20000000
 800054c:	10624dd3 	.word	0x10624dd3
 8000550:	e000e010 	.word	0xe000e010

08000554 <SysTick_Handler>:


void SysTick_Handler()
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  mtick++;
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <SysTick_Handler+0x18>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a03      	ldr	r2, [pc, #12]	; (800056c <SysTick_Handler+0x18>)
 8000560:	6013      	str	r3, [r2, #0]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	2000009c 	.word	0x2000009c

08000570 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  uint32_t st = get_mtick();
 8000578:	f000 f810 	bl	800059c <get_mtick>
 800057c:	60f8      	str	r0, [r7, #12]

  while( get_mtick() - st <ms);
 800057e:	bf00      	nop
 8000580:	f000 f80c 	bl	800059c <get_mtick>
 8000584:	4602      	mov	r2, r0
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	d8f7      	bhi.n	8000580 <delay_ms+0x10>
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <get_mtick>:

uint32_t get_mtick()
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return mtick;
 80005a0:	4b02      	ldr	r3, [pc, #8]	; (80005ac <get_mtick+0x10>)
 80005a2:	681b      	ldr	r3, [r3, #0]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	2000009c 	.word	0x2000009c

080005b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b0:	f8df d030 	ldr.w	sp, [pc, #48]	; 80005e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005b6:	e003      	b.n	80005c0 <LoopCopyDataInit>

080005b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005be:	3104      	adds	r1, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005c8:	d3f6      	bcc.n	80005b8 <CopyDataInit>
	ldr	r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005cc:	e002      	b.n	80005d4 <LoopFillZerobss>

080005ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005d0:	f842 3b04 	str.w	r3, [r2], #4

080005d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <LoopForever+0x16>)
	cmp	r2, r3
 80005d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005d8:	d3f9      	bcc.n	80005ce <FillZerobss>

/* Call the clock system intitialization function.*/
    //bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 80005da:	f001 f961 	bl	80018a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005de:	f7ff fe79 	bl	80002d4 <main>

080005e2 <LoopForever>:

LoopForever:
    b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80005e8:	080031d0 	.word	0x080031d0
	ldr	r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005f0:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80005f4:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80005f8:	20000cec 	.word	0x20000cec

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>

080005fe <Display_DrawBitmap>:




void Display_DrawBitmap(OLED_t *oled ,uint16_t x, uint16_t y, const unsigned char *bitmap, uint16_t w, uint16_t h, Display_COLOR_t color)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b086      	sub	sp, #24
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	817b      	strh	r3, [r7, #10]
 800060c:	4613      	mov	r3, r2
 800060e:	813b      	strh	r3, [r7, #8]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000610:	8c3b      	ldrh	r3, [r7, #32]
 8000612:	3307      	adds	r3, #7
 8000614:	2b00      	cmp	r3, #0
 8000616:	da00      	bge.n	800061a <Display_DrawBitmap+0x1c>
 8000618:	3307      	adds	r3, #7
 800061a:	10db      	asrs	r3, r3, #3
 800061c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000622:	2300      	movs	r3, #0
 8000624:	82bb      	strh	r3, [r7, #20]
 8000626:	e040      	b.n	80006aa <Display_DrawBitmap+0xac>
    {
        for(int16_t i=0; i<w; i++)
 8000628:	2300      	movs	r3, #0
 800062a:	827b      	strh	r3, [r7, #18]
 800062c:	e02f      	b.n	800068e <Display_DrawBitmap+0x90>
        {
            if(i & 7)
 800062e:	8a7b      	ldrh	r3, [r7, #18]
 8000630:	f003 0307 	and.w	r3, r3, #7
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <Display_DrawBitmap+0x42>
            {
               byte <<= 1;
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	75fb      	strb	r3, [r7, #23]
 800063e:	e012      	b.n	8000666 <Display_DrawBitmap+0x68>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000640:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000644:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000648:	fb03 f202 	mul.w	r2, r3, r2
 800064c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000650:	2b00      	cmp	r3, #0
 8000652:	da00      	bge.n	8000656 <Display_DrawBitmap+0x58>
 8000654:	3307      	adds	r3, #7
 8000656:	10db      	asrs	r3, r3, #3
 8000658:	b21b      	sxth	r3, r3
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80)
 8000666:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800066a:	2b00      	cmp	r3, #0
 800066c:	da09      	bge.n	8000682 <Display_DrawBitmap+0x84>
            	Display_DrawPixel(oled ,x+i, y, color);
 800066e:	8a7a      	ldrh	r2, [r7, #18]
 8000670:	897b      	ldrh	r3, [r7, #10]
 8000672:	4413      	add	r3, r2
 8000674:	b299      	uxth	r1, r3
 8000676:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800067a:	893a      	ldrh	r2, [r7, #8]
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f000 f97b 	bl	8000978 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000682:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000686:	b29b      	uxth	r3, r3
 8000688:	3301      	adds	r3, #1
 800068a:	b29b      	uxth	r3, r3
 800068c:	827b      	strh	r3, [r7, #18]
 800068e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000692:	8c3b      	ldrh	r3, [r7, #32]
 8000694:	429a      	cmp	r2, r3
 8000696:	dbca      	blt.n	800062e <Display_DrawBitmap+0x30>
    for(int16_t j=0; j<h; j++, y++)
 8000698:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800069c:	b29b      	uxth	r3, r3
 800069e:	3301      	adds	r3, #1
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	82bb      	strh	r3, [r7, #20]
 80006a4:	893b      	ldrh	r3, [r7, #8]
 80006a6:	3301      	adds	r3, #1
 80006a8:	813b      	strh	r3, [r7, #8]
 80006aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80006ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbb9      	blt.n	8000628 <Display_DrawBitmap+0x2a>
        }
    }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <Display_Init>:




uint8_t Display_Init(OLED_t * oled) {
 80006be:	b580      	push	{r7, lr}
 80006c0:	b086      	sub	sp, #24
 80006c2:	af02      	add	r7, sp, #8
 80006c4:	6078      	str	r0, [r7, #4]

	//delay
	uint32_t p = 2500;
 80006c6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80006ca:	60fb      	str	r3, [r7, #12]
	while(p>0)
 80006cc:	e002      	b.n	80006d4 <Display_Init+0x16>
		p--;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
	while(p>0)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f9      	bne.n	80006ce <Display_Init+0x10>

	Display_WriteCommand(oled , 0xAE); //display off
 80006da:	2302      	movs	r3, #2
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	23ae      	movs	r3, #174	; 0xae
 80006e0:	2200      	movs	r2, #0
 80006e2:	213c      	movs	r1, #60	; 0x3c
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 fafa 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //Set Memory Addressing Mode
 80006ea:	2302      	movs	r3, #2
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2320      	movs	r3, #32
 80006f0:	2200      	movs	r2, #0
 80006f2:	213c      	movs	r1, #60	; 0x3c
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 faf2 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80006fa:	2302      	movs	r3, #2
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2310      	movs	r3, #16
 8000700:	2200      	movs	r2, #0
 8000702:	213c      	movs	r1, #60	; 0x3c
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f000 faea 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800070a:	2302      	movs	r3, #2
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	23b0      	movs	r3, #176	; 0xb0
 8000710:	2200      	movs	r2, #0
 8000712:	213c      	movs	r1, #60	; 0x3c
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 fae2 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xC8); //Set COM Output Scan Direction
 800071a:	2302      	movs	r3, #2
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	23c8      	movs	r3, #200	; 0xc8
 8000720:	2200      	movs	r2, #0
 8000722:	213c      	movs	r1, #60	; 0x3c
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 fada 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //---set low column address
 800072a:	2302      	movs	r3, #2
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2300      	movs	r3, #0
 8000730:	2200      	movs	r2, #0
 8000732:	213c      	movs	r1, #60	; 0x3c
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 fad2 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //---set high column address
 800073a:	2302      	movs	r3, #2
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2310      	movs	r3, #16
 8000740:	2200      	movs	r2, #0
 8000742:	213c      	movs	r1, #60	; 0x3c
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 faca 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x40); //--set start line address
 800074a:	2302      	movs	r3, #2
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2340      	movs	r3, #64	; 0x40
 8000750:	2200      	movs	r2, #0
 8000752:	213c      	movs	r1, #60	; 0x3c
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 fac2 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x81); //--set contrast control register
 800075a:	2302      	movs	r3, #2
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2381      	movs	r3, #129	; 0x81
 8000760:	2200      	movs	r2, #0
 8000762:	213c      	movs	r1, #60	; 0x3c
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 faba 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xFF);
 800076a:	2302      	movs	r3, #2
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	23ff      	movs	r3, #255	; 0xff
 8000770:	2200      	movs	r2, #0
 8000772:	213c      	movs	r1, #60	; 0x3c
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 fab2 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA1); //--set segment re-map 0 to 127
 800077a:	2302      	movs	r3, #2
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	23a1      	movs	r3, #161	; 0xa1
 8000780:	2200      	movs	r2, #0
 8000782:	213c      	movs	r1, #60	; 0x3c
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 faaa 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA6); //--set normal display
 800078a:	2302      	movs	r3, #2
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	23a6      	movs	r3, #166	; 0xa6
 8000790:	2200      	movs	r2, #0
 8000792:	213c      	movs	r1, #60	; 0x3c
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 faa2 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA8); //--set multiplex ratio(1 to 64)
 800079a:	2302      	movs	r3, #2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	23a8      	movs	r3, #168	; 0xa8
 80007a0:	2200      	movs	r2, #0
 80007a2:	213c      	movs	r1, #60	; 0x3c
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 fa9a 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x3F); //
 80007aa:	2302      	movs	r3, #2
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	233f      	movs	r3, #63	; 0x3f
 80007b0:	2200      	movs	r2, #0
 80007b2:	213c      	movs	r1, #60	; 0x3c
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 fa92 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007ba:	2302      	movs	r3, #2
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	23a4      	movs	r3, #164	; 0xa4
 80007c0:	2200      	movs	r2, #0
 80007c2:	213c      	movs	r1, #60	; 0x3c
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 fa8a 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD3); //-set display offset
 80007ca:	2302      	movs	r3, #2
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	23d3      	movs	r3, #211	; 0xd3
 80007d0:	2200      	movs	r2, #0
 80007d2:	213c      	movs	r1, #60	; 0x3c
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 fa82 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //-not offset
 80007da:	2302      	movs	r3, #2
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2300      	movs	r3, #0
 80007e0:	2200      	movs	r2, #0
 80007e2:	213c      	movs	r1, #60	; 0x3c
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 fa7a 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD5); //--set display clock divide ratio/oscillator frequency
 80007ea:	2302      	movs	r3, #2
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	23d5      	movs	r3, #213	; 0xd5
 80007f0:	2200      	movs	r2, #0
 80007f2:	213c      	movs	r1, #60	; 0x3c
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 fa72 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xF0); //--set divide ratio
 80007fa:	2302      	movs	r3, #2
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	23f0      	movs	r3, #240	; 0xf0
 8000800:	2200      	movs	r2, #0
 8000802:	213c      	movs	r1, #60	; 0x3c
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 fa6a 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD9); //--set pre-charge period
 800080a:	2302      	movs	r3, #2
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	23d9      	movs	r3, #217	; 0xd9
 8000810:	2200      	movs	r2, #0
 8000812:	213c      	movs	r1, #60	; 0x3c
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 fa62 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x22); //
 800081a:	2302      	movs	r3, #2
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2322      	movs	r3, #34	; 0x22
 8000820:	2200      	movs	r2, #0
 8000822:	213c      	movs	r1, #60	; 0x3c
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 fa5a 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDA); //--set Com pins hardware configuration
 800082a:	2302      	movs	r3, #2
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	23da      	movs	r3, #218	; 0xda
 8000830:	2200      	movs	r2, #0
 8000832:	213c      	movs	r1, #60	; 0x3c
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f000 fa52 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x12);
 800083a:	2302      	movs	r3, #2
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2312      	movs	r3, #18
 8000840:	2200      	movs	r2, #0
 8000842:	213c      	movs	r1, #60	; 0x3c
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 fa4a 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDB); //--set vcomh
 800084a:	2302      	movs	r3, #2
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	23db      	movs	r3, #219	; 0xdb
 8000850:	2200      	movs	r2, #0
 8000852:	213c      	movs	r1, #60	; 0x3c
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 fa42 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //0x20,0.77xVcc
 800085a:	2302      	movs	r3, #2
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2320      	movs	r3, #32
 8000860:	2200      	movs	r2, #0
 8000862:	213c      	movs	r1, #60	; 0x3c
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f000 fa3a 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x8D); //--set DC-DC enable
 800086a:	2302      	movs	r3, #2
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	238d      	movs	r3, #141	; 0x8d
 8000870:	2200      	movs	r2, #0
 8000872:	213c      	movs	r1, #60	; 0x3c
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 fa32 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0x14); //
 800087a:	2302      	movs	r3, #2
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2314      	movs	r3, #20
 8000880:	2200      	movs	r2, #0
 8000882:	213c      	movs	r1, #60	; 0x3c
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 fa2a 	bl	8000cde <Display_I2C_Write>
	Display_WriteCommand(oled , 0xAF); //--turn on SSD1306 panel
 800088a:	2302      	movs	r3, #2
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	23af      	movs	r3, #175	; 0xaf
 8000890:	2200      	movs	r2, #0
 8000892:	213c      	movs	r1, #60	; 0x3c
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 fa22 	bl	8000cde <Display_I2C_Write>


	Display_WriteCommand(oled ,Display_DEACTIVATE_SCROLL);
 800089a:	2302      	movs	r3, #2
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	232e      	movs	r3, #46	; 0x2e
 80008a0:	2200      	movs	r2, #0
 80008a2:	213c      	movs	r1, #60	; 0x3c
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 fa1a 	bl	8000cde <Display_I2C_Write>
	//Display_Fill(Display_COLOR_WHITE);	// Clear screen
	Display_Fill(oled ,Display_COLOR_BLACK);	// Clear screen
 80008aa:	2100      	movs	r1, #0
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f84c 	bl	800094a <Display_Fill>
	Display_UpdateScreen(oled);		// Update screen
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 f811 	bl	80008da <Display_UpdateScreen>

	// Set default values
	oled->CurrentX = 0;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = 0;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

	// Initialized OK
	oled->Initialized = 1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2201      	movs	r2, #1
 80008cc:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409

	// Return OK
	return 1;
 80008d0:	2301      	movs	r3, #1
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <Display_UpdateScreen>:

void Display_UpdateScreen(OLED_t * oled) {
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af02      	add	r7, sp, #8
 80008e0:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	e028      	b.n	800093a <Display_UpdateScreen+0x60>
		Display_WriteCommand(oled , 0xB0 + m);
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	3b50      	subs	r3, #80	; 0x50
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2202      	movs	r2, #2
 80008f0:	9200      	str	r2, [sp, #0]
 80008f2:	2200      	movs	r2, #0
 80008f4:	213c      	movs	r1, #60	; 0x3c
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f9f1 	bl	8000cde <Display_I2C_Write>
		Display_WriteCommand(oled , 0x00);
 80008fc:	2302      	movs	r3, #2
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2300      	movs	r3, #0
 8000902:	2200      	movs	r2, #0
 8000904:	213c      	movs	r1, #60	; 0x3c
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f9e9 	bl	8000cde <Display_I2C_Write>
		Display_WriteCommand(oled , 0x10);
 800090c:	2302      	movs	r3, #2
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2310      	movs	r3, #16
 8000912:	2200      	movs	r2, #0
 8000914:	213c      	movs	r1, #60	; 0x3c
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 f9e1 	bl	8000cde <Display_I2C_Write>

		Display_I2C_WriteMulti(oled , 0x3C, 0x40, &(oled->Display_Buffer[Display_WIDTH * m]), Display_WIDTH);
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	01db      	lsls	r3, r3, #7
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	3304      	adds	r3, #4
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	9200      	str	r2, [sp, #0]
 800092a:	2240      	movs	r2, #64	; 0x40
 800092c:	213c      	movs	r1, #60	; 0x3c
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f000 f948 	bl	8000bc4 <Display_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	3301      	adds	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	2b07      	cmp	r3, #7
 800093e:	d9d3      	bls.n	80008e8 <Display_UpdateScreen+0xe>

	}
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <Display_Fill>:


void Display_Fill(OLED_t * oled , Display_COLOR_t color) {
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	460b      	mov	r3, r1
 8000954:	70fb      	strb	r3, [r7, #3]
	// Set memory, fill a block of memory with value
	memset(oled->Display_Buffer, (color == Display_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(oled->Display_Buffer));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	1d18      	adds	r0, r3, #4
 800095a:	78fb      	ldrb	r3, [r7, #3]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d101      	bne.n	8000964 <Display_Fill+0x1a>
 8000960:	2300      	movs	r3, #0
 8000962:	e000      	b.n	8000966 <Display_Fill+0x1c>
 8000964:	23ff      	movs	r3, #255	; 0xff
 8000966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800096a:	4619      	mov	r1, r3
 800096c:	f000 ffbc 	bl	80018e8 <memset>
  //memset(starting address, value to be filled, number of bytes to be filled)
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <Display_DrawPixel>:


void Display_DrawPixel(OLED_t * oled ,uint16_t x, uint16_t y, Display_COLOR_t color) {
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	4608      	mov	r0, r1
 8000982:	4611      	mov	r1, r2
 8000984:	461a      	mov	r2, r3
 8000986:	4603      	mov	r3, r0
 8000988:	817b      	strh	r3, [r7, #10]
 800098a:	460b      	mov	r3, r1
 800098c:	813b      	strh	r3, [r7, #8]
 800098e:	4613      	mov	r3, r2
 8000990:	71fb      	strb	r3, [r7, #7]

	if (x >= Display_WIDTH || y >= Display_HEIGHT)
 8000992:	897b      	ldrh	r3, [r7, #10]
 8000994:	2b7f      	cmp	r3, #127	; 0x7f
 8000996:	d84f      	bhi.n	8000a38 <Display_DrawPixel+0xc0>
 8000998:	893b      	ldrh	r3, [r7, #8]
 800099a:	2b3f      	cmp	r3, #63	; 0x3f
 800099c:	d84c      	bhi.n	8000a38 <Display_DrawPixel+0xc0>
		// Error
		return;
	}

	// Check if pixels are inverted
	if (oled->Inverted) {
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d006      	beq.n	80009b6 <Display_DrawPixel+0x3e>
		color = (Display_COLOR_t)!color;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	bf0c      	ite	eq
 80009ae:	2301      	moveq	r3, #1
 80009b0:	2300      	movne	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	71fb      	strb	r3, [r7, #7]
	}

	// Set color
	if (color == Display_COLOR_WHITE) {
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d11d      	bne.n	80009f8 <Display_DrawPixel+0x80>
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] |= 1 << (y % 8);
 80009bc:	897a      	ldrh	r2, [r7, #10]
 80009be:	893b      	ldrh	r3, [r7, #8]
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	b298      	uxth	r0, r3
 80009c4:	4603      	mov	r3, r0
 80009c6:	01db      	lsls	r3, r3, #7
 80009c8:	4413      	add	r3, r2
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	791b      	ldrb	r3, [r3, #4]
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	893b      	ldrh	r3, [r7, #8]
 80009d4:	f003 0307 	and.w	r3, r3, #7
 80009d8:	2101      	movs	r1, #1
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b259      	sxtb	r1, r3
 80009e4:	897a      	ldrh	r2, [r7, #10]
 80009e6:	4603      	mov	r3, r0
 80009e8:	01db      	lsls	r3, r3, #7
 80009ea:	4413      	add	r3, r2
 80009ec:	b2c9      	uxtb	r1, r1
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	4413      	add	r3, r2
 80009f2:	460a      	mov	r2, r1
 80009f4:	711a      	strb	r2, [r3, #4]
 80009f6:	e020      	b.n	8000a3a <Display_DrawPixel+0xc2>
	} else {
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] &= ~(1 << (y % 8));
 80009f8:	897a      	ldrh	r2, [r7, #10]
 80009fa:	893b      	ldrh	r3, [r7, #8]
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	b298      	uxth	r0, r3
 8000a00:	4603      	mov	r3, r0
 8000a02:	01db      	lsls	r3, r3, #7
 8000a04:	4413      	add	r3, r2
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4413      	add	r3, r2
 8000a0a:	791b      	ldrb	r3, [r3, #4]
 8000a0c:	b25a      	sxtb	r2, r3
 8000a0e:	893b      	ldrh	r3, [r7, #8]
 8000a10:	f003 0307 	and.w	r3, r3, #7
 8000a14:	2101      	movs	r1, #1
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	4013      	ands	r3, r2
 8000a22:	b259      	sxtb	r1, r3
 8000a24:	897a      	ldrh	r2, [r7, #10]
 8000a26:	4603      	mov	r3, r0
 8000a28:	01db      	lsls	r3, r3, #7
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b2c9      	uxtb	r1, r1
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	4413      	add	r3, r2
 8000a32:	460a      	mov	r2, r1
 8000a34:	711a      	strb	r2, [r3, #4]
 8000a36:	e000      	b.n	8000a3a <Display_DrawPixel+0xc2>
		return;
 8000a38:	bf00      	nop
	}
}
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <Display_GotoXY>:


void Display_GotoXY(OLED_t * oled ,uint16_t x, uint16_t y) {
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	807b      	strh	r3, [r7, #2]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	803b      	strh	r3, [r7, #0]
	// Set write pointers
	oled->CurrentX = x;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	887a      	ldrh	r2, [r7, #2]
 8000a56:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = y;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	883a      	ldrh	r2, [r7, #0]
 8000a5e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <Display_Putc>:


char Display_Putc(OLED_t * oled ,char ch, FontDef_t *Font, Display_COLOR_t color) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	461a      	mov	r2, r3
 8000a78:	460b      	mov	r3, r1
 8000a7a:	72fb      	strb	r3, [r7, #11]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	// Check available space in LCD
	if (
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000a86:	461a      	mov	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4413      	add	r3, r2
	if (
 8000a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a90:	dc08      	bgt.n	8000aa4 <Display_Putc+0x38>
		Display_HEIGHT <= (oled->CurrentY + Font->FontHeight)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000a98:	461a      	mov	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	785b      	ldrb	r3, [r3, #1]
 8000a9e:	4413      	add	r3, r2
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 8000aa0:	2b3f      	cmp	r3, #63	; 0x3f
 8000aa2:	dd01      	ble.n	8000aa8 <Display_Putc+0x3c>
	) {
		// Error
		return 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e064      	b.n	8000b72 <Display_Putc+0x106>
	}

	// Go through font
	for (i = 0; i < Font->FontHeight; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	e04f      	b.n	8000b4e <Display_Putc+0xe2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	7afb      	ldrb	r3, [r7, #11]
 8000ab4:	3b20      	subs	r3, #32
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	7849      	ldrb	r1, [r1, #1]
 8000aba:	fb01 f303 	mul.w	r3, r1, r3
 8000abe:	4619      	mov	r1, r3
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	440b      	add	r3, r1
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	e034      	b.n	8000b3c <Display_Putc+0xd0>
			if ((b << j) & 0x8000) {
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d012      	beq.n	8000b08 <Display_Putc+0x9c>
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t) color);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4413      	add	r3, r2
 8000aee:	b299      	uxth	r1, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	4413      	add	r3, r2
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	7abb      	ldrb	r3, [r7, #10]
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f7ff ff39 	bl	8000978 <Display_DrawPixel>
 8000b06:	e016      	b.n	8000b36 <Display_Putc+0xca>
			} else {
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t)!color);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	b299      	uxth	r1, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	7abb      	ldrb	r3, [r7, #10]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf0c      	ite	eq
 8000b2a:	2301      	moveq	r3, #1
 8000b2c:	2300      	movne	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ff21 	bl	8000978 <Display_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d3c4      	bcc.n	8000ad2 <Display_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	461a      	mov	r2, r3
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d3a9      	bcc.n	8000aae <Display_Putc+0x42>
			}
		}
	}

	// Increase pointer
	oled->CurrentX += Font->FontWidth;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4413      	add	r3, r2
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

	// Return character written
	return ch;
 8000b70:	7afb      	ldrb	r3, [r7, #11]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <Display_Puts>:


char Display_Puts(OLED_t * oled ,char* str, FontDef_t* Font, Display_COLOR_t color) {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	70fb      	strb	r3, [r7, #3]
	// Write characters
	while (*str) {
 8000b88:	e012      	b.n	8000bb0 <Display_Puts+0x36>
		// Write character by character
		if (Display_Putc(oled ,*str, Font, color) != *str) {
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	7819      	ldrb	r1, [r3, #0]
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff ff6a 	bl	8000a6c <Display_Putc>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d002      	beq.n	8000baa <Display_Puts+0x30>
			// Return error
			return *str;
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	e008      	b.n	8000bbc <Display_Puts+0x42>
		}

		// Increase string pointer
		str++;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3301      	adds	r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1e8      	bne.n	8000b8a <Display_Puts+0x10>
	}

	// Everything OK, zero should be returned
	return *str;
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	781b      	ldrb	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <Display_I2C_WriteMulti>:




void Display_I2C_WriteMulti(OLED_t * oled,uint8_t address, uint8_t dataRegister, uint8_t *data , uint16_t numBytes)	//data is a pointer
{
 8000bc4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000bc8:	b089      	sub	sp, #36	; 0x24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	72fb      	strb	r3, [r7, #11]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	72bb      	strb	r3, [r7, #10]
 8000bd8:	466b      	mov	r3, sp
 8000bda:	4618      	mov	r0, r3
	uint8_t i;
	uint8_t j;
	uint8_t dt[numBytes];		//necessary for multi Write
 8000bdc:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8000bde:	460b      	mov	r3, r1
 8000be0:	3b01      	subs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	b28b      	uxth	r3, r1
 8000be6:	2200      	movs	r2, #0
 8000be8:	4698      	mov	r8, r3
 8000bea:	4691      	mov	r9, r2
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bf8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c00:	b28b      	uxth	r3, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	461c      	mov	r4, r3
 8000c06:	4615      	mov	r5, r2
 8000c08:	f04f 0200 	mov.w	r2, #0
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	00eb      	lsls	r3, r5, #3
 8000c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c16:	00e2      	lsls	r2, r4, #3
 8000c18:	460b      	mov	r3, r1
 8000c1a:	3307      	adds	r3, #7
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	ebad 0d03 	sub.w	sp, sp, r3
 8000c24:	466b      	mov	r3, sp
 8000c26:	3300      	adds	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
	I2C_TypeDef *  i2c = oled->dev;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	613b      	str	r3, [r7, #16]
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8000c30:	7afb      	ldrb	r3, [r7, #11]
 8000c32:	005a      	lsls	r2, r3, #1
 8000c34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000c4e:	e007      	b.n	8000c60 <Display_I2C_WriteMulti+0x9c>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <Display_I2C_WriteMulti+0x9c>
 8000c5c:	4685      	mov	sp, r0
 8000c5e:	e039      	b.n	8000cd4 <Display_I2C_WriteMulti+0x110>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f1      	beq.n	8000c50 <Display_I2C_WriteMulti+0x8c>
			return;}}

	dt[0] = dataRegister;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	7aba      	ldrb	r2, [r7, #10]
 8000c70:	701a      	strb	r2, [r3, #0]
	for(i=0; i<numBytes; i++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	77bb      	strb	r3, [r7, #30]
 8000c76:	e00a      	b.n	8000c8e <Display_I2C_WriteMulti+0xca>
	{
	dt[i+1] = data[i];	//necessary for multi Write
 8000c78:	7fbb      	ldrb	r3, [r7, #30]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	441a      	add	r2, r3
 8000c7e:	7fbb      	ldrb	r3, [r7, #30]
 8000c80:	3301      	adds	r3, #1
 8000c82:	7811      	ldrb	r1, [r2, #0]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<numBytes; i++)
 8000c88:	7fbb      	ldrb	r3, [r7, #30]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	77bb      	strb	r3, [r7, #30]
 8000c8e:	7fbb      	ldrb	r3, [r7, #30]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d8ef      	bhi.n	8000c78 <Display_I2C_WriteMulti+0xb4>
	}

	for(j=0; j <= (numBytes-1); j++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	77fb      	strb	r3, [r7, #31]
 8000c9c:	e014      	b.n	8000cc8 <Display_I2C_WriteMulti+0x104>
	{
		i2c->TXDR = dt[j];
 8000c9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000caa:	7ffa      	ldrb	r2, [r7, #31]
 8000cac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	da06      	bge.n	8000cc2 <Display_I2C_WriteMulti+0xfe>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}		//ggf TXIS mit TXE ergänzen
 8000cb4:	bf00      	nop
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f9      	beq.n	8000cb6 <Display_I2C_WriteMulti+0xf2>
	for(j=0; j <= (numBytes-1); j++)
 8000cc2:	7ffb      	ldrb	r3, [r7, #31]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	77fb      	strb	r3, [r7, #31]
 8000cc8:	7ffb      	ldrb	r3, [r7, #31]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d8e5      	bhi.n	8000c9e <Display_I2C_WriteMulti+0xda>
 8000cd2:	4685      	mov	sp, r0
		}
	}

}
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000cdc:	4770      	bx	lr

08000cde <Display_I2C_Write>:


void Display_I2C_Write(OLED_t * oled, uint8_t address, uint8_t dataRegister, uint8_t data , uint8_t numBytes)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b087      	sub	sp, #28
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	4611      	mov	r1, r2
 8000cea:	461a      	mov	r2, r3
 8000cec:	4603      	mov	r3, r0
 8000cee:	70fb      	strb	r3, [r7, #3]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70bb      	strb	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	707b      	strb	r3, [r7, #1]


	uint8_t j;
	uint8_t dt[2];
	I2C_TypeDef *  i2c = oled->dev;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	613b      	str	r3, [r7, #16]
	dt[0] = dataRegister;
 8000cfe:	78bb      	ldrb	r3, [r7, #2]
 8000d00:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000d02:	787b      	ldrb	r3, [r7, #1]
 8000d04:	737b      	strb	r3, [r7, #13]

	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	005a      	lsls	r2, r3, #1
 8000d0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d0e:	041b      	lsls	r3, r3, #16
 8000d10:	4313      	orrs	r3, r2
 8000d12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000d26:	e005      	b.n	8000d34 <Display_I2C_Write+0x56>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d126      	bne.n	8000d82 <Display_I2C_Write+0xa4>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f3      	beq.n	8000d28 <Display_I2C_Write+0x4a>
			return;}}

	for(j=0; j <= (numBytes-1); j++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	75fb      	strb	r3, [r7, #23]
 8000d44:	e017      	b.n	8000d76 <Display_I2C_Write+0x98>
	{
		i2c->TXDR = dt[j];
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	3318      	adds	r3, #24
 8000d4a:	443b      	add	r3, r7
 8000d4c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d50:	461a      	mov	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000d56:	7dfa      	ldrb	r2, [r7, #23]
 8000d58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	da06      	bge.n	8000d70 <Display_I2C_Write+0x92>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}
 8000d62:	bf00      	nop
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0f9      	beq.n	8000d64 <Display_I2C_Write+0x86>
	for(j=0; j <= (numBytes-1); j++)
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
 8000d72:	3301      	adds	r3, #1
 8000d74:	75fb      	strb	r3, [r7, #23]
 8000d76:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d8e2      	bhi.n	8000d46 <Display_I2C_Write+0x68>
 8000d80:	e000      	b.n	8000d84 <Display_I2C_Write+0xa6>
			return;}}
 8000d82:	bf00      	nop
		}
	}

}
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <gpio_clock_enable>:
 * After each device reset, all peripheral clocks are disabled (except for the SRAM and FLITF).
Before using a peripheral user has to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.  s.50
 */
void gpio_clock_enable(GPIO_TypeDef * Port)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	if(Port == GPIOA)        //  Bit 17 IOPAEN: I/O port A clock enable
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d9a:	d106      	bne.n	8000daa <gpio_clock_enable+0x1e>
	{
		RCC->AHBENR |= (1 << GPIOA_CLOCK_ENABLE_BIT) ; //(1<<17);
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	4a2a      	ldr	r2, [pc, #168]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da6:	6153      	str	r3, [r2, #20]
	}
	*/
	else{

	}
}
 8000da8:	e04b      	b.n	8000e42 <gpio_clock_enable+0xb6>
	else if(Port == GPIOB)  //    Bit 18 IOPBEN: I/O port B  clock enable
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <gpio_clock_enable+0xc4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d106      	bne.n	8000dc0 <gpio_clock_enable+0x34>
		RCC->AHBENR |= (1 << GPIOB_CLOCK_ENABLE_BIT) ;
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6153      	str	r3, [r2, #20]
}
 8000dbe:	e040      	b.n	8000e42 <gpio_clock_enable+0xb6>
	else if(Port == GPIOC)   //  Bit 19 IOPCEN: I/O port C clock enable
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <gpio_clock_enable+0xc8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d106      	bne.n	8000dd6 <gpio_clock_enable+0x4a>
		RCC->AHBENR |= (1 << GPIOC_CLOCK_ENABLE_BIT) ;
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000dce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dd2:	6153      	str	r3, [r2, #20]
}
 8000dd4:	e035      	b.n	8000e42 <gpio_clock_enable+0xb6>
	else if(Port == GPIOD)    //  Bit 20 IOPDEN: I/O port D clock enable
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <gpio_clock_enable+0xcc>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d106      	bne.n	8000dec <gpio_clock_enable+0x60>
		RCC->AHBENR |= (1 << GPIOD_CLOCK_ENABLE_BIT) ;
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000de8:	6153      	str	r3, [r2, #20]
}
 8000dea:	e02a      	b.n	8000e42 <gpio_clock_enable+0xb6>
	else if(Port == GPIOE)    //  Bit 21 IOPEEN: I/O port E clock enable
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <gpio_clock_enable+0xd0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d106      	bne.n	8000e02 <gpio_clock_enable+0x76>
		RCC->AHBENR |= (1 << GPIOE_CLOCK_ENABLE_BIT) ;
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfe:	6153      	str	r3, [r2, #20]
}
 8000e00:	e01f      	b.n	8000e42 <gpio_clock_enable+0xb6>
	else if(Port == GPIOF)   //  Bit 22 IOPFEN: I/O port F clock enable
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <gpio_clock_enable+0xd4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d106      	bne.n	8000e18 <gpio_clock_enable+0x8c>
		RCC->AHBENR |= (1 << GPIOF_CLOCK_ENABLE_BIT) ;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e14:	6153      	str	r3, [r2, #20]
}
 8000e16:	e014      	b.n	8000e42 <gpio_clock_enable+0xb6>
	else if(Port == GPIOG)    //  Bit 23 IOPGEN: I/O port G clock enable
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <gpio_clock_enable+0xd8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d106      	bne.n	8000e2e <gpio_clock_enable+0xa2>
		RCC->AHBENR |= (1 << GPIOG_CLOCK_ENABLE_BIT) ;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e2a:	6153      	str	r3, [r2, #20]
}
 8000e2c:	e009      	b.n	8000e42 <gpio_clock_enable+0xb6>
	else if(Port == GPIOH)    //  Bit 16 IOPHEN: I/O port H clock enable
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <gpio_clock_enable+0xdc>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d105      	bne.n	8000e42 <gpio_clock_enable+0xb6>
		RCC->AHBENR |= (1 << GPIOH_CLOCK_ENABLE_BIT) ;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <gpio_clock_enable+0xc0>)
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	6153      	str	r3, [r2, #20]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48000400 	.word	0x48000400
 8000e54:	48000800 	.word	0x48000800
 8000e58:	48000c00 	.word	0x48000c00
 8000e5c:	48001000 	.word	0x48001000
 8000e60:	48001400 	.word	0x48001400
 8000e64:	48001800 	.word	0x48001800
 8000e68:	48001c00 	.word	0x48001c00

08000e6c <reset_io>:

void reset_io(GPIO_TypeDef * Port ) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	Port->MODER   = 0x00 ;             // set pin Mode
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
	Port->OTYPER  = 0x00 ;             //set output type OD/PP
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR = 0x00 ;             //set output speed
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  = 0x00 ;             //set pin Pull
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <gpio_config_pin>:

void gpio_config_pin(GPIO_TypeDef * Port , int Pin , GPIO_Mode_t Mode ,
					   GPIO_Speed_t speed ,GPIO_Pull_t pull, GPIO_out_type_t otype)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	71bb      	strb	r3, [r7, #6]
	Port->MODER   |= (Mode  << 2 * Pin) ; // set  pin Mode
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	79f9      	ldrb	r1, [r7, #7]
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	0052      	lsls	r2, r2, #1
 8000eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	601a      	str	r2, [r3, #0]
	Port->OTYPER  |= (otype << Pin)     ; //set output type OD/PP
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	7f39      	ldrb	r1, [r7, #28]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR |= (speed << 2 * Pin) ; //set output speed
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	79b9      	ldrb	r1, [r7, #6]
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	0052      	lsls	r2, r2, #1
 8000edc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  |= (pull  << 2 * Pin) ; //set pin Pull
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	7e39      	ldrb	r1, [r7, #24]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	0052      	lsls	r2, r2, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	60da      	str	r2, [r3, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <gpio_set_pinState>:

void gpio_set_pinState(GPIO_TypeDef * Port , int Pin , Pin_State State)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	71fb      	strb	r3, [r7, #7]
	//assert pin < 16
	if(State == HIGH)
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d109      	bne.n	8000f2c <gpio_set_pinState+0x28>
	{
		Port->ODR |= (1 << Pin) ;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	431a      	orrs	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	615a      	str	r2, [r3, #20]
	}
	else {
		Port->ODR &= ~(1 << Pin) ;
	}
}
 8000f2a:	e009      	b.n	8000f40 <gpio_set_pinState+0x3c>
		Port->ODR &= ~(1 << Pin) ;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	2101      	movs	r1, #1
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	fa01 f202 	lsl.w	r2, r1, r2
 8000f38:	43d2      	mvns	r2, r2
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	615a      	str	r2, [r3, #20]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
	...

08000f4c <I2C_Init>:

/*
 * TESTED
 */
void I2C_Init(I2C_TypeDef * i2c)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]


 	 if( i2c == I2C1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a6e      	ldr	r2, [pc, #440]	; (8001110 <I2C_Init+0x1c4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d118      	bne.n	8000f8e <I2C_Init+0x42>
 	 {
 		// PB6  I2C1_SCL, PB7   I2C1_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000f5c:	4b6d      	ldr	r3, [pc, #436]	; (8001114 <I2C_Init+0x1c8>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	4a6c      	ldr	r2, [pc, #432]	; (8001114 <I2C_Init+0x1c8>)
 8000f62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f66:	6153      	str	r3, [r2, #20]
 		GPIOB->MODER |= (0b10 << GPIO_MODER_MODER6_Pos) |
 8000f68:	4b6b      	ldr	r3, [pc, #428]	; (8001118 <I2C_Init+0x1cc>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a6a      	ldr	r2, [pc, #424]	; (8001118 <I2C_Init+0x1cc>)
 8000f6e:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000f72:	6013      	str	r3, [r2, #0]
		   (0b10 << GPIO_MODER_MODER7_Pos); // PB6, PB7: Alternate function
		 GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFRL6_Pos) |
 8000f74:	4b68      	ldr	r3, [pc, #416]	; (8001118 <I2C_Init+0x1cc>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a67      	ldr	r2, [pc, #412]	; (8001118 <I2C_Init+0x1cc>)
 8000f7a:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000f7e:	6213      	str	r3, [r2, #32]
		   (4 << GPIO_AFRL_AFRL7_Pos);         // 0100: AF4

		 RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //i2c clock enable
 8000f80:	4b64      	ldr	r3, [pc, #400]	; (8001114 <I2C_Init+0x1c8>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	4a63      	ldr	r2, [pc, #396]	; (8001114 <I2C_Init+0x1c8>)
 8000f86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f8a:	61d3      	str	r3, [r2, #28]
 8000f8c:	e0ac      	b.n	80010e8 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C2 )
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a62      	ldr	r2, [pc, #392]	; (800111c <I2C_Init+0x1d0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d14c      	bne.n	8001030 <I2C_Init+0xe4>
 	 {
 		//PA9 I2C2_SCL , PA10 I2C2_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000f96:	4b5f      	ldr	r3, [pc, #380]	; (8001114 <I2C_Init+0x1c8>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a5e      	ldr	r2, [pc, #376]	; (8001114 <I2C_Init+0x1c8>)
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	6153      	str	r3, [r2, #20]
 		GPIOA->MODER |= (2 << 18) ;// PA9 10: Alternate function mode
 8000fa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fb0:	6013      	str	r3, [r2, #0]
 		GPIOA->MODER |= (2 << 20) ;//PA10 10: Alternate function mode
 8000fb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc0:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER |= (1 << 9 ) ;//PA9  GPIO port output type register 1: Output open-drain
 8000fc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd0:	6053      	str	r3, [r2, #4]
 		GPIOA->OTYPER |= (1 << 10) ;//PA10 Oepn Drain
 8000fd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe0:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 18) | (3 << 20) ; //PA9,PA10  GPIO port output speed register 11: High speed
 8000fe2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fec:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8000ff0:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR  |= (1<<18) | (1<<20) ;//PA9 ,PA10 GPIO port pull-up/pull-down register 01: Pull-up
 8000ff2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ffc:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8001000:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1] |= ( 4 << 4 );   //select GPIO alternate function high register  PA9  0100: AF4
 8001002:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001010:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOA->AFR[1] |= (4 << 8);   //select GPIO alternate function high register  PA10   0100: AF4
 8001012:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800101c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001020:	6253      	str	r3, [r2, #36]	; 0x24

 		RCC->APB1ENR |=RCC_APB1ENR_I2C2EN ; //i2c clock enable
 8001022:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <I2C_Init+0x1c8>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a3b      	ldr	r2, [pc, #236]	; (8001114 <I2C_Init+0x1c8>)
 8001028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	e05b      	b.n	80010e8 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C3 )
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a3b      	ldr	r2, [pc, #236]	; (8001120 <I2C_Init+0x1d4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d157      	bne.n	80010e8 <I2C_Init+0x19c>
 	 {
 		//PA8 I2C3_SCL , PB5 I2C3_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <I2C_Init+0x1c8>)
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	4a35      	ldr	r2, [pc, #212]	; (8001114 <I2C_Init+0x1c8>)
 800103e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001042:	6153      	str	r3, [r2, #20]
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8001044:	4b33      	ldr	r3, [pc, #204]	; (8001114 <I2C_Init+0x1c8>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	4a32      	ldr	r2, [pc, #200]	; (8001114 <I2C_Init+0x1c8>)
 800104a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104e:	6153      	str	r3, [r2, #20]

 		GPIOA->MODER   |= (2 << 16) ;// PA8 ALF
 8001050:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800105a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105e:	6013      	str	r3, [r2, #0]
 		GPIOB->MODER   |= (2 << 10) ;//PB5 ALF
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <I2C_Init+0x1cc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a2c      	ldr	r2, [pc, #176]	; (8001118 <I2C_Init+0x1cc>)
 8001066:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800106a:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER  |= (1 << 8 ) ;//PA8 Open Drain
 800106c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107a:	6053      	str	r3, [r2, #4]
 		GPIOB->OTYPER  |= (1 << 5 ) ;//PB5 Oepn Drain
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <I2C_Init+0x1cc>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a25      	ldr	r2, [pc, #148]	; (8001118 <I2C_Init+0x1cc>)
 8001082:	f043 0320 	orr.w	r3, r3, #32
 8001086:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 16) ;//PA8 High Speed
 8001088:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001092:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001096:	6093      	str	r3, [r2, #8]
 		GPIOB->OSPEEDR |= (3 << 10) ; //PB5 High Speed
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <I2C_Init+0x1cc>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <I2C_Init+0x1cc>)
 800109e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80010a2:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR   |= (1 << 16) ;//PA8 PULL up
 80010a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b2:	60d3      	str	r3, [r2, #12]
 		GPIOB->PUPDR   |= (1 << 10) ;//PB5 PULL up
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <I2C_Init+0x1cc>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <I2C_Init+0x1cc>)
 80010ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010be:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1]  |= ( 3 << 0 );//select Alf PA8    0011: AF3
 80010c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010ca:	f043 0303 	orr.w	r3, r3, #3
 80010ce:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOB->AFR[0]  |= (8 << 20) ;//select Alf PB5     1000: AF8
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <I2C_Init+0x1cc>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4a10      	ldr	r2, [pc, #64]	; (8001118 <I2C_Init+0x1cc>)
 80010d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010da:	6213      	str	r3, [r2, #32]

 		RCC->APB1ENR |=RCC_APB1ENR_I2C3EN ; //i2c clock enable
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <I2C_Init+0x1c8>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <I2C_Init+0x1c8>)
 80010e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010e6:	61d3      	str	r3, [r2, #28]
	 * Enabling and disabling the peripheral
	 * The I2C peripheral clock must be configured and enabled in the clock controller.
	 * Then the I2C can be enabled by setting the PE bit in the I2C_CR1 register.
	 * When the I2C is disabled (PE=0), the I2C performs a software reset.
	 */
	 i2c->CR1 &= ~I2C_CR1_PE;                // disable the i2c peripheral clock  (clear PE bit in I2C_CR1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 0201 	bic.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	601a      	str	r2, [r3, #0]
	/*
	 * I2C timings
	 * The timings must be configured in order to guarantee a correct data hold and setup time,
	 * used in master and slave modes. This is done by programming the PRESC,SCLDEL and SDADEL bits in the I2C_TIMINGR register.
	 */
	 i2c->TIMINGR = (1 << I2C_TIMINGR_PRESC_Pos) | // Standard mode 100 kHz @ 8 MHz (page 849/1141)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <I2C_Init+0x1d8>)
 80010f8:	611a      	str	r2, [r3, #16]
	             (0x13 << I2C_TIMINGR_SCLL_Pos)  |
	             (0xF << I2C_TIMINGR_SCLH_Pos)   |
	             (0x2 << I2C_TIMINGR_SDADEL_Pos) |
	             (0x4 << I2C_TIMINGR_SCLDEL_Pos);

	 i2c->CR1 |= I2C_CR1_PE;// enable the i2c peripheral clock (set PE bit inI2C_CR1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]

}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40005400 	.word	0x40005400
 8001114:	40021000 	.word	0x40021000
 8001118:	48000400 	.word	0x48000400
 800111c:	40005800 	.word	0x40005800
 8001120:	40007800 	.word	0x40007800
 8001124:	10420f13 	.word	0x10420f13

08001128 <I2C_Write>:

	return cnt ;
}

void I2C_Write(I2C_TypeDef * i2c , uint8_t address , uint8_t * data , uint8_t len)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	461a      	mov	r2, r3
 8001134:	460b      	mov	r3, r1
 8001136:	72fb      	strb	r3, [r7, #11]
 8001138:	4613      	mov	r3, r2
 800113a:	72bb      	strb	r3, [r7, #10]
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (len << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 800113c:	7afb      	ldrb	r3, [r7, #11]
 800113e:	005a      	lsls	r2, r3, #1
 8001140:	7abb      	ldrb	r3, [r7, #10]
 8001142:	041b      	lsls	r3, r3, #16
 8001144:	4313      	orrs	r3, r2
 8001146:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	605a      	str	r2, [r3, #4]
		i2c->CR2 |= I2C_CR2_START;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	605a      	str	r2, [r3, #4]
		while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 800115a:	e005      	b.n	8001168 <I2C_Write+0x40>
			if ((i2c->ISR & I2C_ISR_NACKF)){
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	2b00      	cmp	r3, #0
 8001166:	d123      	bne.n	80011b0 <I2C_Write+0x88>
		while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f3      	beq.n	800115c <I2C_Write+0x34>
				return;}}

		for(uint8_t j=0; j <= (len-1); j++)
 8001174:	2300      	movs	r3, #0
 8001176:	75fb      	strb	r3, [r7, #23]
 8001178:	e015      	b.n	80011a6 <I2C_Write+0x7e>
		{
			i2c->TXDR = data[j];
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
			if(j < (len-1))
 8001188:	7dfa      	ldrb	r2, [r7, #23]
 800118a:	7abb      	ldrb	r3, [r7, #10]
 800118c:	3b01      	subs	r3, #1
 800118e:	429a      	cmp	r2, r3
 8001190:	da06      	bge.n	80011a0 <I2C_Write+0x78>
			{
				while((i2c->ISR & I2C_ISR_TXIS)==0){}
 8001192:	bf00      	nop
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f9      	beq.n	8001194 <I2C_Write+0x6c>
		for(uint8_t j=0; j <= (len-1); j++)
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	3301      	adds	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]
 80011a6:	7aba      	ldrb	r2, [r7, #10]
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d8e5      	bhi.n	800117a <I2C_Write+0x52>
 80011ae:	e000      	b.n	80011b2 <I2C_Write+0x8a>
				return;}}
 80011b0:	bf00      	nop
			}
		}
}
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <I2C_Read>:
	// I2C1->CR2 |= I2C_CR2_NACK;
	 i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
}

void I2C_Read(I2C_TypeDef * i2c ,uint8_t address , uint8_t * buffer , int len)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b087      	sub	sp, #28
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	460b      	mov	r3, r1
 80011c8:	72fb      	strb	r3, [r7, #11]

	i2c->CR2  = ((address << 1) << I2C_CR2_SADD_Pos) ;  // set the slave address
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	605a      	str	r2, [r3, #4]
	i2c->CR2 |=   (len << I2C_CR2_NBYTES_Pos);		   // set the number of bytes to be transmitted
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	0412      	lsls	r2, r2, #16
 80011dc:	431a      	orrs	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= (1<<I2C_CR2_RD_WRN_Pos);                            	 // i2c read
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START; 					   	// generate the start condition
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	605a      	str	r2, [r3, #4]


	 for( int i = 0 ;i<len ;i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e01d      	b.n	800123c <I2C_Read+0x82>
	 {
		 while((i2c->ISR & I2C_ISR_RXNE) == 0) ; //wait for rx data
 8001200:	bf00      	nop
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <I2C_Read+0x48>

		 *buffer = i2c->RXDR ;     //read rx
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	b2da      	uxtb	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	701a      	strb	r2, [r3, #0]

		 buffer++ ;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3301      	adds	r3, #1
 800121c:	607b      	str	r3, [r7, #4]

		 if(i == len - 1)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	429a      	cmp	r2, r3
 8001226:	d106      	bne.n	8001236 <I2C_Read+0x7c>
		 {
			 while((i2c->ISR & I2C_ISR_TC) == 0) ; //wait for TC Flag
 8001228:	bf00      	nop
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f9      	beq.n	800122a <I2C_Read+0x70>
	 for( int i = 0 ;i<len ;i++)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbdd      	blt.n	8001200 <I2C_Read+0x46>
		 else{
			 //nope
		 }
	 }

	 i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	605a      	str	r2, [r3, #4]
}
 8001250:	bf00      	nop
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
	...

0800125c <keypad_init>:
 * Let's assume your program switches all four columns to low and then switches the first row to high.
 * Then it reads the input states of each column and reads pin 1 high.
 * This means that a contact has been made between column 4 and row 1, so the 'A' key has been pressed.
 */
void keypad_init(GPIO_TypeDef * port , int s_pin)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	keypad_port = port   ;
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <keypad_init+0x2c>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6013      	str	r3, [r2, #0]
	start_pin   = s_pin  ;
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <keypad_init+0x30>)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	6013      	str	r3, [r2, #0]
	gpio_clock_enable(port) ;
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fd8a 	bl	8000d8c <gpio_clock_enable>
	keypad_config_key_direction(port , s_pin) ;////set  the first 4 pins as output and the second 4 pins as input
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f808 	bl	8001290 <keypad_config_key_direction>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000cc4 	.word	0x20000cc4
 800128c:	20000cc8 	.word	0x20000cc8

08001290 <keypad_config_key_direction>:
 */



static void keypad_config_key_direction( GPIO_TypeDef * port , int s_pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af02      	add	r7, sp, #8
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fde6 	bl	8000e6c <reset_io>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r1  1
 80012a0:	6839      	ldr	r1, [r7, #0]
 80012a2:	1c4b      	adds	r3, r1, #1
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	2300      	movs	r3, #0
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	2300      	movs	r3, #0
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2300      	movs	r3, #0
 80012b0:	2201      	movs	r2, #1
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fdef 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r2  0
 80012b8:	6839      	ldr	r1, [r7, #0]
 80012ba:	1c4b      	adds	r3, r1, #1
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	2300      	movs	r3, #0
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	2300      	movs	r3, #0
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2300      	movs	r3, #0
 80012c8:	2201      	movs	r2, #1
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fde3 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r3  0
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	1c4b      	adds	r3, r1, #1
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	2300      	movs	r3, #0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	2201      	movs	r2, #1
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fdd7 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r4  0
 80012e8:	6839      	ldr	r1, [r7, #0]
 80012ea:	1c4b      	adds	r3, r1, #1
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2300      	movs	r3, #0
 80012f8:	2201      	movs	r2, #1
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fdcb 	bl	8000e96 <gpio_config_pin>
	//configure the pins as Intput with pull-up
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C1  1
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	1c4b      	adds	r3, r1, #1
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	2300      	movs	r3, #0
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	2301      	movs	r3, #1
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2300      	movs	r3, #0
 8001310:	2200      	movs	r2, #0
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fdbf 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C2  0
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	1c4b      	adds	r3, r1, #1
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	2300      	movs	r3, #0
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	2301      	movs	r3, #1
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	2200      	movs	r2, #0
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fdb3 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C3  1
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	1c4b      	adds	r3, r1, #1
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	2301      	movs	r3, #1
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	2200      	movs	r2, #0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fda7 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C4  1
 8001348:	6839      	ldr	r1, [r7, #0]
 800134a:	1c4b      	adds	r3, r1, #1
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	2301      	movs	r3, #1
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2300      	movs	r3, #0
 8001358:	2200      	movs	r2, #0
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fd9b 	bl	8000e96 <gpio_config_pin>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <keypad_inverse_pin_direction>:

static void keypad_inverse_pin_direction( GPIO_TypeDef * port , int s_pin)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af02      	add	r7, sp, #8
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fd7a 	bl	8000e6c <reset_io>
	//configure the pins as Intput with pull-down
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R1     0
 8001378:	6839      	ldr	r1, [r7, #0]
 800137a:	1c4b      	adds	r3, r1, #1
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	2300      	movs	r3, #0
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	2302      	movs	r3, #2
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2300      	movs	r3, #0
 8001388:	2200      	movs	r2, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fd83 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R2     1
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	1c4b      	adds	r3, r1, #1
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	2302      	movs	r3, #2
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	2200      	movs	r2, #0
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fd77 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R3     1
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	1c4b      	adds	r3, r1, #1
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	2302      	movs	r3, #2
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2300      	movs	r3, #0
 80013b8:	2200      	movs	r2, #0
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fd6b 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN  , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R4     1
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	1c4b      	adds	r3, r1, #1
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2302      	movs	r3, #2
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2300      	movs	r3, #0
 80013d0:	2200      	movs	r2, #0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fd5f 	bl	8000e96 <gpio_config_pin>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C1     0
 80013d8:	6839      	ldr	r1, [r7, #0]
 80013da:	1c4b      	adds	r3, r1, #1
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	2300      	movs	r3, #0
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	2201      	movs	r2, #1
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fd53 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C2     1
 80013f0:	6839      	ldr	r1, [r7, #0]
 80013f2:	1c4b      	adds	r3, r1, #1
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2300      	movs	r3, #0
 8001400:	2201      	movs	r2, #1
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fd47 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C3     0
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	1c4b      	adds	r3, r1, #1
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	2300      	movs	r3, #0
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	2201      	movs	r2, #1
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fd3b 	bl	8000e96 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C4     0
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	1c4b      	adds	r3, r1, #1
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	2300      	movs	r3, #0
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	2201      	movs	r2, #1
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fd2f 	bl	8000e96 <gpio_config_pin>

}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <keypad_get_pressedkey>:

/**
 * return the pressedkey other wise 0
 */
char keypad_get_pressedkey()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0

	uint16_t porte = 0;   // set porte to zero where the pins of the used GPIO port (C , Pins : 0-15) will be stored.
 8001446:	2300      	movs	r3, #0
 8001448:	817b      	strh	r3, [r7, #10]
	porte = GPIOC->IDR ; /* IDR is one of the GPIO registers that contains the input states of the pins of a GPIO port.
 800144a:	4b51      	ldr	r3, [pc, #324]	; (8001590 <keypad_get_pressedkey+0x150>)
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	817b      	strh	r3, [r7, #10]
	                      * We can read the whole pin status of a GPIO port with the IDR register.
	                      */
    uint8_t  eidr  = 0;  // set eidr to zero where only the 8 used pins will be stored.
 8001450:	2300      	movs	r3, #0
 8001452:	727b      	strb	r3, [r7, #9]
	uint8_t  ch    = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	723b      	strb	r3, [r7, #8]
	char ret = 0 ;
 8001458:	2300      	movs	r3, #0
 800145a:	75fb      	strb	r3, [r7, #23]

    switch(state)
 800145c:	4b4d      	ldr	r3, [pc, #308]	; (8001594 <keypad_get_pressedkey+0x154>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b02      	cmp	r3, #2
 8001462:	f000 8087 	beq.w	8001574 <keypad_get_pressedkey+0x134>
 8001466:	2b02      	cmp	r3, #2
 8001468:	f300 8088 	bgt.w	800157c <keypad_get_pressedkey+0x13c>
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <keypad_get_pressedkey+0x36>
 8001470:	2b01      	cmp	r3, #1
 8001472:	d072      	beq.n	800155a <keypad_get_pressedkey+0x11a>

				state = State_free ;
				break ;
			}
		default :
			break ;
 8001474:	e082      	b.n	800157c <keypad_get_pressedkey+0x13c>
				eidr = (porte >> start_pin) ;//  & 0xff ; // get the state od the keypad pins
 8001476:	897a      	ldrh	r2, [r7, #10]
 8001478:	4b47      	ldr	r3, [pc, #284]	; (8001598 <keypad_get_pressedkey+0x158>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fa42 f303 	asr.w	r3, r2, r3
 8001480:	727b      	strb	r3, [r7, #9]
				if(eidr != DEFAULT_KEYPAD_PORT_INP)       // if now the value is different than the DEFAULT_KEYPAD_PORT_INP 0xf0
 8001482:	7a7b      	ldrb	r3, [r7, #9]
 8001484:	2bf0      	cmp	r3, #240	; 0xf0
 8001486:	d07b      	beq.n	8001580 <keypad_get_pressedkey+0x140>
					ch = ~eidr;                           // set the inverse of eidr in ch
 8001488:	7a7b      	ldrb	r3, [r7, #9]
 800148a:	43db      	mvns	r3, r3
 800148c:	723b      	strb	r3, [r7, #8]
					ch = ch & DEFAULT_KEYPAD_PORT_INP;    // with the addition of 0xf0 we get 1 in the changed bit position
 800148e:	7a3b      	ldrb	r3, [r7, #8]
 8001490:	f023 030f 	bic.w	r3, r3, #15
 8001494:	723b      	strb	r3, [r7, #8]
					keypad_inverse_pin_direction(keypad_port ,start_pin ) ;
 8001496:	4b41      	ldr	r3, [pc, #260]	; (800159c <keypad_get_pressedkey+0x15c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a3f      	ldr	r2, [pc, #252]	; (8001598 <keypad_get_pressedkey+0x158>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff61 	bl	8001368 <keypad_inverse_pin_direction>
					uint16_t out = (ch << start_pin) ;  //
 80014a6:	7a3a      	ldrb	r2, [r7, #8]
 80014a8:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <keypad_get_pressedkey+0x158>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	80fb      	strh	r3, [r7, #6]
					keypad_port->ODR = out ;
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <keypad_get_pressedkey+0x15c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	88fa      	ldrh	r2, [r7, #6]
 80014b8:	615a      	str	r2, [r3, #20]
					delay_ms(1) ;
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff f858 	bl	8000570 <delay_ms>
					porte = keypad_port->IDR ;//get the state of input port
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <keypad_get_pressedkey+0x15c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	817b      	strh	r3, [r7, #10]
					eidr = (porte >> start_pin) ;//& 0xff ; //get the state of keypad pins
 80014c8:	897a      	ldrh	r2, [r7, #10]
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <keypad_get_pressedkey+0x158>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fa42 f303 	asr.w	r3, r2, r3
 80014d2:	727b      	strb	r3, [r7, #9]
					int col = 0 ;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
					for(col = 0 ; col <4 ; col++)
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	e00d      	b.n	80014fa <keypad_get_pressedkey+0xba>
						if(   (((eidr & 0xf0) >> 4) &  (1<<col)) != 0 )
 80014de:	7a7b      	ldrb	r3, [r7, #9]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	fa42 f303 	asr.w	r3, r2, r3
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <keypad_get_pressedkey+0xc2>
					for(col = 0 ; col <4 ; col++)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	3301      	adds	r3, #1
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	ddee      	ble.n	80014de <keypad_get_pressedkey+0x9e>
 8001500:	e000      	b.n	8001504 <keypad_get_pressedkey+0xc4>
							break ;
 8001502:	bf00      	nop
					int row = 0 ;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
					for(row = 0 ; row <4 ; row++)
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e00c      	b.n	8001528 <keypad_get_pressedkey+0xe8>
						if( ((eidr & 0x0f) & (1<<row)) != 0)
 800150e:	7a7b      	ldrb	r3, [r7, #9]
 8001510:	f003 020f 	and.w	r2, r3, #15
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	fa42 f303 	asr.w	r3, r2, r3
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <keypad_get_pressedkey+0xf0>
					for(row = 0 ; row <4 ; row++)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3301      	adds	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b03      	cmp	r3, #3
 800152c:	ddef      	ble.n	800150e <keypad_get_pressedkey+0xce>
 800152e:	e000      	b.n	8001532 <keypad_get_pressedkey+0xf2>
							break ;
 8001530:	bf00      	nop
					ret = keys[row][col] ;
 8001532:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <keypad_get_pressedkey+0x160>)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	441a      	add	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4413      	add	r3, r2
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	75fb      	strb	r3, [r7, #23]
					keypad_config_key_direction(keypad_port ,start_pin ) ;
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <keypad_get_pressedkey+0x15c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a14      	ldr	r2, [pc, #80]	; (8001598 <keypad_get_pressedkey+0x158>)
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fe9f 	bl	8001290 <keypad_config_key_direction>
					state = State_key_pressed ;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <keypad_get_pressedkey+0x154>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
				break ;
 8001558:	e012      	b.n	8001580 <keypad_get_pressedkey+0x140>
				eidr = (porte >> start_pin) & 0xff ;
 800155a:	897a      	ldrh	r2, [r7, #10]
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <keypad_get_pressedkey+0x158>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa42 f303 	asr.w	r3, r2, r3
 8001564:	727b      	strb	r3, [r7, #9]
				if(eidr == DEFAULT_KEYPAD_PORT_INP)
 8001566:	7a7b      	ldrb	r3, [r7, #9]
 8001568:	2bf0      	cmp	r3, #240	; 0xf0
 800156a:	d10b      	bne.n	8001584 <keypad_get_pressedkey+0x144>
					state = State_key_released ;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <keypad_get_pressedkey+0x154>)
 800156e:	2202      	movs	r2, #2
 8001570:	701a      	strb	r2, [r3, #0]
				break ;
 8001572:	e007      	b.n	8001584 <keypad_get_pressedkey+0x144>
				state = State_free ;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <keypad_get_pressedkey+0x154>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
				break ;
 800157a:	e004      	b.n	8001586 <keypad_get_pressedkey+0x146>
			break ;
 800157c:	bf00      	nop
 800157e:	e002      	b.n	8001586 <keypad_get_pressedkey+0x146>
				break ;
 8001580:	bf00      	nop
 8001582:	e000      	b.n	8001586 <keypad_get_pressedkey+0x146>
				break ;
 8001584:	bf00      	nop

	}


	return ret ;
 8001586:	7dfb      	ldrb	r3, [r7, #23]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	48000800 	.word	0x48000800
 8001594:	20000ccc 	.word	0x20000ccc
 8001598:	20000cc8 	.word	0x20000cc8
 800159c:	20000cc4 	.word	0x20000cc4
 80015a0:	2000000c 	.word	0x2000000c

080015a4 <rtc_write_reg>:

I2C_TypeDef * rtc_i2c ;
uint8_t tm;

static void rtc_write_reg(uint8_t address ,uint8_t reg , uint8_t  data , int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	460b      	mov	r3, r1
 80015b2:	71bb      	strb	r3, [r7, #6]
 80015b4:	4613      	mov	r3, r2
 80015b6:	717b      	strb	r3, [r7, #5]
	uint8_t tmp[2] ;

	tmp[0]  = reg ;
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	733b      	strb	r3, [r7, #12]
	tmp[1]  = data ;
 80015bc:	797b      	ldrb	r3, [r7, #5]
 80015be:	737b      	strb	r3, [r7, #13]

	I2C_Write(rtc_i2c , address , tmp ,2 ) ;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <rtc_write_reg+0x34>)
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	f107 020c 	add.w	r2, r7, #12
 80015c8:	79f9      	ldrb	r1, [r7, #7]
 80015ca:	2302      	movs	r3, #2
 80015cc:	f7ff fdac 	bl	8001128 <I2C_Write>
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000cd0 	.word	0x20000cd0

080015dc <rtc_init>:
	I2C_Write(rtc_i2c , address , &reg , 1 ) ;
	I2C_Read(rtc_i2c , address , &data[reg] , 1) ;
}

void rtc_init(I2C_TypeDef * dev)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	rtc_i2c = dev ;
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <rtc_init+0x18>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000cd0 	.word	0x20000cd0

080015f8 <rtc_get_reg>:
	rtc_bufferOut[12]= year_zehner/16;

}

uint8_t rtc_get_reg(uint8_t reg)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	uint8_t val ;

	I2C_Write(rtc_i2c , RTC_I2C_ADDR , &reg  , 1) ;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <rtc_get_reg+0x38>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	1dfa      	adds	r2, r7, #7
 8001608:	2301      	movs	r3, #1
 800160a:	2168      	movs	r1, #104	; 0x68
 800160c:	f7ff fd8c 	bl	8001128 <I2C_Write>

	delay_ms(2);
 8001610:	2002      	movs	r0, #2
 8001612:	f7fe ffad 	bl	8000570 <delay_ms>

	I2C_Read(rtc_i2c  , RTC_I2C_ADDR , &val , 1) ;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <rtc_get_reg+0x38>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	f107 020f 	add.w	r2, r7, #15
 800161e:	2301      	movs	r3, #1
 8001620:	2168      	movs	r1, #104	; 0x68
 8001622:	f7ff fdca 	bl	80011ba <I2C_Read>

	return val ;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000cd0 	.word	0x20000cd0

08001634 <rtc_get_time>:

void rtc_get_time(rtc_time_t * rtc_time )
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = rtc_get_reg(RTC_REG_SECOND) ;
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff ffdb 	bl	80015f8 <rtc_get_reg>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
	tm = tmp ;
 8001646:	4a38      	ldr	r2, [pc, #224]	; (8001728 <rtc_get_time+0xf4>)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	7013      	strb	r3, [r2, #0]
	//BCD --> DEC
	rtc_time->sec  = ((tmp >> 4) & 0x0f) * 10 + (tmp & 0x0f) ;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	b2da      	uxtb	r2, r3
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4413      	add	r3, r2
 8001666:	b2da      	uxtb	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	701a      	strb	r2, [r3, #0]

	tmp = rtc_get_reg(RTC_REG_MINUTE) ;
 800166c:	2001      	movs	r0, #1
 800166e:	f7ff ffc3 	bl	80015f8 <rtc_get_reg>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
	//BCD --> DEC
	rtc_time->min  = ((tmp >> 4) & 0x0f) * 10 + (tmp & 0x0f) ;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4413      	add	r3, r2
 8001690:	b2da      	uxtb	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	705a      	strb	r2, [r3, #1]

	tmp = rtc_get_reg(RTC_REG_HOUR) ;
 8001696:	2002      	movs	r0, #2
 8001698:	f7ff ffae 	bl	80015f8 <rtc_get_reg>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]


	if( (tmp & RTC_BIT_MODE_MASK) != 0)
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d022      	beq.n	80016f0 <rtc_get_time+0xbc>
	{
		//12 hour mode
		rtc_time->mode = H_12 ;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	70da      	strb	r2, [r3, #3]
		if((tmp & RTC_AM_PM_BIT_MASK) != 0)
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	f003 0320 	and.w	r3, r3, #32
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <rtc_get_time+0x8e>
		{
			rtc_time->am_pm = PM ;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	711a      	strb	r2, [r3, #4]
 80016c0:	e002      	b.n	80016c8 <rtc_get_time+0x94>
		}
		else{
			rtc_time->am_pm = AM ;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	711a      	strb	r2, [r3, #4]
		}

		rtc_time->hr = ((tmp & 0x1f) >> 4) * 10 + (tmp & 0x0f) ;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	111b      	asrs	r3, r3, #4
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4413      	add	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	709a      	strb	r2, [r3, #2]
		rtc_time->mode = H_24 ;
		tmp = RTC_24H_MASK & tmp ;
		rtc_time->hr = (tmp >> 4) * 10 + (tmp & 0x0f) ;
	}

}
 80016ee:	e016      	b.n	800171e <rtc_get_time+0xea>
		rtc_time->mode = H_24 ;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	70da      	strb	r2, [r3, #3]
		tmp = RTC_24H_MASK & tmp ;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016fc:	73fb      	strb	r3, [r7, #15]
		rtc_time->hr = (tmp >> 4) * 10 + (tmp & 0x0f) ;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	4413      	add	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	b2da      	uxtb	r2, r3
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	b2db      	uxtb	r3, r3
 8001716:	4413      	add	r3, r2
 8001718:	b2da      	uxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	709a      	strb	r2, [r3, #2]
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000cd4 	.word	0x20000cd4

0800172c <rtc_set_date>:

}


void rtc_set_date(rtc_date_t *date)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	uint8_t low  = date->day % 10 ;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	4b32      	ldr	r3, [pc, #200]	; (8001804 <rtc_set_date+0xd8>)
 800173a:	fba3 1302 	umull	r1, r3, r3, r2
 800173e:	08d9      	lsrs	r1, r3, #3
 8001740:	460b      	mov	r3, r1
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	73fb      	strb	r3, [r7, #15]
	uint8_t high = date->day / 10 ;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4a2c      	ldr	r2, [pc, #176]	; (8001804 <rtc_set_date+0xd8>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	08db      	lsrs	r3, r3, #3
 8001758:	73bb      	strb	r3, [r7, #14]

	uint8_t tmp  = (high << 4 )|low ;
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	b25a      	sxtb	r2, r3
 8001760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001764:	4313      	orrs	r3, r2
 8001766:	b25b      	sxtb	r3, r3
 8001768:	737b      	strb	r3, [r7, #13]

	rtc_write_reg( RTC_I2C_ADDR , RTC_REG_DATE ,tmp , 1) ;
 800176a:	7b7a      	ldrb	r2, [r7, #13]
 800176c:	2301      	movs	r3, #1
 800176e:	2104      	movs	r1, #4
 8001770:	2068      	movs	r0, #104	; 0x68
 8001772:	f7ff ff17 	bl	80015a4 <rtc_write_reg>

	low  = date->month % 10 ;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	785a      	ldrb	r2, [r3, #1]
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <rtc_set_date+0xd8>)
 800177c:	fba3 1302 	umull	r1, r3, r3, r2
 8001780:	08d9      	lsrs	r1, r3, #3
 8001782:	460b      	mov	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	73fb      	strb	r3, [r7, #15]
	high = date->month / 10 ;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	785b      	ldrb	r3, [r3, #1]
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <rtc_set_date+0xd8>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	08db      	lsrs	r3, r3, #3
 800179a:	73bb      	strb	r3, [r7, #14]

	tmp  = (high << 4 )|low ;
 800179c:	7bbb      	ldrb	r3, [r7, #14]
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	b25a      	sxtb	r2, r3
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	737b      	strb	r3, [r7, #13]

	rtc_write_reg( RTC_I2C_ADDR , RTC_REG_MONTH ,tmp , 1) ;
 80017ac:	7b7a      	ldrb	r2, [r7, #13]
 80017ae:	2301      	movs	r3, #1
 80017b0:	2105      	movs	r1, #5
 80017b2:	2068      	movs	r0, #104	; 0x68
 80017b4:	f7ff fef6 	bl	80015a4 <rtc_write_reg>

	low  = date->year % 10 ;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	789a      	ldrb	r2, [r3, #2]
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <rtc_set_date+0xd8>)
 80017be:	fba3 1302 	umull	r1, r3, r3, r2
 80017c2:	08d9      	lsrs	r1, r3, #3
 80017c4:	460b      	mov	r3, r1
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	73fb      	strb	r3, [r7, #15]
	high = date->year / 10 ;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	789b      	ldrb	r3, [r3, #2]
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <rtc_set_date+0xd8>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	73bb      	strb	r3, [r7, #14]

	tmp  = (high << 4 )|low ;
 80017de:	7bbb      	ldrb	r3, [r7, #14]
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	737b      	strb	r3, [r7, #13]

	rtc_write_reg( RTC_I2C_ADDR , RTC_REG_YEAR ,tmp , 1) ;
 80017ee:	7b7a      	ldrb	r2, [r7, #13]
 80017f0:	2301      	movs	r3, #1
 80017f2:	2106      	movs	r1, #6
 80017f4:	2068      	movs	r0, #104	; 0x68
 80017f6:	f7ff fed5 	bl	80015a4 <rtc_write_reg>

}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	cccccccd 	.word	0xcccccccd

08001808 <rtc_get_date>:

void rtc_get_date(rtc_date_t * date)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = rtc_get_reg(RTC_REG_DATE) ;
 8001810:	2004      	movs	r0, #4
 8001812:	f7ff fef1 	bl	80015f8 <rtc_get_reg>
 8001816:	4603      	mov	r3, r0
 8001818:	73fb      	strb	r3, [r7, #15]

	date->day = (tmp >> 4)*10 + (tmp & 0x0f) ;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	4413      	add	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	b2da      	uxtb	r2, r3
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4413      	add	r3, r2
 8001834:	b2da      	uxtb	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	701a      	strb	r2, [r3, #0]

	tmp = rtc_get_reg(RTC_REG_MONTH) ;
 800183a:	2005      	movs	r0, #5
 800183c:	f7ff fedc 	bl	80015f8 <rtc_get_reg>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]

	tmp &= 0x7f ;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800184a:	73fb      	strb	r3, [r7, #15]

	date->month = (tmp >> 4) *10 +(tmp & 0x0f) ;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	0092      	lsls	r2, r2, #2
 8001856:	4413      	add	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b2da      	uxtb	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	705a      	strb	r2, [r3, #1]

	tmp = rtc_get_reg(RTC_REG_YEAR) ;
 800186c:	2006      	movs	r0, #6
 800186e:	f7ff fec3 	bl	80015f8 <rtc_get_reg>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]

	date->year = (tmp >> 4) *10 +(tmp & 0x0f) ;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	b2db      	uxtb	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	4413      	add	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	b2db      	uxtb	r3, r3
 800188e:	4413      	add	r3, r2
 8001890:	b2da      	uxtb	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	709a      	strb	r2, [r3, #2]
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <__libc_init_array>:
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	4d0d      	ldr	r5, [pc, #52]	; (80018d8 <__libc_init_array+0x38>)
 80018a4:	4c0d      	ldr	r4, [pc, #52]	; (80018dc <__libc_init_array+0x3c>)
 80018a6:	1b64      	subs	r4, r4, r5
 80018a8:	10a4      	asrs	r4, r4, #2
 80018aa:	2600      	movs	r6, #0
 80018ac:	42a6      	cmp	r6, r4
 80018ae:	d109      	bne.n	80018c4 <__libc_init_array+0x24>
 80018b0:	4d0b      	ldr	r5, [pc, #44]	; (80018e0 <__libc_init_array+0x40>)
 80018b2:	4c0c      	ldr	r4, [pc, #48]	; (80018e4 <__libc_init_array+0x44>)
 80018b4:	f000 fc9a 	bl	80021ec <_init>
 80018b8:	1b64      	subs	r4, r4, r5
 80018ba:	10a4      	asrs	r4, r4, #2
 80018bc:	2600      	movs	r6, #0
 80018be:	42a6      	cmp	r6, r4
 80018c0:	d105      	bne.n	80018ce <__libc_init_array+0x2e>
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
 80018c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018c8:	4798      	blx	r3
 80018ca:	3601      	adds	r6, #1
 80018cc:	e7ee      	b.n	80018ac <__libc_init_array+0xc>
 80018ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80018d2:	4798      	blx	r3
 80018d4:	3601      	adds	r6, #1
 80018d6:	e7f2      	b.n	80018be <__libc_init_array+0x1e>
 80018d8:	080031c8 	.word	0x080031c8
 80018dc:	080031c8 	.word	0x080031c8
 80018e0:	080031c8 	.word	0x080031c8
 80018e4:	080031cc 	.word	0x080031cc

080018e8 <memset>:
 80018e8:	4402      	add	r2, r0
 80018ea:	4603      	mov	r3, r0
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d100      	bne.n	80018f2 <memset+0xa>
 80018f0:	4770      	bx	lr
 80018f2:	f803 1b01 	strb.w	r1, [r3], #1
 80018f6:	e7f9      	b.n	80018ec <memset+0x4>

080018f8 <siprintf>:
 80018f8:	b40e      	push	{r1, r2, r3}
 80018fa:	b500      	push	{lr}
 80018fc:	b09c      	sub	sp, #112	; 0x70
 80018fe:	ab1d      	add	r3, sp, #116	; 0x74
 8001900:	9002      	str	r0, [sp, #8]
 8001902:	9006      	str	r0, [sp, #24]
 8001904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001908:	4809      	ldr	r0, [pc, #36]	; (8001930 <siprintf+0x38>)
 800190a:	9107      	str	r1, [sp, #28]
 800190c:	9104      	str	r1, [sp, #16]
 800190e:	4909      	ldr	r1, [pc, #36]	; (8001934 <siprintf+0x3c>)
 8001910:	f853 2b04 	ldr.w	r2, [r3], #4
 8001914:	9105      	str	r1, [sp, #20]
 8001916:	6800      	ldr	r0, [r0, #0]
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	a902      	add	r1, sp, #8
 800191c:	f000 f868 	bl	80019f0 <_svfiprintf_r>
 8001920:	9b02      	ldr	r3, [sp, #8]
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	b01c      	add	sp, #112	; 0x70
 8001928:	f85d eb04 	ldr.w	lr, [sp], #4
 800192c:	b003      	add	sp, #12
 800192e:	4770      	bx	lr
 8001930:	2000001c 	.word	0x2000001c
 8001934:	ffff0208 	.word	0xffff0208

08001938 <__ssputs_r>:
 8001938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800193c:	688e      	ldr	r6, [r1, #8]
 800193e:	429e      	cmp	r6, r3
 8001940:	4682      	mov	sl, r0
 8001942:	460c      	mov	r4, r1
 8001944:	4690      	mov	r8, r2
 8001946:	461f      	mov	r7, r3
 8001948:	d838      	bhi.n	80019bc <__ssputs_r+0x84>
 800194a:	898a      	ldrh	r2, [r1, #12]
 800194c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001950:	d032      	beq.n	80019b8 <__ssputs_r+0x80>
 8001952:	6825      	ldr	r5, [r4, #0]
 8001954:	6909      	ldr	r1, [r1, #16]
 8001956:	eba5 0901 	sub.w	r9, r5, r1
 800195a:	6965      	ldr	r5, [r4, #20]
 800195c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001964:	3301      	adds	r3, #1
 8001966:	444b      	add	r3, r9
 8001968:	106d      	asrs	r5, r5, #1
 800196a:	429d      	cmp	r5, r3
 800196c:	bf38      	it	cc
 800196e:	461d      	movcc	r5, r3
 8001970:	0553      	lsls	r3, r2, #21
 8001972:	d531      	bpl.n	80019d8 <__ssputs_r+0xa0>
 8001974:	4629      	mov	r1, r5
 8001976:	f000 fb61 	bl	800203c <_malloc_r>
 800197a:	4606      	mov	r6, r0
 800197c:	b950      	cbnz	r0, 8001994 <__ssputs_r+0x5c>
 800197e:	230c      	movs	r3, #12
 8001980:	f8ca 3000 	str.w	r3, [sl]
 8001984:	89a3      	ldrh	r3, [r4, #12]
 8001986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800198a:	81a3      	strh	r3, [r4, #12]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001994:	6921      	ldr	r1, [r4, #16]
 8001996:	464a      	mov	r2, r9
 8001998:	f000 fabe 	bl	8001f18 <memcpy>
 800199c:	89a3      	ldrh	r3, [r4, #12]
 800199e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80019a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a6:	81a3      	strh	r3, [r4, #12]
 80019a8:	6126      	str	r6, [r4, #16]
 80019aa:	6165      	str	r5, [r4, #20]
 80019ac:	444e      	add	r6, r9
 80019ae:	eba5 0509 	sub.w	r5, r5, r9
 80019b2:	6026      	str	r6, [r4, #0]
 80019b4:	60a5      	str	r5, [r4, #8]
 80019b6:	463e      	mov	r6, r7
 80019b8:	42be      	cmp	r6, r7
 80019ba:	d900      	bls.n	80019be <__ssputs_r+0x86>
 80019bc:	463e      	mov	r6, r7
 80019be:	6820      	ldr	r0, [r4, #0]
 80019c0:	4632      	mov	r2, r6
 80019c2:	4641      	mov	r1, r8
 80019c4:	f000 fab6 	bl	8001f34 <memmove>
 80019c8:	68a3      	ldr	r3, [r4, #8]
 80019ca:	1b9b      	subs	r3, r3, r6
 80019cc:	60a3      	str	r3, [r4, #8]
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	4433      	add	r3, r6
 80019d2:	6023      	str	r3, [r4, #0]
 80019d4:	2000      	movs	r0, #0
 80019d6:	e7db      	b.n	8001990 <__ssputs_r+0x58>
 80019d8:	462a      	mov	r2, r5
 80019da:	f000 fba3 	bl	8002124 <_realloc_r>
 80019de:	4606      	mov	r6, r0
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d1e1      	bne.n	80019a8 <__ssputs_r+0x70>
 80019e4:	6921      	ldr	r1, [r4, #16]
 80019e6:	4650      	mov	r0, sl
 80019e8:	f000 fabe 	bl	8001f68 <_free_r>
 80019ec:	e7c7      	b.n	800197e <__ssputs_r+0x46>
	...

080019f0 <_svfiprintf_r>:
 80019f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019f4:	4698      	mov	r8, r3
 80019f6:	898b      	ldrh	r3, [r1, #12]
 80019f8:	061b      	lsls	r3, r3, #24
 80019fa:	b09d      	sub	sp, #116	; 0x74
 80019fc:	4607      	mov	r7, r0
 80019fe:	460d      	mov	r5, r1
 8001a00:	4614      	mov	r4, r2
 8001a02:	d50e      	bpl.n	8001a22 <_svfiprintf_r+0x32>
 8001a04:	690b      	ldr	r3, [r1, #16]
 8001a06:	b963      	cbnz	r3, 8001a22 <_svfiprintf_r+0x32>
 8001a08:	2140      	movs	r1, #64	; 0x40
 8001a0a:	f000 fb17 	bl	800203c <_malloc_r>
 8001a0e:	6028      	str	r0, [r5, #0]
 8001a10:	6128      	str	r0, [r5, #16]
 8001a12:	b920      	cbnz	r0, 8001a1e <_svfiprintf_r+0x2e>
 8001a14:	230c      	movs	r3, #12
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	e0d1      	b.n	8001bc2 <_svfiprintf_r+0x1d2>
 8001a1e:	2340      	movs	r3, #64	; 0x40
 8001a20:	616b      	str	r3, [r5, #20]
 8001a22:	2300      	movs	r3, #0
 8001a24:	9309      	str	r3, [sp, #36]	; 0x24
 8001a26:	2320      	movs	r3, #32
 8001a28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a30:	2330      	movs	r3, #48	; 0x30
 8001a32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001bdc <_svfiprintf_r+0x1ec>
 8001a36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a3a:	f04f 0901 	mov.w	r9, #1
 8001a3e:	4623      	mov	r3, r4
 8001a40:	469a      	mov	sl, r3
 8001a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a46:	b10a      	cbz	r2, 8001a4c <_svfiprintf_r+0x5c>
 8001a48:	2a25      	cmp	r2, #37	; 0x25
 8001a4a:	d1f9      	bne.n	8001a40 <_svfiprintf_r+0x50>
 8001a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8001a50:	d00b      	beq.n	8001a6a <_svfiprintf_r+0x7a>
 8001a52:	465b      	mov	r3, fp
 8001a54:	4622      	mov	r2, r4
 8001a56:	4629      	mov	r1, r5
 8001a58:	4638      	mov	r0, r7
 8001a5a:	f7ff ff6d 	bl	8001938 <__ssputs_r>
 8001a5e:	3001      	adds	r0, #1
 8001a60:	f000 80aa 	beq.w	8001bb8 <_svfiprintf_r+0x1c8>
 8001a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a66:	445a      	add	r2, fp
 8001a68:	9209      	str	r2, [sp, #36]	; 0x24
 8001a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80a2 	beq.w	8001bb8 <_svfiprintf_r+0x1c8>
 8001a74:	2300      	movs	r3, #0
 8001a76:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a7e:	f10a 0a01 	add.w	sl, sl, #1
 8001a82:	9304      	str	r3, [sp, #16]
 8001a84:	9307      	str	r3, [sp, #28]
 8001a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8001a8c:	4654      	mov	r4, sl
 8001a8e:	2205      	movs	r2, #5
 8001a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a94:	4851      	ldr	r0, [pc, #324]	; (8001bdc <_svfiprintf_r+0x1ec>)
 8001a96:	f7fe fba3 	bl	80001e0 <memchr>
 8001a9a:	9a04      	ldr	r2, [sp, #16]
 8001a9c:	b9d8      	cbnz	r0, 8001ad6 <_svfiprintf_r+0xe6>
 8001a9e:	06d0      	lsls	r0, r2, #27
 8001aa0:	bf44      	itt	mi
 8001aa2:	2320      	movmi	r3, #32
 8001aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001aa8:	0711      	lsls	r1, r2, #28
 8001aaa:	bf44      	itt	mi
 8001aac:	232b      	movmi	r3, #43	; 0x2b
 8001aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8001ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8001ab8:	d015      	beq.n	8001ae6 <_svfiprintf_r+0xf6>
 8001aba:	9a07      	ldr	r2, [sp, #28]
 8001abc:	4654      	mov	r4, sl
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f04f 0c0a 	mov.w	ip, #10
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001aca:	3b30      	subs	r3, #48	; 0x30
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d94e      	bls.n	8001b6e <_svfiprintf_r+0x17e>
 8001ad0:	b1b0      	cbz	r0, 8001b00 <_svfiprintf_r+0x110>
 8001ad2:	9207      	str	r2, [sp, #28]
 8001ad4:	e014      	b.n	8001b00 <_svfiprintf_r+0x110>
 8001ad6:	eba0 0308 	sub.w	r3, r0, r8
 8001ada:	fa09 f303 	lsl.w	r3, r9, r3
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	9304      	str	r3, [sp, #16]
 8001ae2:	46a2      	mov	sl, r4
 8001ae4:	e7d2      	b.n	8001a8c <_svfiprintf_r+0x9c>
 8001ae6:	9b03      	ldr	r3, [sp, #12]
 8001ae8:	1d19      	adds	r1, r3, #4
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	9103      	str	r1, [sp, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bfbb      	ittet	lt
 8001af2:	425b      	neglt	r3, r3
 8001af4:	f042 0202 	orrlt.w	r2, r2, #2
 8001af8:	9307      	strge	r3, [sp, #28]
 8001afa:	9307      	strlt	r3, [sp, #28]
 8001afc:	bfb8      	it	lt
 8001afe:	9204      	strlt	r2, [sp, #16]
 8001b00:	7823      	ldrb	r3, [r4, #0]
 8001b02:	2b2e      	cmp	r3, #46	; 0x2e
 8001b04:	d10c      	bne.n	8001b20 <_svfiprintf_r+0x130>
 8001b06:	7863      	ldrb	r3, [r4, #1]
 8001b08:	2b2a      	cmp	r3, #42	; 0x2a
 8001b0a:	d135      	bne.n	8001b78 <_svfiprintf_r+0x188>
 8001b0c:	9b03      	ldr	r3, [sp, #12]
 8001b0e:	1d1a      	adds	r2, r3, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	9203      	str	r2, [sp, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bfb8      	it	lt
 8001b18:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b1c:	3402      	adds	r4, #2
 8001b1e:	9305      	str	r3, [sp, #20]
 8001b20:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001be0 <_svfiprintf_r+0x1f0>
 8001b24:	7821      	ldrb	r1, [r4, #0]
 8001b26:	2203      	movs	r2, #3
 8001b28:	4650      	mov	r0, sl
 8001b2a:	f7fe fb59 	bl	80001e0 <memchr>
 8001b2e:	b140      	cbz	r0, 8001b42 <_svfiprintf_r+0x152>
 8001b30:	2340      	movs	r3, #64	; 0x40
 8001b32:	eba0 000a 	sub.w	r0, r0, sl
 8001b36:	fa03 f000 	lsl.w	r0, r3, r0
 8001b3a:	9b04      	ldr	r3, [sp, #16]
 8001b3c:	4303      	orrs	r3, r0
 8001b3e:	3401      	adds	r4, #1
 8001b40:	9304      	str	r3, [sp, #16]
 8001b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b46:	4827      	ldr	r0, [pc, #156]	; (8001be4 <_svfiprintf_r+0x1f4>)
 8001b48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b4c:	2206      	movs	r2, #6
 8001b4e:	f7fe fb47 	bl	80001e0 <memchr>
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d038      	beq.n	8001bc8 <_svfiprintf_r+0x1d8>
 8001b56:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <_svfiprintf_r+0x1f8>)
 8001b58:	bb1b      	cbnz	r3, 8001ba2 <_svfiprintf_r+0x1b2>
 8001b5a:	9b03      	ldr	r3, [sp, #12]
 8001b5c:	3307      	adds	r3, #7
 8001b5e:	f023 0307 	bic.w	r3, r3, #7
 8001b62:	3308      	adds	r3, #8
 8001b64:	9303      	str	r3, [sp, #12]
 8001b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b68:	4433      	add	r3, r6
 8001b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8001b6c:	e767      	b.n	8001a3e <_svfiprintf_r+0x4e>
 8001b6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b72:	460c      	mov	r4, r1
 8001b74:	2001      	movs	r0, #1
 8001b76:	e7a5      	b.n	8001ac4 <_svfiprintf_r+0xd4>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	3401      	adds	r4, #1
 8001b7c:	9305      	str	r3, [sp, #20]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 0c0a 	mov.w	ip, #10
 8001b84:	4620      	mov	r0, r4
 8001b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b8a:	3a30      	subs	r2, #48	; 0x30
 8001b8c:	2a09      	cmp	r2, #9
 8001b8e:	d903      	bls.n	8001b98 <_svfiprintf_r+0x1a8>
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0c5      	beq.n	8001b20 <_svfiprintf_r+0x130>
 8001b94:	9105      	str	r1, [sp, #20]
 8001b96:	e7c3      	b.n	8001b20 <_svfiprintf_r+0x130>
 8001b98:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e7f0      	b.n	8001b84 <_svfiprintf_r+0x194>
 8001ba2:	ab03      	add	r3, sp, #12
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	462a      	mov	r2, r5
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <_svfiprintf_r+0x1fc>)
 8001baa:	a904      	add	r1, sp, #16
 8001bac:	4638      	mov	r0, r7
 8001bae:	f3af 8000 	nop.w
 8001bb2:	1c42      	adds	r2, r0, #1
 8001bb4:	4606      	mov	r6, r0
 8001bb6:	d1d6      	bne.n	8001b66 <_svfiprintf_r+0x176>
 8001bb8:	89ab      	ldrh	r3, [r5, #12]
 8001bba:	065b      	lsls	r3, r3, #25
 8001bbc:	f53f af2c 	bmi.w	8001a18 <_svfiprintf_r+0x28>
 8001bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bc2:	b01d      	add	sp, #116	; 0x74
 8001bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bc8:	ab03      	add	r3, sp, #12
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	462a      	mov	r2, r5
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <_svfiprintf_r+0x1fc>)
 8001bd0:	a904      	add	r1, sp, #16
 8001bd2:	4638      	mov	r0, r7
 8001bd4:	f000 f87a 	bl	8001ccc <_printf_i>
 8001bd8:	e7eb      	b.n	8001bb2 <_svfiprintf_r+0x1c2>
 8001bda:	bf00      	nop
 8001bdc:	08003194 	.word	0x08003194
 8001be0:	0800319a 	.word	0x0800319a
 8001be4:	0800319e 	.word	0x0800319e
 8001be8:	00000000 	.word	0x00000000
 8001bec:	08001939 	.word	0x08001939

08001bf0 <_printf_common>:
 8001bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bf4:	4616      	mov	r6, r2
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	688a      	ldr	r2, [r1, #8]
 8001bfa:	690b      	ldr	r3, [r1, #16]
 8001bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c00:	4293      	cmp	r3, r2
 8001c02:	bfb8      	it	lt
 8001c04:	4613      	movlt	r3, r2
 8001c06:	6033      	str	r3, [r6, #0]
 8001c08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c0c:	4607      	mov	r7, r0
 8001c0e:	460c      	mov	r4, r1
 8001c10:	b10a      	cbz	r2, 8001c16 <_printf_common+0x26>
 8001c12:	3301      	adds	r3, #1
 8001c14:	6033      	str	r3, [r6, #0]
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	0699      	lsls	r1, r3, #26
 8001c1a:	bf42      	ittt	mi
 8001c1c:	6833      	ldrmi	r3, [r6, #0]
 8001c1e:	3302      	addmi	r3, #2
 8001c20:	6033      	strmi	r3, [r6, #0]
 8001c22:	6825      	ldr	r5, [r4, #0]
 8001c24:	f015 0506 	ands.w	r5, r5, #6
 8001c28:	d106      	bne.n	8001c38 <_printf_common+0x48>
 8001c2a:	f104 0a19 	add.w	sl, r4, #25
 8001c2e:	68e3      	ldr	r3, [r4, #12]
 8001c30:	6832      	ldr	r2, [r6, #0]
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	42ab      	cmp	r3, r5
 8001c36:	dc26      	bgt.n	8001c86 <_printf_common+0x96>
 8001c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c3c:	1e13      	subs	r3, r2, #0
 8001c3e:	6822      	ldr	r2, [r4, #0]
 8001c40:	bf18      	it	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	0692      	lsls	r2, r2, #26
 8001c46:	d42b      	bmi.n	8001ca0 <_printf_common+0xb0>
 8001c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	4638      	mov	r0, r7
 8001c50:	47c0      	blx	r8
 8001c52:	3001      	adds	r0, #1
 8001c54:	d01e      	beq.n	8001c94 <_printf_common+0xa4>
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	68e5      	ldr	r5, [r4, #12]
 8001c5a:	6832      	ldr	r2, [r6, #0]
 8001c5c:	f003 0306 	and.w	r3, r3, #6
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	bf08      	it	eq
 8001c64:	1aad      	subeq	r5, r5, r2
 8001c66:	68a3      	ldr	r3, [r4, #8]
 8001c68:	6922      	ldr	r2, [r4, #16]
 8001c6a:	bf0c      	ite	eq
 8001c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c70:	2500      	movne	r5, #0
 8001c72:	4293      	cmp	r3, r2
 8001c74:	bfc4      	itt	gt
 8001c76:	1a9b      	subgt	r3, r3, r2
 8001c78:	18ed      	addgt	r5, r5, r3
 8001c7a:	2600      	movs	r6, #0
 8001c7c:	341a      	adds	r4, #26
 8001c7e:	42b5      	cmp	r5, r6
 8001c80:	d11a      	bne.n	8001cb8 <_printf_common+0xc8>
 8001c82:	2000      	movs	r0, #0
 8001c84:	e008      	b.n	8001c98 <_printf_common+0xa8>
 8001c86:	2301      	movs	r3, #1
 8001c88:	4652      	mov	r2, sl
 8001c8a:	4649      	mov	r1, r9
 8001c8c:	4638      	mov	r0, r7
 8001c8e:	47c0      	blx	r8
 8001c90:	3001      	adds	r0, #1
 8001c92:	d103      	bne.n	8001c9c <_printf_common+0xac>
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c9c:	3501      	adds	r5, #1
 8001c9e:	e7c6      	b.n	8001c2e <_printf_common+0x3e>
 8001ca0:	18e1      	adds	r1, r4, r3
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	2030      	movs	r0, #48	; 0x30
 8001ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001caa:	4422      	add	r2, r4
 8001cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	e7c7      	b.n	8001c48 <_printf_common+0x58>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4622      	mov	r2, r4
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	47c0      	blx	r8
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	d0e6      	beq.n	8001c94 <_printf_common+0xa4>
 8001cc6:	3601      	adds	r6, #1
 8001cc8:	e7d9      	b.n	8001c7e <_printf_common+0x8e>
	...

08001ccc <_printf_i>:
 8001ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd0:	7e0f      	ldrb	r7, [r1, #24]
 8001cd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001cd4:	2f78      	cmp	r7, #120	; 0x78
 8001cd6:	4691      	mov	r9, r2
 8001cd8:	4680      	mov	r8, r0
 8001cda:	460c      	mov	r4, r1
 8001cdc:	469a      	mov	sl, r3
 8001cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ce2:	d807      	bhi.n	8001cf4 <_printf_i+0x28>
 8001ce4:	2f62      	cmp	r7, #98	; 0x62
 8001ce6:	d80a      	bhi.n	8001cfe <_printf_i+0x32>
 8001ce8:	2f00      	cmp	r7, #0
 8001cea:	f000 80d8 	beq.w	8001e9e <_printf_i+0x1d2>
 8001cee:	2f58      	cmp	r7, #88	; 0x58
 8001cf0:	f000 80a3 	beq.w	8001e3a <_printf_i+0x16e>
 8001cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001cfc:	e03a      	b.n	8001d74 <_printf_i+0xa8>
 8001cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d02:	2b15      	cmp	r3, #21
 8001d04:	d8f6      	bhi.n	8001cf4 <_printf_i+0x28>
 8001d06:	a101      	add	r1, pc, #4	; (adr r1, 8001d0c <_printf_i+0x40>)
 8001d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d0c:	08001d65 	.word	0x08001d65
 8001d10:	08001d79 	.word	0x08001d79
 8001d14:	08001cf5 	.word	0x08001cf5
 8001d18:	08001cf5 	.word	0x08001cf5
 8001d1c:	08001cf5 	.word	0x08001cf5
 8001d20:	08001cf5 	.word	0x08001cf5
 8001d24:	08001d79 	.word	0x08001d79
 8001d28:	08001cf5 	.word	0x08001cf5
 8001d2c:	08001cf5 	.word	0x08001cf5
 8001d30:	08001cf5 	.word	0x08001cf5
 8001d34:	08001cf5 	.word	0x08001cf5
 8001d38:	08001e85 	.word	0x08001e85
 8001d3c:	08001da9 	.word	0x08001da9
 8001d40:	08001e67 	.word	0x08001e67
 8001d44:	08001cf5 	.word	0x08001cf5
 8001d48:	08001cf5 	.word	0x08001cf5
 8001d4c:	08001ea7 	.word	0x08001ea7
 8001d50:	08001cf5 	.word	0x08001cf5
 8001d54:	08001da9 	.word	0x08001da9
 8001d58:	08001cf5 	.word	0x08001cf5
 8001d5c:	08001cf5 	.word	0x08001cf5
 8001d60:	08001e6f 	.word	0x08001e6f
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	1d1a      	adds	r2, r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	602a      	str	r2, [r5, #0]
 8001d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0a3      	b.n	8001ec0 <_printf_i+0x1f4>
 8001d78:	6820      	ldr	r0, [r4, #0]
 8001d7a:	6829      	ldr	r1, [r5, #0]
 8001d7c:	0606      	lsls	r6, r0, #24
 8001d7e:	f101 0304 	add.w	r3, r1, #4
 8001d82:	d50a      	bpl.n	8001d9a <_printf_i+0xce>
 8001d84:	680e      	ldr	r6, [r1, #0]
 8001d86:	602b      	str	r3, [r5, #0]
 8001d88:	2e00      	cmp	r6, #0
 8001d8a:	da03      	bge.n	8001d94 <_printf_i+0xc8>
 8001d8c:	232d      	movs	r3, #45	; 0x2d
 8001d8e:	4276      	negs	r6, r6
 8001d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d94:	485e      	ldr	r0, [pc, #376]	; (8001f10 <_printf_i+0x244>)
 8001d96:	230a      	movs	r3, #10
 8001d98:	e019      	b.n	8001dce <_printf_i+0x102>
 8001d9a:	680e      	ldr	r6, [r1, #0]
 8001d9c:	602b      	str	r3, [r5, #0]
 8001d9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001da2:	bf18      	it	ne
 8001da4:	b236      	sxthne	r6, r6
 8001da6:	e7ef      	b.n	8001d88 <_printf_i+0xbc>
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	6820      	ldr	r0, [r4, #0]
 8001dac:	1d19      	adds	r1, r3, #4
 8001dae:	6029      	str	r1, [r5, #0]
 8001db0:	0601      	lsls	r1, r0, #24
 8001db2:	d501      	bpl.n	8001db8 <_printf_i+0xec>
 8001db4:	681e      	ldr	r6, [r3, #0]
 8001db6:	e002      	b.n	8001dbe <_printf_i+0xf2>
 8001db8:	0646      	lsls	r6, r0, #25
 8001dba:	d5fb      	bpl.n	8001db4 <_printf_i+0xe8>
 8001dbc:	881e      	ldrh	r6, [r3, #0]
 8001dbe:	4854      	ldr	r0, [pc, #336]	; (8001f10 <_printf_i+0x244>)
 8001dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2308      	moveq	r3, #8
 8001dc6:	230a      	movne	r3, #10
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001dce:	6865      	ldr	r5, [r4, #4]
 8001dd0:	60a5      	str	r5, [r4, #8]
 8001dd2:	2d00      	cmp	r5, #0
 8001dd4:	bfa2      	ittt	ge
 8001dd6:	6821      	ldrge	r1, [r4, #0]
 8001dd8:	f021 0104 	bicge.w	r1, r1, #4
 8001ddc:	6021      	strge	r1, [r4, #0]
 8001dde:	b90e      	cbnz	r6, 8001de4 <_printf_i+0x118>
 8001de0:	2d00      	cmp	r5, #0
 8001de2:	d04d      	beq.n	8001e80 <_printf_i+0x1b4>
 8001de4:	4615      	mov	r5, r2
 8001de6:	fbb6 f1f3 	udiv	r1, r6, r3
 8001dea:	fb03 6711 	mls	r7, r3, r1, r6
 8001dee:	5dc7      	ldrb	r7, [r0, r7]
 8001df0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001df4:	4637      	mov	r7, r6
 8001df6:	42bb      	cmp	r3, r7
 8001df8:	460e      	mov	r6, r1
 8001dfa:	d9f4      	bls.n	8001de6 <_printf_i+0x11a>
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d10b      	bne.n	8001e18 <_printf_i+0x14c>
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	07de      	lsls	r6, r3, #31
 8001e04:	d508      	bpl.n	8001e18 <_printf_i+0x14c>
 8001e06:	6923      	ldr	r3, [r4, #16]
 8001e08:	6861      	ldr	r1, [r4, #4]
 8001e0a:	4299      	cmp	r1, r3
 8001e0c:	bfde      	ittt	le
 8001e0e:	2330      	movle	r3, #48	; 0x30
 8001e10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e18:	1b52      	subs	r2, r2, r5
 8001e1a:	6122      	str	r2, [r4, #16]
 8001e1c:	f8cd a000 	str.w	sl, [sp]
 8001e20:	464b      	mov	r3, r9
 8001e22:	aa03      	add	r2, sp, #12
 8001e24:	4621      	mov	r1, r4
 8001e26:	4640      	mov	r0, r8
 8001e28:	f7ff fee2 	bl	8001bf0 <_printf_common>
 8001e2c:	3001      	adds	r0, #1
 8001e2e:	d14c      	bne.n	8001eca <_printf_i+0x1fe>
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	b004      	add	sp, #16
 8001e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e3a:	4835      	ldr	r0, [pc, #212]	; (8001f10 <_printf_i+0x244>)
 8001e3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001e40:	6829      	ldr	r1, [r5, #0]
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e48:	6029      	str	r1, [r5, #0]
 8001e4a:	061d      	lsls	r5, r3, #24
 8001e4c:	d514      	bpl.n	8001e78 <_printf_i+0x1ac>
 8001e4e:	07df      	lsls	r7, r3, #31
 8001e50:	bf44      	itt	mi
 8001e52:	f043 0320 	orrmi.w	r3, r3, #32
 8001e56:	6023      	strmi	r3, [r4, #0]
 8001e58:	b91e      	cbnz	r6, 8001e62 <_printf_i+0x196>
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	f023 0320 	bic.w	r3, r3, #32
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	2310      	movs	r3, #16
 8001e64:	e7b0      	b.n	8001dc8 <_printf_i+0xfc>
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	6023      	str	r3, [r4, #0]
 8001e6e:	2378      	movs	r3, #120	; 0x78
 8001e70:	4828      	ldr	r0, [pc, #160]	; (8001f14 <_printf_i+0x248>)
 8001e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e76:	e7e3      	b.n	8001e40 <_printf_i+0x174>
 8001e78:	0659      	lsls	r1, r3, #25
 8001e7a:	bf48      	it	mi
 8001e7c:	b2b6      	uxthmi	r6, r6
 8001e7e:	e7e6      	b.n	8001e4e <_printf_i+0x182>
 8001e80:	4615      	mov	r5, r2
 8001e82:	e7bb      	b.n	8001dfc <_printf_i+0x130>
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	6826      	ldr	r6, [r4, #0]
 8001e88:	6961      	ldr	r1, [r4, #20]
 8001e8a:	1d18      	adds	r0, r3, #4
 8001e8c:	6028      	str	r0, [r5, #0]
 8001e8e:	0635      	lsls	r5, r6, #24
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	d501      	bpl.n	8001e98 <_printf_i+0x1cc>
 8001e94:	6019      	str	r1, [r3, #0]
 8001e96:	e002      	b.n	8001e9e <_printf_i+0x1d2>
 8001e98:	0670      	lsls	r0, r6, #25
 8001e9a:	d5fb      	bpl.n	8001e94 <_printf_i+0x1c8>
 8001e9c:	8019      	strh	r1, [r3, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	6123      	str	r3, [r4, #16]
 8001ea2:	4615      	mov	r5, r2
 8001ea4:	e7ba      	b.n	8001e1c <_printf_i+0x150>
 8001ea6:	682b      	ldr	r3, [r5, #0]
 8001ea8:	1d1a      	adds	r2, r3, #4
 8001eaa:	602a      	str	r2, [r5, #0]
 8001eac:	681d      	ldr	r5, [r3, #0]
 8001eae:	6862      	ldr	r2, [r4, #4]
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f7fe f994 	bl	80001e0 <memchr>
 8001eb8:	b108      	cbz	r0, 8001ebe <_printf_i+0x1f2>
 8001eba:	1b40      	subs	r0, r0, r5
 8001ebc:	6060      	str	r0, [r4, #4]
 8001ebe:	6863      	ldr	r3, [r4, #4]
 8001ec0:	6123      	str	r3, [r4, #16]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ec8:	e7a8      	b.n	8001e1c <_printf_i+0x150>
 8001eca:	6923      	ldr	r3, [r4, #16]
 8001ecc:	462a      	mov	r2, r5
 8001ece:	4649      	mov	r1, r9
 8001ed0:	4640      	mov	r0, r8
 8001ed2:	47d0      	blx	sl
 8001ed4:	3001      	adds	r0, #1
 8001ed6:	d0ab      	beq.n	8001e30 <_printf_i+0x164>
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	079b      	lsls	r3, r3, #30
 8001edc:	d413      	bmi.n	8001f06 <_printf_i+0x23a>
 8001ede:	68e0      	ldr	r0, [r4, #12]
 8001ee0:	9b03      	ldr	r3, [sp, #12]
 8001ee2:	4298      	cmp	r0, r3
 8001ee4:	bfb8      	it	lt
 8001ee6:	4618      	movlt	r0, r3
 8001ee8:	e7a4      	b.n	8001e34 <_printf_i+0x168>
 8001eea:	2301      	movs	r3, #1
 8001eec:	4632      	mov	r2, r6
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4640      	mov	r0, r8
 8001ef2:	47d0      	blx	sl
 8001ef4:	3001      	adds	r0, #1
 8001ef6:	d09b      	beq.n	8001e30 <_printf_i+0x164>
 8001ef8:	3501      	adds	r5, #1
 8001efa:	68e3      	ldr	r3, [r4, #12]
 8001efc:	9903      	ldr	r1, [sp, #12]
 8001efe:	1a5b      	subs	r3, r3, r1
 8001f00:	42ab      	cmp	r3, r5
 8001f02:	dcf2      	bgt.n	8001eea <_printf_i+0x21e>
 8001f04:	e7eb      	b.n	8001ede <_printf_i+0x212>
 8001f06:	2500      	movs	r5, #0
 8001f08:	f104 0619 	add.w	r6, r4, #25
 8001f0c:	e7f5      	b.n	8001efa <_printf_i+0x22e>
 8001f0e:	bf00      	nop
 8001f10:	080031a5 	.word	0x080031a5
 8001f14:	080031b6 	.word	0x080031b6

08001f18 <memcpy>:
 8001f18:	440a      	add	r2, r1
 8001f1a:	4291      	cmp	r1, r2
 8001f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f20:	d100      	bne.n	8001f24 <memcpy+0xc>
 8001f22:	4770      	bx	lr
 8001f24:	b510      	push	{r4, lr}
 8001f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f2e:	4291      	cmp	r1, r2
 8001f30:	d1f9      	bne.n	8001f26 <memcpy+0xe>
 8001f32:	bd10      	pop	{r4, pc}

08001f34 <memmove>:
 8001f34:	4288      	cmp	r0, r1
 8001f36:	b510      	push	{r4, lr}
 8001f38:	eb01 0402 	add.w	r4, r1, r2
 8001f3c:	d902      	bls.n	8001f44 <memmove+0x10>
 8001f3e:	4284      	cmp	r4, r0
 8001f40:	4623      	mov	r3, r4
 8001f42:	d807      	bhi.n	8001f54 <memmove+0x20>
 8001f44:	1e43      	subs	r3, r0, #1
 8001f46:	42a1      	cmp	r1, r4
 8001f48:	d008      	beq.n	8001f5c <memmove+0x28>
 8001f4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f52:	e7f8      	b.n	8001f46 <memmove+0x12>
 8001f54:	4402      	add	r2, r0
 8001f56:	4601      	mov	r1, r0
 8001f58:	428a      	cmp	r2, r1
 8001f5a:	d100      	bne.n	8001f5e <memmove+0x2a>
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f66:	e7f7      	b.n	8001f58 <memmove+0x24>

08001f68 <_free_r>:
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4605      	mov	r5, r0
 8001f6c:	2900      	cmp	r1, #0
 8001f6e:	d041      	beq.n	8001ff4 <_free_r+0x8c>
 8001f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f74:	1f0c      	subs	r4, r1, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bfb8      	it	lt
 8001f7a:	18e4      	addlt	r4, r4, r3
 8001f7c:	f000 f912 	bl	80021a4 <__malloc_lock>
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <_free_r+0x90>)
 8001f82:	6813      	ldr	r3, [r2, #0]
 8001f84:	b933      	cbnz	r3, 8001f94 <_free_r+0x2c>
 8001f86:	6063      	str	r3, [r4, #4]
 8001f88:	6014      	str	r4, [r2, #0]
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f90:	f000 b90e 	b.w	80021b0 <__malloc_unlock>
 8001f94:	42a3      	cmp	r3, r4
 8001f96:	d908      	bls.n	8001faa <_free_r+0x42>
 8001f98:	6820      	ldr	r0, [r4, #0]
 8001f9a:	1821      	adds	r1, r4, r0
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	bf01      	itttt	eq
 8001fa0:	6819      	ldreq	r1, [r3, #0]
 8001fa2:	685b      	ldreq	r3, [r3, #4]
 8001fa4:	1809      	addeq	r1, r1, r0
 8001fa6:	6021      	streq	r1, [r4, #0]
 8001fa8:	e7ed      	b.n	8001f86 <_free_r+0x1e>
 8001faa:	461a      	mov	r2, r3
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	b10b      	cbz	r3, 8001fb4 <_free_r+0x4c>
 8001fb0:	42a3      	cmp	r3, r4
 8001fb2:	d9fa      	bls.n	8001faa <_free_r+0x42>
 8001fb4:	6811      	ldr	r1, [r2, #0]
 8001fb6:	1850      	adds	r0, r2, r1
 8001fb8:	42a0      	cmp	r0, r4
 8001fba:	d10b      	bne.n	8001fd4 <_free_r+0x6c>
 8001fbc:	6820      	ldr	r0, [r4, #0]
 8001fbe:	4401      	add	r1, r0
 8001fc0:	1850      	adds	r0, r2, r1
 8001fc2:	4283      	cmp	r3, r0
 8001fc4:	6011      	str	r1, [r2, #0]
 8001fc6:	d1e0      	bne.n	8001f8a <_free_r+0x22>
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	6053      	str	r3, [r2, #4]
 8001fce:	4401      	add	r1, r0
 8001fd0:	6011      	str	r1, [r2, #0]
 8001fd2:	e7da      	b.n	8001f8a <_free_r+0x22>
 8001fd4:	d902      	bls.n	8001fdc <_free_r+0x74>
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	602b      	str	r3, [r5, #0]
 8001fda:	e7d6      	b.n	8001f8a <_free_r+0x22>
 8001fdc:	6820      	ldr	r0, [r4, #0]
 8001fde:	1821      	adds	r1, r4, r0
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	bf04      	itt	eq
 8001fe4:	6819      	ldreq	r1, [r3, #0]
 8001fe6:	685b      	ldreq	r3, [r3, #4]
 8001fe8:	6063      	str	r3, [r4, #4]
 8001fea:	bf04      	itt	eq
 8001fec:	1809      	addeq	r1, r1, r0
 8001fee:	6021      	streq	r1, [r4, #0]
 8001ff0:	6054      	str	r4, [r2, #4]
 8001ff2:	e7ca      	b.n	8001f8a <_free_r+0x22>
 8001ff4:	bd38      	pop	{r3, r4, r5, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000cd8 	.word	0x20000cd8

08001ffc <sbrk_aligned>:
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	4e0e      	ldr	r6, [pc, #56]	; (8002038 <sbrk_aligned+0x3c>)
 8002000:	460c      	mov	r4, r1
 8002002:	6831      	ldr	r1, [r6, #0]
 8002004:	4605      	mov	r5, r0
 8002006:	b911      	cbnz	r1, 800200e <sbrk_aligned+0x12>
 8002008:	f000 f8bc 	bl	8002184 <_sbrk_r>
 800200c:	6030      	str	r0, [r6, #0]
 800200e:	4621      	mov	r1, r4
 8002010:	4628      	mov	r0, r5
 8002012:	f000 f8b7 	bl	8002184 <_sbrk_r>
 8002016:	1c43      	adds	r3, r0, #1
 8002018:	d00a      	beq.n	8002030 <sbrk_aligned+0x34>
 800201a:	1cc4      	adds	r4, r0, #3
 800201c:	f024 0403 	bic.w	r4, r4, #3
 8002020:	42a0      	cmp	r0, r4
 8002022:	d007      	beq.n	8002034 <sbrk_aligned+0x38>
 8002024:	1a21      	subs	r1, r4, r0
 8002026:	4628      	mov	r0, r5
 8002028:	f000 f8ac 	bl	8002184 <_sbrk_r>
 800202c:	3001      	adds	r0, #1
 800202e:	d101      	bne.n	8002034 <sbrk_aligned+0x38>
 8002030:	f04f 34ff 	mov.w	r4, #4294967295
 8002034:	4620      	mov	r0, r4
 8002036:	bd70      	pop	{r4, r5, r6, pc}
 8002038:	20000cdc 	.word	0x20000cdc

0800203c <_malloc_r>:
 800203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002040:	1ccd      	adds	r5, r1, #3
 8002042:	f025 0503 	bic.w	r5, r5, #3
 8002046:	3508      	adds	r5, #8
 8002048:	2d0c      	cmp	r5, #12
 800204a:	bf38      	it	cc
 800204c:	250c      	movcc	r5, #12
 800204e:	2d00      	cmp	r5, #0
 8002050:	4607      	mov	r7, r0
 8002052:	db01      	blt.n	8002058 <_malloc_r+0x1c>
 8002054:	42a9      	cmp	r1, r5
 8002056:	d905      	bls.n	8002064 <_malloc_r+0x28>
 8002058:	230c      	movs	r3, #12
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	2600      	movs	r6, #0
 800205e:	4630      	mov	r0, r6
 8002060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002064:	4e2e      	ldr	r6, [pc, #184]	; (8002120 <_malloc_r+0xe4>)
 8002066:	f000 f89d 	bl	80021a4 <__malloc_lock>
 800206a:	6833      	ldr	r3, [r6, #0]
 800206c:	461c      	mov	r4, r3
 800206e:	bb34      	cbnz	r4, 80020be <_malloc_r+0x82>
 8002070:	4629      	mov	r1, r5
 8002072:	4638      	mov	r0, r7
 8002074:	f7ff ffc2 	bl	8001ffc <sbrk_aligned>
 8002078:	1c43      	adds	r3, r0, #1
 800207a:	4604      	mov	r4, r0
 800207c:	d14d      	bne.n	800211a <_malloc_r+0xde>
 800207e:	6834      	ldr	r4, [r6, #0]
 8002080:	4626      	mov	r6, r4
 8002082:	2e00      	cmp	r6, #0
 8002084:	d140      	bne.n	8002108 <_malloc_r+0xcc>
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	4631      	mov	r1, r6
 800208a:	4638      	mov	r0, r7
 800208c:	eb04 0803 	add.w	r8, r4, r3
 8002090:	f000 f878 	bl	8002184 <_sbrk_r>
 8002094:	4580      	cmp	r8, r0
 8002096:	d13a      	bne.n	800210e <_malloc_r+0xd2>
 8002098:	6821      	ldr	r1, [r4, #0]
 800209a:	3503      	adds	r5, #3
 800209c:	1a6d      	subs	r5, r5, r1
 800209e:	f025 0503 	bic.w	r5, r5, #3
 80020a2:	3508      	adds	r5, #8
 80020a4:	2d0c      	cmp	r5, #12
 80020a6:	bf38      	it	cc
 80020a8:	250c      	movcc	r5, #12
 80020aa:	4629      	mov	r1, r5
 80020ac:	4638      	mov	r0, r7
 80020ae:	f7ff ffa5 	bl	8001ffc <sbrk_aligned>
 80020b2:	3001      	adds	r0, #1
 80020b4:	d02b      	beq.n	800210e <_malloc_r+0xd2>
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	442b      	add	r3, r5
 80020ba:	6023      	str	r3, [r4, #0]
 80020bc:	e00e      	b.n	80020dc <_malloc_r+0xa0>
 80020be:	6822      	ldr	r2, [r4, #0]
 80020c0:	1b52      	subs	r2, r2, r5
 80020c2:	d41e      	bmi.n	8002102 <_malloc_r+0xc6>
 80020c4:	2a0b      	cmp	r2, #11
 80020c6:	d916      	bls.n	80020f6 <_malloc_r+0xba>
 80020c8:	1961      	adds	r1, r4, r5
 80020ca:	42a3      	cmp	r3, r4
 80020cc:	6025      	str	r5, [r4, #0]
 80020ce:	bf18      	it	ne
 80020d0:	6059      	strne	r1, [r3, #4]
 80020d2:	6863      	ldr	r3, [r4, #4]
 80020d4:	bf08      	it	eq
 80020d6:	6031      	streq	r1, [r6, #0]
 80020d8:	5162      	str	r2, [r4, r5]
 80020da:	604b      	str	r3, [r1, #4]
 80020dc:	4638      	mov	r0, r7
 80020de:	f104 060b 	add.w	r6, r4, #11
 80020e2:	f000 f865 	bl	80021b0 <__malloc_unlock>
 80020e6:	f026 0607 	bic.w	r6, r6, #7
 80020ea:	1d23      	adds	r3, r4, #4
 80020ec:	1af2      	subs	r2, r6, r3
 80020ee:	d0b6      	beq.n	800205e <_malloc_r+0x22>
 80020f0:	1b9b      	subs	r3, r3, r6
 80020f2:	50a3      	str	r3, [r4, r2]
 80020f4:	e7b3      	b.n	800205e <_malloc_r+0x22>
 80020f6:	6862      	ldr	r2, [r4, #4]
 80020f8:	42a3      	cmp	r3, r4
 80020fa:	bf0c      	ite	eq
 80020fc:	6032      	streq	r2, [r6, #0]
 80020fe:	605a      	strne	r2, [r3, #4]
 8002100:	e7ec      	b.n	80020dc <_malloc_r+0xa0>
 8002102:	4623      	mov	r3, r4
 8002104:	6864      	ldr	r4, [r4, #4]
 8002106:	e7b2      	b.n	800206e <_malloc_r+0x32>
 8002108:	4634      	mov	r4, r6
 800210a:	6876      	ldr	r6, [r6, #4]
 800210c:	e7b9      	b.n	8002082 <_malloc_r+0x46>
 800210e:	230c      	movs	r3, #12
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	4638      	mov	r0, r7
 8002114:	f000 f84c 	bl	80021b0 <__malloc_unlock>
 8002118:	e7a1      	b.n	800205e <_malloc_r+0x22>
 800211a:	6025      	str	r5, [r4, #0]
 800211c:	e7de      	b.n	80020dc <_malloc_r+0xa0>
 800211e:	bf00      	nop
 8002120:	20000cd8 	.word	0x20000cd8

08002124 <_realloc_r>:
 8002124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002128:	4680      	mov	r8, r0
 800212a:	4614      	mov	r4, r2
 800212c:	460e      	mov	r6, r1
 800212e:	b921      	cbnz	r1, 800213a <_realloc_r+0x16>
 8002130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002134:	4611      	mov	r1, r2
 8002136:	f7ff bf81 	b.w	800203c <_malloc_r>
 800213a:	b92a      	cbnz	r2, 8002148 <_realloc_r+0x24>
 800213c:	f7ff ff14 	bl	8001f68 <_free_r>
 8002140:	4625      	mov	r5, r4
 8002142:	4628      	mov	r0, r5
 8002144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002148:	f000 f838 	bl	80021bc <_malloc_usable_size_r>
 800214c:	4284      	cmp	r4, r0
 800214e:	4607      	mov	r7, r0
 8002150:	d802      	bhi.n	8002158 <_realloc_r+0x34>
 8002152:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002156:	d812      	bhi.n	800217e <_realloc_r+0x5a>
 8002158:	4621      	mov	r1, r4
 800215a:	4640      	mov	r0, r8
 800215c:	f7ff ff6e 	bl	800203c <_malloc_r>
 8002160:	4605      	mov	r5, r0
 8002162:	2800      	cmp	r0, #0
 8002164:	d0ed      	beq.n	8002142 <_realloc_r+0x1e>
 8002166:	42bc      	cmp	r4, r7
 8002168:	4622      	mov	r2, r4
 800216a:	4631      	mov	r1, r6
 800216c:	bf28      	it	cs
 800216e:	463a      	movcs	r2, r7
 8002170:	f7ff fed2 	bl	8001f18 <memcpy>
 8002174:	4631      	mov	r1, r6
 8002176:	4640      	mov	r0, r8
 8002178:	f7ff fef6 	bl	8001f68 <_free_r>
 800217c:	e7e1      	b.n	8002142 <_realloc_r+0x1e>
 800217e:	4635      	mov	r5, r6
 8002180:	e7df      	b.n	8002142 <_realloc_r+0x1e>
	...

08002184 <_sbrk_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4d06      	ldr	r5, [pc, #24]	; (80021a0 <_sbrk_r+0x1c>)
 8002188:	2300      	movs	r3, #0
 800218a:	4604      	mov	r4, r0
 800218c:	4608      	mov	r0, r1
 800218e:	602b      	str	r3, [r5, #0]
 8002190:	f000 f81e 	bl	80021d0 <_sbrk>
 8002194:	1c43      	adds	r3, r0, #1
 8002196:	d102      	bne.n	800219e <_sbrk_r+0x1a>
 8002198:	682b      	ldr	r3, [r5, #0]
 800219a:	b103      	cbz	r3, 800219e <_sbrk_r+0x1a>
 800219c:	6023      	str	r3, [r4, #0]
 800219e:	bd38      	pop	{r3, r4, r5, pc}
 80021a0:	20000ce0 	.word	0x20000ce0

080021a4 <__malloc_lock>:
 80021a4:	4801      	ldr	r0, [pc, #4]	; (80021ac <__malloc_lock+0x8>)
 80021a6:	f000 b811 	b.w	80021cc <__retarget_lock_acquire_recursive>
 80021aa:	bf00      	nop
 80021ac:	20000ce4 	.word	0x20000ce4

080021b0 <__malloc_unlock>:
 80021b0:	4801      	ldr	r0, [pc, #4]	; (80021b8 <__malloc_unlock+0x8>)
 80021b2:	f000 b80c 	b.w	80021ce <__retarget_lock_release_recursive>
 80021b6:	bf00      	nop
 80021b8:	20000ce4 	.word	0x20000ce4

080021bc <_malloc_usable_size_r>:
 80021bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021c0:	1f18      	subs	r0, r3, #4
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bfbc      	itt	lt
 80021c6:	580b      	ldrlt	r3, [r1, r0]
 80021c8:	18c0      	addlt	r0, r0, r3
 80021ca:	4770      	bx	lr

080021cc <__retarget_lock_acquire_recursive>:
 80021cc:	4770      	bx	lr

080021ce <__retarget_lock_release_recursive>:
 80021ce:	4770      	bx	lr

080021d0 <_sbrk>:
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <_sbrk+0x14>)
 80021d2:	6811      	ldr	r1, [r2, #0]
 80021d4:	4603      	mov	r3, r0
 80021d6:	b909      	cbnz	r1, 80021dc <_sbrk+0xc>
 80021d8:	4903      	ldr	r1, [pc, #12]	; (80021e8 <_sbrk+0x18>)
 80021da:	6011      	str	r1, [r2, #0]
 80021dc:	6810      	ldr	r0, [r2, #0]
 80021de:	4403      	add	r3, r0
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4770      	bx	lr
 80021e4:	20000ce8 	.word	0x20000ce8
 80021e8:	20000cf0 	.word	0x20000cf0

080021ec <_init>:
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ee:	bf00      	nop
 80021f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f2:	bc08      	pop	{r3}
 80021f4:	469e      	mov	lr, r3
 80021f6:	4770      	bx	lr

080021f8 <_fini>:
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	bf00      	nop
 80021fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fe:	bc08      	pop	{r3}
 8002200:	469e      	mov	lr, r3
 8002202:	4770      	bx	lr
