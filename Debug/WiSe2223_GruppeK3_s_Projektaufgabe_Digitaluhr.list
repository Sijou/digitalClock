
WiSe2223_GruppeK3_s_Projektaufgabe_Digitaluhr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002650  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d0  080027f0  080027f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d8  20000000  080041c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
  7 .bss          00000c80  200000d8  200000d8  000200d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000d58  20000d58  000200d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002eef  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000d16  00000000  00000000  00022ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000248  00000000  00000000  00023d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000001f8  00000000  00000000  00023f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00018f93  00000000  00000000  00024148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000366e  00000000  00000000  0003d0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00088203  00000000  00000000  00040749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c894c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000b8c  00000000  00000000  000c899c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080027d8 	.word	0x080027d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	080027d8 	.word	0x080027d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	db0a      	blt.n	80002aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	490c      	ldr	r1, [pc, #48]	; (80002cc <__NVIC_SetPriority+0x4c>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	0112      	lsls	r2, r2, #4
 80002a0:	b2d2      	uxtb	r2, r2
 80002a2:	440b      	add	r3, r1
 80002a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a8:	e00a      	b.n	80002c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4908      	ldr	r1, [pc, #32]	; (80002d0 <__NVIC_SetPriority+0x50>)
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	3b04      	subs	r3, #4
 80002b8:	0112      	lsls	r2, r2, #4
 80002ba:	b2d2      	uxtb	r2, r2
 80002bc:	440b      	add	r3, r1
 80002be:	761a      	strb	r2, [r3, #24]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e100 	.word	0xe000e100
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <my_alarm1_callback>:
 * In this specific implementation, it sets the state of GPIO pin A5 to high.
 * This could be used, for example, to turn on an LED or trigger some other action in response to the alarm event.
 * The exact behavior of the function may depend on how it is used within the larger program and what the intended purpose of the alarm is.
 */
void my_alarm1_callback()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	//

	gpio_set_pinState(GPIOA , 5 , HIGH) ;
 80002d8:	2200      	movs	r2, #0
 80002da:	2105      	movs	r1, #5
 80002dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e0:	f001 f8b4 	bl	800144c <gpio_set_pinState>

	//
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <main>:



int main()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b096      	sub	sp, #88	; 0x58
 80002ec:	af04      	add	r7, sp, #16
	rtc_time_t t ,tm;
	rtc_date_t d ;

  	while ((RCC->CR & 2) == 0);  // RCC Clock control register (RCC_CR) , wait until HSI is Ready
 80002ee:	bf00      	nop
 80002f0:	4b8b      	ldr	r3, [pc, #556]	; (8000520 <main+0x238>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f003 0302 	and.w	r3, r3, #2
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0f9      	beq.n	80002f0 <main+0x8>

	systick_enable() ;
 80002fc:	f000 fba0 	bl	8000a40 <systick_enable>
    //Clock configuration register (RCC_CFGR)
	RCC->CFGR &= ~(1<<7)  ; //reset HPRE4 The AHB clock frequency == sys clk
 8000300:	4b87      	ldr	r3, [pc, #540]	; (8000520 <main+0x238>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a86      	ldr	r2, [pc, #536]	; (8000520 <main+0x238>)
 8000306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800030a:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<12) ; // APB1 clock no division
 800030c:	4b84      	ldr	r3, [pc, #528]	; (8000520 <main+0x238>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a83      	ldr	r2, [pc, #524]	; (8000520 <main+0x238>)
 8000312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000316:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<15) ; // APB2 clock no division
 8000318:	4b81      	ldr	r3, [pc, #516]	; (8000520 <main+0x238>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a80      	ldr	r2, [pc, #512]	; (8000520 <main+0x238>)
 800031e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000322:	6053      	str	r3, [r2, #4]

	gpio_clock_enable(GPIOA) ;
 8000324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000328:	f000 ffd4 	bl	80012d4 <gpio_clock_enable>

	gpio_config_pin(GPIOA,5,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 800032c:	2300      	movs	r3, #0
 800032e:	9301      	str	r3, [sp, #4]
 8000330:	2300      	movs	r3, #0
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2300      	movs	r3, #0
 8000336:	2201      	movs	r2, #1
 8000338:	2105      	movs	r1, #5
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f001 f84e 	bl	80013de <gpio_config_pin>

	gpio_set_pinState(GPIOA , 5 , LOW) ;
 8000342:	2201      	movs	r2, #1
 8000344:	2105      	movs	r1, #5
 8000346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034a:	f001 f87f 	bl	800144c <gpio_set_pinState>


	gpio_config_pin(LED_PORT, LED_TAB[0] ,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 800034e:	4b75      	ldr	r3, [pc, #468]	; (8000524 <main+0x23c>)
 8000350:	6818      	ldr	r0, [r3, #0]
 8000352:	4b75      	ldr	r3, [pc, #468]	; (8000528 <main+0x240>)
 8000354:	6819      	ldr	r1, [r3, #0]
 8000356:	2300      	movs	r3, #0
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2300      	movs	r3, #0
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2300      	movs	r3, #0
 8000360:	2201      	movs	r2, #1
 8000362:	f001 f83c 	bl	80013de <gpio_config_pin>
	gpio_config_pin(LED_PORT, LED_TAB[1] ,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 8000366:	4b6f      	ldr	r3, [pc, #444]	; (8000524 <main+0x23c>)
 8000368:	6818      	ldr	r0, [r3, #0]
 800036a:	4b6f      	ldr	r3, [pc, #444]	; (8000528 <main+0x240>)
 800036c:	6859      	ldr	r1, [r3, #4]
 800036e:	2300      	movs	r3, #0
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2300      	movs	r3, #0
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2300      	movs	r3, #0
 8000378:	2201      	movs	r2, #1
 800037a:	f001 f830 	bl	80013de <gpio_config_pin>
	gpio_config_pin(LED_PORT, LED_TAB[2] ,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 800037e:	4b69      	ldr	r3, [pc, #420]	; (8000524 <main+0x23c>)
 8000380:	6818      	ldr	r0, [r3, #0]
 8000382:	4b69      	ldr	r3, [pc, #420]	; (8000528 <main+0x240>)
 8000384:	6899      	ldr	r1, [r3, #8]
 8000386:	2300      	movs	r3, #0
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2300      	movs	r3, #0
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	2300      	movs	r3, #0
 8000390:	2201      	movs	r2, #1
 8000392:	f001 f824 	bl	80013de <gpio_config_pin>




	lcd1.dev = I2C1 ;
 8000396:	4b65      	ldr	r3, [pc, #404]	; (800052c <main+0x244>)
 8000398:	4a65      	ldr	r2, [pc, #404]	; (8000530 <main+0x248>)
 800039a:	601a      	str	r2, [r3, #0]
	lcd2.dev = I2C2 ;
 800039c:	4b65      	ldr	r3, [pc, #404]	; (8000534 <main+0x24c>)
 800039e:	4a66      	ldr	r2, [pc, #408]	; (8000538 <main+0x250>)
 80003a0:	601a      	str	r2, [r3, #0]
	lcd3.dev = I2C3 ;
 80003a2:	4b66      	ldr	r3, [pc, #408]	; (800053c <main+0x254>)
 80003a4:	4a66      	ldr	r2, [pc, #408]	; (8000540 <main+0x258>)
 80003a6:	601a      	str	r2, [r3, #0]

	I2C_Init(I2C1) ;
 80003a8:	4861      	ldr	r0, [pc, #388]	; (8000530 <main+0x248>)
 80003aa:	f001 f873 	bl	8001494 <I2C_Init>
	I2C_Init(I2C2) ;
 80003ae:	4862      	ldr	r0, [pc, #392]	; (8000538 <main+0x250>)
 80003b0:	f001 f870 	bl	8001494 <I2C_Init>
	I2C_Init(I2C3) ;
 80003b4:	4862      	ldr	r0, [pc, #392]	; (8000540 <main+0x258>)
 80003b6:	f001 f86d 	bl	8001494 <I2C_Init>
//	 t.min = 31 ;
//	 t.sec = 30 ;
//	 t.mode = H_24 ;


	 rtc_init(I2C1);
 80003ba:	485d      	ldr	r0, [pc, #372]	; (8000530 <main+0x248>)
 80003bc:	f001 fbac 	bl	8001b18 <rtc_init>

//	 rtc_set_date( &d);
//	 rtc_set_time(&t) ;

	 tm.hr = 19;
 80003c0:	2313      	movs	r3, #19
 80003c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 tm.min = 15 ;
 80003c6:	230f      	movs	r3, #15
 80003c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 tm.sec = 00 ;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 rtc_set_alarm(&tm) ;
 80003d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 fc92 	bl	8001d00 <rtc_set_alarm>

	 rtc_set_alarm_callback(&my_alarm1_callback) ;
 80003dc:	4859      	ldr	r0, [pc, #356]	; (8000544 <main+0x25c>)
 80003de:	f001 fd39 	bl	8001e54 <rtc_set_alarm_callback>

	 Display_Init(&lcd3);	//Configure Display
 80003e2:	4856      	ldr	r0, [pc, #344]	; (800053c <main+0x254>)
 80003e4:	f000 fbff 	bl	8000be6 <Display_Init>
	 Display_Init(&lcd2);	//Configure Display
 80003e8:	4852      	ldr	r0, [pc, #328]	; (8000534 <main+0x24c>)
 80003ea:	f000 fbfc 	bl	8000be6 <Display_Init>
	 Display_Init(&lcd1);	//Configure Display
 80003ee:	484f      	ldr	r0, [pc, #316]	; (800052c <main+0x244>)
 80003f0:	f000 fbf9 	bl	8000be6 <Display_Init>
	 keypad_init(GPIOC , 0) ;
 80003f4:	2100      	movs	r1, #0
 80003f6:	4854      	ldr	r0, [pc, #336]	; (8000548 <main+0x260>)
 80003f8:	f001 f9ce 	bl	8001798 <keypad_init>

	 char key = 0 ;
 80003fc:	2300      	movs	r3, #0
 80003fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	system_state_t sys_state = state_init;
 8000402:	2300      	movs	r3, #0
 8000404:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	idle_sub_state  idel_sub_state = state_display_date ;
 8000408:	2300      	movs	r3, #0
 800040a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	menu_nav_sub_state_t menu_nav_sub_state = menu_nav_start;
 800040e:	2300      	movs	r3, #0
 8000410:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44


	uint32_t start_timer = get_mtick();
 8000414:	f000 fb56 	bl	8000ac4 <get_mtick>
 8000418:	6378      	str	r0, [r7, #52]	; 0x34
	uint32_t state_idle_timer = 0 ;
 800041a:	2300      	movs	r3, #0
 800041c:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t led_timer  = 0 ;
 800041e:	2300      	movs	r3, #0
 8000420:	63fb      	str	r3, [r7, #60]	; 0x3c

	Display_Fill(&lcd1, Display_COLOR_BLACK);
 8000422:	2100      	movs	r1, #0
 8000424:	4841      	ldr	r0, [pc, #260]	; (800052c <main+0x244>)
 8000426:	f000 fd24 	bl	8000e72 <Display_Fill>
	Display_Fill(&lcd2, Display_COLOR_BLACK);
 800042a:	2100      	movs	r1, #0
 800042c:	4841      	ldr	r0, [pc, #260]	; (8000534 <main+0x24c>)
 800042e:	f000 fd20 	bl	8000e72 <Display_Fill>
	Display_Fill(&lcd3, Display_COLOR_BLACK);
 8000432:	2100      	movs	r1, #0
 8000434:	4841      	ldr	r0, [pc, #260]	; (800053c <main+0x254>)
 8000436:	f000 fd1c 	bl	8000e72 <Display_Fill>

	Display_DrawBitmap(&lcd1 ,0, 0, titel_image, 128, 64, Display_COLOR_WHITE);
 800043a:	2301      	movs	r3, #1
 800043c:	9302      	str	r3, [sp, #8]
 800043e:	2340      	movs	r3, #64	; 0x40
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	4b41      	ldr	r3, [pc, #260]	; (800054c <main+0x264>)
 8000448:	2200      	movs	r2, #0
 800044a:	2100      	movs	r1, #0
 800044c:	4837      	ldr	r0, [pc, #220]	; (800052c <main+0x244>)
 800044e:	f000 fb6a 	bl	8000b26 <Display_DrawBitmap>
	Display_DrawBitmap(&lcd2 ,0, 0, titel_image, 128, 64, Display_COLOR_WHITE);
 8000452:	2301      	movs	r3, #1
 8000454:	9302      	str	r3, [sp, #8]
 8000456:	2340      	movs	r3, #64	; 0x40
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	4b3b      	ldr	r3, [pc, #236]	; (800054c <main+0x264>)
 8000460:	2200      	movs	r2, #0
 8000462:	2100      	movs	r1, #0
 8000464:	4833      	ldr	r0, [pc, #204]	; (8000534 <main+0x24c>)
 8000466:	f000 fb5e 	bl	8000b26 <Display_DrawBitmap>
	Display_DrawBitmap(&lcd3 ,0, 0, titel_image, 128, 64, Display_COLOR_WHITE);
 800046a:	2301      	movs	r3, #1
 800046c:	9302      	str	r3, [sp, #8]
 800046e:	2340      	movs	r3, #64	; 0x40
 8000470:	9301      	str	r3, [sp, #4]
 8000472:	2380      	movs	r3, #128	; 0x80
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	4b35      	ldr	r3, [pc, #212]	; (800054c <main+0x264>)
 8000478:	2200      	movs	r2, #0
 800047a:	2100      	movs	r1, #0
 800047c:	482f      	ldr	r0, [pc, #188]	; (800053c <main+0x254>)
 800047e:	f000 fb52 	bl	8000b26 <Display_DrawBitmap>

	Display_UpdateScreen(&lcd1);
 8000482:	482a      	ldr	r0, [pc, #168]	; (800052c <main+0x244>)
 8000484:	f000 fcbd 	bl	8000e02 <Display_UpdateScreen>
	Display_UpdateScreen(&lcd2);
 8000488:	482a      	ldr	r0, [pc, #168]	; (8000534 <main+0x24c>)
 800048a:	f000 fcba 	bl	8000e02 <Display_UpdateScreen>
	Display_UpdateScreen(&lcd3);
 800048e:	482b      	ldr	r0, [pc, #172]	; (800053c <main+0x254>)
 8000490:	f000 fcb7 	bl	8000e02 <Display_UpdateScreen>


	gpio_set_pinState(GPIOA , LED_TAB[0]  , LOW) ;
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <main+0x240>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2201      	movs	r2, #1
 800049a:	4619      	mov	r1, r3
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f000 ffd4 	bl	800144c <gpio_set_pinState>
	gpio_set_pinState(GPIOA , LED_TAB[1]  , LOW) ;
 80004a4:	4b20      	ldr	r3, [pc, #128]	; (8000528 <main+0x240>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	2201      	movs	r2, #1
 80004aa:	4619      	mov	r1, r3
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b0:	f000 ffcc 	bl	800144c <gpio_set_pinState>
	gpio_set_pinState(GPIOA , LED_TAB[2]  , LOW) ;
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <main+0x240>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	2201      	movs	r2, #1
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f000 ffc4 	bl	800144c <gpio_set_pinState>


	while(1)
	{

		switch(sys_state)
 80004c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	f200 828a 	bhi.w	80009e2 <main+0x6fa>
 80004ce:	a201      	add	r2, pc, #4	; (adr r2, 80004d4 <main+0x1ec>)
 80004d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d4:	080004e5 	.word	0x080004e5
 80004d8:	08000551 	.word	0x08000551
 80004dc:	08000731 	.word	0x08000731
 80004e0:	080009e3 	.word	0x080009e3
		{
			case state_init:
			{
				if(get_mtick() - start_timer > 3000)
 80004e4:	f000 faee 	bl	8000ac4 <get_mtick>
 80004e8:	4602      	mov	r2, r0
 80004ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80004f2:	4293      	cmp	r3, r2
 80004f4:	f240 8277 	bls.w	80009e6 <main+0x6fe>
				{
					Display_Clear(&lcd1) ;
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <main+0x244>)
 80004fa:	f000 fdf7 	bl	80010ec <Display_Clear>
					Display_Clear(&lcd2) ;
 80004fe:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x24c>)
 8000500:	f000 fdf4 	bl	80010ec <Display_Clear>
					Display_Clear(&lcd3) ;
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0x254>)
 8000506:	f000 fdf1 	bl	80010ec <Display_Clear>
					sys_state = state_idle ;  //trans
 800050a:	2301      	movs	r3, #1
 800050c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					state_idle_timer = get_mtick() +1000;
 8000510:	f000 fad8 	bl	8000ac4 <get_mtick>
 8000514:	4603      	mov	r3, r0
 8000516:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800051a:	643b      	str	r3, [r7, #64]	; 0x40
				}

				break ;
 800051c:	e263      	b.n	80009e6 <main+0x6fe>
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	20000044 	.word	0x20000044
 8000528:	20000048 	.word	0x20000048
 800052c:	200000f8 	.word	0x200000f8
 8000530:	40005400 	.word	0x40005400
 8000534:	20000504 	.word	0x20000504
 8000538:	40005800 	.word	0x40005800
 800053c:	20000910 	.word	0x20000910
 8000540:	40007800 	.word	0x40007800
 8000544:	080002d5 	.word	0x080002d5
 8000548:	48000800 	.word	0x48000800
 800054c:	080028b8 	.word	0x080028b8

			case state_idle:
			{
				static uint32_t sub_state_timer = 0 ;

				switch(idel_sub_state)
 8000550:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000554:	2b00      	cmp	r3, #0
 8000556:	d076      	beq.n	8000646 <main+0x35e>
 8000558:	2b01      	cmp	r3, #1
 800055a:	f040 80db 	bne.w	8000714 <main+0x42c>
				{

					case state_display_time :
					{
						if(get_mtick() - state_idle_timer >= 960)
 800055e:	f000 fab1 	bl	8000ac4 <get_mtick>
 8000562:	4602      	mov	r2, r0
 8000564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 800056c:	d34f      	bcc.n	800060e <main+0x326>
						{
							///
							rtc_get_time(&t) ;
 800056e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fafc 	bl	8001b70 <rtc_get_time>
							char hour[4] ;
							char minute[4] ;
							char second[4] ;

							sprintf(hour , "%.2d" , t.hr) ;
 8000578:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800057c:	461a      	mov	r2, r3
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	49be      	ldr	r1, [pc, #760]	; (800087c <main+0x594>)
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fcad 	bl	8001ee4 <siprintf>
							sprintf(minute , "%.2d" , t.min) ;
 800058a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800058e:	461a      	mov	r2, r3
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	49b9      	ldr	r1, [pc, #740]	; (800087c <main+0x594>)
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fca4 	bl	8001ee4 <siprintf>
							sprintf(second , "%.2d" , t.sec) ;
 800059c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80005a0:	461a      	mov	r2, r3
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	49b5      	ldr	r1, [pc, #724]	; (800087c <main+0x594>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fc9b 	bl	8001ee4 <siprintf>

							Display_GotoXY(&lcd1 , 50,20);
 80005ae:	2214      	movs	r2, #20
 80005b0:	2132      	movs	r1, #50	; 0x32
 80005b2:	48b3      	ldr	r0, [pc, #716]	; (8000880 <main+0x598>)
 80005b4:	f000 fcd9 	bl	8000f6a <Display_GotoXY>

							Display_Puts(&lcd1 ,hour ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80005b8:	f107 011c 	add.w	r1, r7, #28
 80005bc:	2301      	movs	r3, #1
 80005be:	4ab1      	ldr	r2, [pc, #708]	; (8000884 <main+0x59c>)
 80005c0:	48af      	ldr	r0, [pc, #700]	; (8000880 <main+0x598>)
 80005c2:	f000 fd6e 	bl	80010a2 <Display_Puts>

							Display_GotoXY(&lcd2 , 50,20);
 80005c6:	2214      	movs	r2, #20
 80005c8:	2132      	movs	r1, #50	; 0x32
 80005ca:	48af      	ldr	r0, [pc, #700]	; (8000888 <main+0x5a0>)
 80005cc:	f000 fccd 	bl	8000f6a <Display_GotoXY>

							Display_Puts(&lcd2 ,minute ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80005d0:	f107 0118 	add.w	r1, r7, #24
 80005d4:	2301      	movs	r3, #1
 80005d6:	4aab      	ldr	r2, [pc, #684]	; (8000884 <main+0x59c>)
 80005d8:	48ab      	ldr	r0, [pc, #684]	; (8000888 <main+0x5a0>)
 80005da:	f000 fd62 	bl	80010a2 <Display_Puts>

							Display_GotoXY(&lcd3 , 50,20);
 80005de:	2214      	movs	r2, #20
 80005e0:	2132      	movs	r1, #50	; 0x32
 80005e2:	48aa      	ldr	r0, [pc, #680]	; (800088c <main+0x5a4>)
 80005e4:	f000 fcc1 	bl	8000f6a <Display_GotoXY>

							Display_Puts(&lcd3 ,second ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80005e8:	f107 0114 	add.w	r1, r7, #20
 80005ec:	2301      	movs	r3, #1
 80005ee:	4aa5      	ldr	r2, [pc, #660]	; (8000884 <main+0x59c>)
 80005f0:	48a6      	ldr	r0, [pc, #664]	; (800088c <main+0x5a4>)
 80005f2:	f000 fd56 	bl	80010a2 <Display_Puts>

							Display_UpdateScreen(&lcd1);
 80005f6:	48a2      	ldr	r0, [pc, #648]	; (8000880 <main+0x598>)
 80005f8:	f000 fc03 	bl	8000e02 <Display_UpdateScreen>
							Display_UpdateScreen(&lcd2);
 80005fc:	48a2      	ldr	r0, [pc, #648]	; (8000888 <main+0x5a0>)
 80005fe:	f000 fc00 	bl	8000e02 <Display_UpdateScreen>
							Display_UpdateScreen(&lcd3);
 8000602:	48a2      	ldr	r0, [pc, #648]	; (800088c <main+0x5a4>)
 8000604:	f000 fbfd 	bl	8000e02 <Display_UpdateScreen>

							state_idle_timer = get_mtick() ;
 8000608:	f000 fa5c 	bl	8000ac4 <get_mtick>
 800060c:	6438      	str	r0, [r7, #64]	; 0x40
						}

						if(get_mtick() - sub_state_timer > 3000)
 800060e:	f000 fa59 	bl	8000ac4 <get_mtick>
 8000612:	4602      	mov	r2, r0
 8000614:	4b9e      	ldr	r3, [pc, #632]	; (8000890 <main+0x5a8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800061e:	4293      	cmp	r3, r2
 8000620:	d97a      	bls.n	8000718 <main+0x430>
						{
							idel_sub_state =  state_display_date ;
 8000622:	2300      	movs	r3, #0
 8000624:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
							sub_state_timer = get_mtick() ;
 8000628:	f000 fa4c 	bl	8000ac4 <get_mtick>
 800062c:	4603      	mov	r3, r0
 800062e:	4a98      	ldr	r2, [pc, #608]	; (8000890 <main+0x5a8>)
 8000630:	6013      	str	r3, [r2, #0]
							Display_Clear(&lcd1) ;
 8000632:	4893      	ldr	r0, [pc, #588]	; (8000880 <main+0x598>)
 8000634:	f000 fd5a 	bl	80010ec <Display_Clear>
							Display_Clear(&lcd2) ;
 8000638:	4893      	ldr	r0, [pc, #588]	; (8000888 <main+0x5a0>)
 800063a:	f000 fd57 	bl	80010ec <Display_Clear>
							Display_Clear(&lcd3) ;
 800063e:	4893      	ldr	r0, [pc, #588]	; (800088c <main+0x5a4>)
 8000640:	f000 fd54 	bl	80010ec <Display_Clear>
						}

						break ;
 8000644:	e068      	b.n	8000718 <main+0x430>
					}
					case state_display_date:
					{

						rtc_get_date(&d) ;
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fb0c 	bl	8001c68 <rtc_get_date>

						char year[6] ;
						char month[4] ;
						char day[4] ;

						sprintf(year , "20%.2d" , d.year) ;
 8000650:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000654:	461a      	mov	r2, r3
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	498e      	ldr	r1, [pc, #568]	; (8000894 <main+0x5ac>)
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fc41 	bl	8001ee4 <siprintf>
						sprintf(month , "%.2d" , d.month) ;
 8000662:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000666:	461a      	mov	r2, r3
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4983      	ldr	r1, [pc, #524]	; (800087c <main+0x594>)
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fc38 	bl	8001ee4 <siprintf>
						sprintf(day  , "%.2d" , d.day) ;
 8000674:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000678:	461a      	mov	r2, r3
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	497f      	ldr	r1, [pc, #508]	; (800087c <main+0x594>)
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fc30 	bl	8001ee4 <siprintf>

						Display_GotoXY(&lcd1 , 50,20);
 8000684:	2214      	movs	r2, #20
 8000686:	2132      	movs	r1, #50	; 0x32
 8000688:	487d      	ldr	r0, [pc, #500]	; (8000880 <main+0x598>)
 800068a:	f000 fc6e 	bl	8000f6a <Display_GotoXY>

						Display_Puts(&lcd1 ,day ,& Font_11x18 , Display_COLOR_WHITE ) ;
 800068e:	1d39      	adds	r1, r7, #4
 8000690:	2301      	movs	r3, #1
 8000692:	4a7c      	ldr	r2, [pc, #496]	; (8000884 <main+0x59c>)
 8000694:	487a      	ldr	r0, [pc, #488]	; (8000880 <main+0x598>)
 8000696:	f000 fd04 	bl	80010a2 <Display_Puts>

						Display_GotoXY(&lcd2 , 50,20);
 800069a:	2214      	movs	r2, #20
 800069c:	2132      	movs	r1, #50	; 0x32
 800069e:	487a      	ldr	r0, [pc, #488]	; (8000888 <main+0x5a0>)
 80006a0:	f000 fc63 	bl	8000f6a <Display_GotoXY>

						Display_Puts(&lcd2 ,month ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80006a4:	f107 0108 	add.w	r1, r7, #8
 80006a8:	2301      	movs	r3, #1
 80006aa:	4a76      	ldr	r2, [pc, #472]	; (8000884 <main+0x59c>)
 80006ac:	4876      	ldr	r0, [pc, #472]	; (8000888 <main+0x5a0>)
 80006ae:	f000 fcf8 	bl	80010a2 <Display_Puts>

						Display_GotoXY(&lcd3 , 40,20);
 80006b2:	2214      	movs	r2, #20
 80006b4:	2128      	movs	r1, #40	; 0x28
 80006b6:	4875      	ldr	r0, [pc, #468]	; (800088c <main+0x5a4>)
 80006b8:	f000 fc57 	bl	8000f6a <Display_GotoXY>

						Display_Puts(&lcd3 ,year ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	2301      	movs	r3, #1
 80006c2:	4a70      	ldr	r2, [pc, #448]	; (8000884 <main+0x59c>)
 80006c4:	4871      	ldr	r0, [pc, #452]	; (800088c <main+0x5a4>)
 80006c6:	f000 fcec 	bl	80010a2 <Display_Puts>

						Display_UpdateScreen(&lcd1);
 80006ca:	486d      	ldr	r0, [pc, #436]	; (8000880 <main+0x598>)
 80006cc:	f000 fb99 	bl	8000e02 <Display_UpdateScreen>
						Display_UpdateScreen(&lcd2);
 80006d0:	486d      	ldr	r0, [pc, #436]	; (8000888 <main+0x5a0>)
 80006d2:	f000 fb96 	bl	8000e02 <Display_UpdateScreen>
						Display_UpdateScreen(&lcd3);
 80006d6:	486d      	ldr	r0, [pc, #436]	; (800088c <main+0x5a4>)
 80006d8:	f000 fb93 	bl	8000e02 <Display_UpdateScreen>

						if(get_mtick() - sub_state_timer > 3000)
 80006dc:	f000 f9f2 	bl	8000ac4 <get_mtick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b6b      	ldr	r3, [pc, #428]	; (8000890 <main+0x5a8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d915      	bls.n	800071c <main+0x434>
						{
							idel_sub_state =  state_display_time ;
 80006f0:	2301      	movs	r3, #1
 80006f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
							Display_Clear(&lcd1) ;
 80006f6:	4862      	ldr	r0, [pc, #392]	; (8000880 <main+0x598>)
 80006f8:	f000 fcf8 	bl	80010ec <Display_Clear>
							Display_Clear(&lcd2) ;
 80006fc:	4862      	ldr	r0, [pc, #392]	; (8000888 <main+0x5a0>)
 80006fe:	f000 fcf5 	bl	80010ec <Display_Clear>
							Display_Clear(&lcd3) ;
 8000702:	4862      	ldr	r0, [pc, #392]	; (800088c <main+0x5a4>)
 8000704:	f000 fcf2 	bl	80010ec <Display_Clear>
							sub_state_timer = get_mtick() ;
 8000708:	f000 f9dc 	bl	8000ac4 <get_mtick>
 800070c:	4603      	mov	r3, r0
 800070e:	4a60      	ldr	r2, [pc, #384]	; (8000890 <main+0x5a8>)
 8000710:	6013      	str	r3, [r2, #0]
						}

						break ;
 8000712:	e003      	b.n	800071c <main+0x434>
					}
					default :
						break ;
 8000714:	bf00      	nop
 8000716:	e002      	b.n	800071e <main+0x436>
						break ;
 8000718:	bf00      	nop
 800071a:	e000      	b.n	800071e <main+0x436>
						break ;
 800071c:	bf00      	nop
				}

				if( key != 0)
 800071e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000722:	2b00      	cmp	r3, #0
 8000724:	f000 8161 	beq.w	80009ea <main+0x702>
				{
					sys_state = state_menu_nav ; //transition
 8000728:	2302      	movs	r3, #2
 800072a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				}

				break ;
 800072e:	e15c      	b.n	80009ea <main+0x702>
			}
			case state_menu_nav:
			{
				switch(menu_nav_sub_state)
 8000730:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000734:	2b04      	cmp	r3, #4
 8000736:	f200 815a 	bhi.w	80009ee <main+0x706>
 800073a:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <main+0x458>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	08000755 	.word	0x08000755
 8000744:	080007c3 	.word	0x080007c3
 8000748:	080008b1 	.word	0x080008b1
 800074c:	0800093b 	.word	0x0800093b
 8000750:	080009df 	.word	0x080009df
					static int menu_index = 0 ;
					static int menu_index_prev  = 0 ;

					case menu_nav_start:
					{
						Display_Clear(&lcd1) ;
 8000754:	484a      	ldr	r0, [pc, #296]	; (8000880 <main+0x598>)
 8000756:	f000 fcc9 	bl	80010ec <Display_Clear>
						Display_Clear(&lcd2) ;
 800075a:	484b      	ldr	r0, [pc, #300]	; (8000888 <main+0x5a0>)
 800075c:	f000 fcc6 	bl	80010ec <Display_Clear>
						Display_Clear(&lcd3) ;
 8000760:	484a      	ldr	r0, [pc, #296]	; (800088c <main+0x5a4>)
 8000762:	f000 fcc3 	bl	80010ec <Display_Clear>
						Display_GotoXY(&lcd1 , 10,20);
 8000766:	2214      	movs	r2, #20
 8000768:	210a      	movs	r1, #10
 800076a:	4845      	ldr	r0, [pc, #276]	; (8000880 <main+0x598>)
 800076c:	f000 fbfd 	bl	8000f6a <Display_GotoXY>

						Display_Puts(&lcd1 ,"time" ,& Font_11x18 , Display_COLOR_WHITE ) ;
 8000770:	2301      	movs	r3, #1
 8000772:	4a44      	ldr	r2, [pc, #272]	; (8000884 <main+0x59c>)
 8000774:	4948      	ldr	r1, [pc, #288]	; (8000898 <main+0x5b0>)
 8000776:	4842      	ldr	r0, [pc, #264]	; (8000880 <main+0x598>)
 8000778:	f000 fc93 	bl	80010a2 <Display_Puts>

						Display_GotoXY(&lcd2 , 10,20);
 800077c:	2214      	movs	r2, #20
 800077e:	210a      	movs	r1, #10
 8000780:	4841      	ldr	r0, [pc, #260]	; (8000888 <main+0x5a0>)
 8000782:	f000 fbf2 	bl	8000f6a <Display_GotoXY>

						Display_Puts(&lcd2 ,"date" ,& Font_11x18 , Display_COLOR_WHITE ) ;
 8000786:	2301      	movs	r3, #1
 8000788:	4a3e      	ldr	r2, [pc, #248]	; (8000884 <main+0x59c>)
 800078a:	4944      	ldr	r1, [pc, #272]	; (800089c <main+0x5b4>)
 800078c:	483e      	ldr	r0, [pc, #248]	; (8000888 <main+0x5a0>)
 800078e:	f000 fc88 	bl	80010a2 <Display_Puts>

						Display_GotoXY(&lcd3 , 10,20);
 8000792:	2214      	movs	r2, #20
 8000794:	210a      	movs	r1, #10
 8000796:	483d      	ldr	r0, [pc, #244]	; (800088c <main+0x5a4>)
 8000798:	f000 fbe7 	bl	8000f6a <Display_GotoXY>

						Display_Puts(&lcd3 ,"parametre" ,& Font_11x18 , Display_COLOR_WHITE ) ;
 800079c:	2301      	movs	r3, #1
 800079e:	4a39      	ldr	r2, [pc, #228]	; (8000884 <main+0x59c>)
 80007a0:	493f      	ldr	r1, [pc, #252]	; (80008a0 <main+0x5b8>)
 80007a2:	483a      	ldr	r0, [pc, #232]	; (800088c <main+0x5a4>)
 80007a4:	f000 fc7d 	bl	80010a2 <Display_Puts>

						Display_UpdateScreen(&lcd1);
 80007a8:	4835      	ldr	r0, [pc, #212]	; (8000880 <main+0x598>)
 80007aa:	f000 fb2a 	bl	8000e02 <Display_UpdateScreen>
						Display_UpdateScreen(&lcd2);
 80007ae:	4836      	ldr	r0, [pc, #216]	; (8000888 <main+0x5a0>)
 80007b0:	f000 fb27 	bl	8000e02 <Display_UpdateScreen>
						Display_UpdateScreen(&lcd3);
 80007b4:	4835      	ldr	r0, [pc, #212]	; (800088c <main+0x5a4>)
 80007b6:	f000 fb24 	bl	8000e02 <Display_UpdateScreen>

						menu_nav_sub_state = menu_nav_update ;
 80007ba:	2301      	movs	r3, #1
 80007bc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
						break ;
 80007c0:	e10e      	b.n	80009e0 <main+0x6f8>
					}
					case menu_nav_update:
					{


						if( key == '6' )
 80007c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007c6:	2b36      	cmp	r3, #54	; 0x36
 80007c8:	d109      	bne.n	80007de <main+0x4f6>
						{
							//right
							menu_index_prev = menu_index ;
 80007ca:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <main+0x5bc>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a36      	ldr	r2, [pc, #216]	; (80008a8 <main+0x5c0>)
 80007d0:	6013      	str	r3, [r2, #0]
							menu_index++;
 80007d2:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <main+0x5bc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a32      	ldr	r2, [pc, #200]	; (80008a4 <main+0x5bc>)
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	e028      	b.n	8000830 <main+0x548>
						}
						else if( key == '4')
 80007de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007e2:	2b34      	cmp	r3, #52	; 0x34
 80007e4:	d109      	bne.n	80007fa <main+0x512>
						{
							//left
							menu_index_prev = menu_index ;
 80007e6:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <main+0x5bc>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <main+0x5c0>)
 80007ec:	6013      	str	r3, [r2, #0]
							menu_index--;
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <main+0x5bc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	4a2b      	ldr	r2, [pc, #172]	; (80008a4 <main+0x5bc>)
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	e01a      	b.n	8000830 <main+0x548>
						}
						else if( key == '#' )
 80007fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007fe:	2b23      	cmp	r3, #35	; 0x23
 8000800:	d10c      	bne.n	800081c <main+0x534>
						{
							//transition
							//confirm
							menu_nav_sub_state = menu_nav_submenu_start ; //go to submenu
 8000802:	2302      	movs	r3, #2
 8000804:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
							Display_Clear(&lcd1) ;
 8000808:	481d      	ldr	r0, [pc, #116]	; (8000880 <main+0x598>)
 800080a:	f000 fc6f 	bl	80010ec <Display_Clear>
							Display_Clear(&lcd2) ;
 800080e:	481e      	ldr	r0, [pc, #120]	; (8000888 <main+0x5a0>)
 8000810:	f000 fc6c 	bl	80010ec <Display_Clear>
							Display_Clear(&lcd3) ;
 8000814:	481d      	ldr	r0, [pc, #116]	; (800088c <main+0x5a4>)
 8000816:	f000 fc69 	bl	80010ec <Display_Clear>
 800081a:	e009      	b.n	8000830 <main+0x548>
							//sys_state =
						}
						else if(key == '*')
 800081c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000820:	2b2a      	cmp	r3, #42	; 0x2a
 8000822:	d105      	bne.n	8000830 <main+0x548>
						{
							//transiton
							//back
							menu_nav_sub_state = menu_nav_start ; //reset substate
 8000824:	2300      	movs	r3, #0
 8000826:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
							sys_state = state_idle ;
 800082a:	2301      	movs	r3, #1
 800082c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						}
						else{

						}

						if(menu_index >= 3)
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <main+0x5bc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b02      	cmp	r3, #2
 8000836:	dd03      	ble.n	8000840 <main+0x558>
						{
							menu_index = 0 ;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <main+0x5bc>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	e006      	b.n	800084e <main+0x566>
						}

						else if(menu_index < 0)
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <main+0x5bc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	da02      	bge.n	800084e <main+0x566>
						{
							menu_index = 2 ;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <main+0x5bc>)
 800084a:	2202      	movs	r2, #2
 800084c:	601a      	str	r2, [r3, #0]
						}
						else{

						}

						gpio_set_pinState(GPIOA , LED_TAB[menu_index_prev]  , LOW ) ;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <main+0x5c0>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a16      	ldr	r2, [pc, #88]	; (80008ac <main+0x5c4>)
 8000854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000858:	2201      	movs	r2, #1
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f000 fdf4 	bl	800144c <gpio_set_pinState>
						gpio_set_pinState(GPIOA , LED_TAB[menu_index]  , HIGH  ) ;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <main+0x5bc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a10      	ldr	r2, [pc, #64]	; (80008ac <main+0x5c4>)
 800086a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086e:	2200      	movs	r2, #0
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f000 fde9 	bl	800144c <gpio_set_pinState>

						//current_lcd

						break ;
 800087a:	e0b1      	b.n	80009e0 <main+0x6f8>
 800087c:	0800289c 	.word	0x0800289c
 8000880:	200000f8 	.word	0x200000f8
 8000884:	2000005c 	.word	0x2000005c
 8000888:	20000504 	.word	0x20000504
 800088c:	20000910 	.word	0x20000910
 8000890:	20000d1c 	.word	0x20000d1c
 8000894:	080028a4 	.word	0x080028a4
 8000898:	080027f0 	.word	0x080027f0
 800089c:	080027f8 	.word	0x080027f8
 80008a0:	080028ac 	.word	0x080028ac
 80008a4:	20000d20 	.word	0x20000d20
 80008a8:	20000d24 	.word	0x20000d24
 80008ac:	20000048 	.word	0x20000048
					}
					case menu_nav_submenu_start :
					{

						Display_GotoXY(&lcd1 , 10,20);
 80008b0:	2214      	movs	r2, #20
 80008b2:	210a      	movs	r1, #10
 80008b4:	4858      	ldr	r0, [pc, #352]	; (8000a18 <main+0x730>)
 80008b6:	f000 fb58 	bl	8000f6a <Display_GotoXY>

						Display_Puts(&lcd1 ,(char*)MENU[menu_index] ,& Font_11x18 , Display_COLOR_WHITE ) ;
 80008ba:	4b58      	ldr	r3, [pc, #352]	; (8000a1c <main+0x734>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a58      	ldr	r2, [pc, #352]	; (8000a20 <main+0x738>)
 80008c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80008c4:	2301      	movs	r3, #1
 80008c6:	4a57      	ldr	r2, [pc, #348]	; (8000a24 <main+0x73c>)
 80008c8:	4853      	ldr	r0, [pc, #332]	; (8000a18 <main+0x730>)
 80008ca:	f000 fbea 	bl	80010a2 <Display_Puts>

						for(int i = 0 ; i < submenu_item_lenght[menu_index] ; i++ )
 80008ce:	2300      	movs	r3, #0
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80008d2:	e01d      	b.n	8000910 <main+0x628>
						{
							Display_GotoXY(&lcd2 , 10 , 20 + (9 * i) );
 80008d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	00d2      	lsls	r2, r2, #3
 80008dc:	4413      	add	r3, r2
 80008de:	b29b      	uxth	r3, r3
 80008e0:	3314      	adds	r3, #20
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	210a      	movs	r1, #10
 80008e8:	484f      	ldr	r0, [pc, #316]	; (8000a28 <main+0x740>)
 80008ea:	f000 fb3e 	bl	8000f6a <Display_GotoXY>
							Display_Puts(&lcd2 ,(char*)SUB_MENU[menu_index][i] ,& Font_7x10 , Display_COLOR_WHITE ) ;
 80008ee:	4b4b      	ldr	r3, [pc, #300]	; (8000a1c <main+0x734>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a4e      	ldr	r2, [pc, #312]	; (8000a2c <main+0x744>)
 80008f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	6819      	ldr	r1, [r3, #0]
 8000900:	2301      	movs	r3, #1
 8000902:	4a4b      	ldr	r2, [pc, #300]	; (8000a30 <main+0x748>)
 8000904:	4848      	ldr	r0, [pc, #288]	; (8000a28 <main+0x740>)
 8000906:	f000 fbcc 	bl	80010a2 <Display_Puts>
						for(int i = 0 ; i < submenu_item_lenght[menu_index] ; i++ )
 800090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800090c:	3301      	adds	r3, #1
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000910:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <main+0x734>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a47      	ldr	r2, [pc, #284]	; (8000a34 <main+0x74c>)
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800091c:	429a      	cmp	r2, r3
 800091e:	dbd9      	blt.n	80008d4 <main+0x5ec>
						}

						Display_UpdateScreen(&lcd1);
 8000920:	483d      	ldr	r0, [pc, #244]	; (8000a18 <main+0x730>)
 8000922:	f000 fa6e 	bl	8000e02 <Display_UpdateScreen>
						Display_UpdateScreen(&lcd2);
 8000926:	4840      	ldr	r0, [pc, #256]	; (8000a28 <main+0x740>)
 8000928:	f000 fa6b 	bl	8000e02 <Display_UpdateScreen>
						Display_UpdateScreen(&lcd3);
 800092c:	4842      	ldr	r0, [pc, #264]	; (8000a38 <main+0x750>)
 800092e:	f000 fa68 	bl	8000e02 <Display_UpdateScreen>

						menu_nav_sub_state = menu_nav_submenu_update ;
 8000932:	2303      	movs	r3, #3
 8000934:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

						break ;
 8000938:	e052      	b.n	80009e0 <main+0x6f8>

					case menu_nav_submenu_update :
					{
						static int submenu_index = 0 ;

						if(key == '2')
 800093a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800093e:	2b32      	cmp	r3, #50	; 0x32
 8000940:	d108      	bne.n	8000954 <main+0x66c>
						{
							Display_Clear(&lcd3) ;
 8000942:	483d      	ldr	r0, [pc, #244]	; (8000a38 <main+0x750>)
 8000944:	f000 fbd2 	bl	80010ec <Display_Clear>
							submenu_index--;
 8000948:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <main+0x754>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3b01      	subs	r3, #1
 800094e:	4a3b      	ldr	r2, [pc, #236]	; (8000a3c <main+0x754>)
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	e013      	b.n	800097c <main+0x694>
						}
						else if(key == '8')
 8000954:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000958:	2b38      	cmp	r3, #56	; 0x38
 800095a:	d108      	bne.n	800096e <main+0x686>
						{
							Display_Clear(&lcd3) ;
 800095c:	4836      	ldr	r0, [pc, #216]	; (8000a38 <main+0x750>)
 800095e:	f000 fbc5 	bl	80010ec <Display_Clear>
							submenu_index++;
 8000962:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <main+0x754>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a34      	ldr	r2, [pc, #208]	; (8000a3c <main+0x754>)
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	e006      	b.n	800097c <main+0x694>
						}

						else if(key == '*')
 800096e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000972:	2b2a      	cmp	r3, #42	; 0x2a
 8000974:	d102      	bne.n	800097c <main+0x694>
						{
							//transition
							menu_nav_sub_state = menu_nav_start ; //reset substate
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
						}


						//test boundry

						if(submenu_index >= submenu_item_lenght[menu_index])
 800097c:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <main+0x734>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a2c      	ldr	r2, [pc, #176]	; (8000a34 <main+0x74c>)
 8000982:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <main+0x754>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	429a      	cmp	r2, r3
 800098c:	dc03      	bgt.n	8000996 <main+0x6ae>
						{
							submenu_index = 0 ;
 800098e:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <main+0x754>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	e00b      	b.n	80009ae <main+0x6c6>
						}
						else if(submenu_index < 0)
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <main+0x754>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	da07      	bge.n	80009ae <main+0x6c6>
						{
							submenu_index = submenu_item_lenght[menu_index] - 1 ;
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <main+0x734>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <main+0x74c>)
 80009a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <main+0x754>)
 80009ac:	6013      	str	r3, [r2, #0]
						}

						Display_GotoXY(&lcd3 , 10 , 20 );
 80009ae:	2214      	movs	r2, #20
 80009b0:	210a      	movs	r1, #10
 80009b2:	4821      	ldr	r0, [pc, #132]	; (8000a38 <main+0x750>)
 80009b4:	f000 fad9 	bl	8000f6a <Display_GotoXY>
						Display_Puts(&lcd3 ,(char*)SUB_MENU[menu_index][submenu_index] ,& Font_7x10 , Display_COLOR_WHITE ) ;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <main+0x734>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <main+0x744>)
 80009be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <main+0x754>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	6819      	ldr	r1, [r3, #0]
 80009cc:	2301      	movs	r3, #1
 80009ce:	4a18      	ldr	r2, [pc, #96]	; (8000a30 <main+0x748>)
 80009d0:	4819      	ldr	r0, [pc, #100]	; (8000a38 <main+0x750>)
 80009d2:	f000 fb66 	bl	80010a2 <Display_Puts>
						Display_UpdateScreen(&lcd3);
 80009d6:	4818      	ldr	r0, [pc, #96]	; (8000a38 <main+0x750>)
 80009d8:	f000 fa13 	bl	8000e02 <Display_UpdateScreen>

						break ;
 80009dc:	e000      	b.n	80009e0 <main+0x6f8>

					case menu_nav_exit:
					{


						break ;
 80009de:	bf00      	nop
					}
				}

				break ;
 80009e0:	e005      	b.n	80009ee <main+0x706>
			case state_configuration:
			{
				break ;
			}
			default :
				break ;
 80009e2:	bf00      	nop
 80009e4:	e004      	b.n	80009f0 <main+0x708>
				break ;
 80009e6:	bf00      	nop
 80009e8:	e002      	b.n	80009f0 <main+0x708>
				break ;
 80009ea:	bf00      	nop
 80009ec:	e000      	b.n	80009f0 <main+0x708>
				break ;
 80009ee:	bf00      	nop
		}


		key = keypad_get_pressedkey() ;
 80009f0:	f000 ffc4 	bl	800197c <keypad_get_pressedkey>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		rtc_update() ;
 80009fa:	f001 fa39 	bl	8001e70 <rtc_update>

		if(get_mtick() - led_timer > 1000)
 80009fe:	f000 f861 	bl	8000ac4 <get_mtick>
 8000a02:	4602      	mov	r2, r0
 8000a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a0c:	f67f ad5a 	bls.w	80004c4 <main+0x1dc>
		{
			//
			//gpio_toggel(GPIOA , 5) ;
			led_timer = get_mtick() ;
 8000a10:	f000 f858 	bl	8000ac4 <get_mtick>
 8000a14:	63f8      	str	r0, [r7, #60]	; 0x3c
		switch(sys_state)
 8000a16:	e555      	b.n	80004c4 <main+0x1dc>
 8000a18:	200000f8 	.word	0x200000f8
 8000a1c:	20000d20 	.word	0x20000d20
 8000a20:	20000004 	.word	0x20000004
 8000a24:	2000005c 	.word	0x2000005c
 8000a28:	20000504 	.word	0x20000504
 8000a2c:	20000038 	.word	0x20000038
 8000a30:	20000054 	.word	0x20000054
 8000a34:	08002cb8 	.word	0x08002cb8
 8000a38:	20000910 	.word	0x20000910
 8000a3c:	20000d28 	.word	0x20000d28

08000a40 <systick_enable>:
 */
/*
  \brief  Structure type to access the System Timer (SysTick).
 */
void systick_enable()
{    //uint32_t SystemCoreClock_ = 8000000; //8 Mhz
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	SysTick->LOAD  = (SystemCoreClock_/1000) - 1;                  /* set reload register */
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <systick_enable+0x30>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <systick_enable+0x34>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	099b      	lsrs	r3, r3, #6
 8000a50:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <systick_enable+0x38>)
 8000a52:	3b01      	subs	r3, #1
 8000a54:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000a56:	210f      	movs	r1, #15
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f7ff fc10 	bl	8000280 <__NVIC_SetPriority>
	SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <systick_enable+0x38>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |  /*!< SysTick CTRL: CLKSOURCE Mask */
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <systick_enable+0x38>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_TICKINT_Msk   |
					 SysTick_CTRL_ENABLE_Msk;
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	10624dd3 	.word	0x10624dd3
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <SysTick_Handler>:


void SysTick_Handler()
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  mtick++;
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SysTick_Handler+0x18>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <SysTick_Handler+0x18>)
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200000f4 	.word	0x200000f4

08000a98 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t st = get_mtick();
 8000aa0:	f000 f810 	bl	8000ac4 <get_mtick>
 8000aa4:	60f8      	str	r0, [r7, #12]

  while( get_mtick() - st <ms);
 8000aa6:	bf00      	nop
 8000aa8:	f000 f80c 	bl	8000ac4 <get_mtick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d8f7      	bhi.n	8000aa8 <delay_ms+0x10>
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <get_mtick>:

uint32_t get_mtick()
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return mtick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <get_mtick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	200000f4 	.word	0x200000f4

08000ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ad8:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000b0c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000adc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ade:	e003      	b.n	8000ae8 <LoopCopyDataInit>

08000ae0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ae2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ae4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ae6:	3104      	adds	r1, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ae8:	480a      	ldr	r0, [pc, #40]	; (8000b14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000aec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000aee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000af0:	d3f6      	bcc.n	8000ae0 <CopyDataInit>
	ldr	r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000af4:	e002      	b.n	8000afc <LoopFillZerobss>

08000af6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000af6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000af8:	f842 3b04 	str.w	r3, [r2], #4

08000afc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <LoopForever+0x16>)
	cmp	r2, r3
 8000afe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b00:	d3f9      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    //bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f001 f9c3 	bl	8001e8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b06:	f7ff fbef 	bl	80002e8 <main>

08000b0a <LoopForever>:

LoopForever:
    b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b0c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b10:	080041c8 	.word	0x080041c8
	ldr	r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b18:	200000d8 	.word	0x200000d8
	ldr	r2, =_sbss
 8000b1c:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 8000b20:	20000d58 	.word	0x20000d58

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>

08000b26 <Display_DrawBitmap>:
 * The function uses a nested loop to iterate through the image data and draw each pixel on the OLED display using the Display_DrawPixel function.
 * The function also calculates the byte width of the image and uses bit shifting to extract the appropriate pixel data from the bitmap image data.
 */

void Display_DrawBitmap(OLED_t *oled ,uint16_t x, uint16_t y, const unsigned char *bitmap, uint16_t w, uint16_t h, Display_COLOR_t color)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	817b      	strh	r3, [r7, #10]
 8000b34:	4613      	mov	r3, r2
 8000b36:	813b      	strh	r3, [r7, #8]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000b38:	8c3b      	ldrh	r3, [r7, #32]
 8000b3a:	3307      	adds	r3, #7
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	da00      	bge.n	8000b42 <Display_DrawBitmap+0x1c>
 8000b40:	3307      	adds	r3, #7
 8000b42:	10db      	asrs	r3, r3, #3
 8000b44:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	82bb      	strh	r3, [r7, #20]
 8000b4e:	e040      	b.n	8000bd2 <Display_DrawBitmap+0xac>
    {
        for(int16_t i=0; i<w; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	827b      	strh	r3, [r7, #18]
 8000b54:	e02f      	b.n	8000bb6 <Display_DrawBitmap+0x90>
        {
            if(i & 7)
 8000b56:	8a7b      	ldrh	r3, [r7, #18]
 8000b58:	f003 0307 	and.w	r3, r3, #7
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <Display_DrawBitmap+0x42>
            {
               byte <<= 1;
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	75fb      	strb	r3, [r7, #23]
 8000b66:	e012      	b.n	8000b8e <Display_DrawBitmap+0x68>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000b68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b6c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b70:	fb03 f202 	mul.w	r2, r3, r2
 8000b74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da00      	bge.n	8000b7e <Display_DrawBitmap+0x58>
 8000b7c:	3307      	adds	r3, #7
 8000b7e:	10db      	asrs	r3, r3, #3
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	461a      	mov	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80)
 8000b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da09      	bge.n	8000baa <Display_DrawBitmap+0x84>
            	Display_DrawPixel(oled ,x+i, y, color);
 8000b96:	8a7a      	ldrh	r2, [r7, #18]
 8000b98:	897b      	ldrh	r3, [r7, #10]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ba2:	893a      	ldrh	r2, [r7, #8]
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 f97b 	bl	8000ea0 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000baa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	827b      	strh	r3, [r7, #18]
 8000bb6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000bba:	8c3b      	ldrh	r3, [r7, #32]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbca      	blt.n	8000b56 <Display_DrawBitmap+0x30>
    for(int16_t j=0; j<h; j++, y++)
 8000bc0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	82bb      	strh	r3, [r7, #20]
 8000bcc:	893b      	ldrh	r3, [r7, #8]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	813b      	strh	r3, [r7, #8]
 8000bd2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dbb9      	blt.n	8000b50 <Display_DrawBitmap+0x2a>
        }
    }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <Display_Init>:
 * The function also deactivates scrolling on the OLED and fills the screen with black color.
 * At the end, the function returns 1 to indicate that the initialization was successful.
 */


uint8_t Display_Init(OLED_t * oled) {
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af02      	add	r7, sp, #8
 8000bec:	6078      	str	r0, [r7, #4]

	//delay
	uint32_t p = 2500;
 8000bee:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000bf2:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000bf4:	e002      	b.n	8000bfc <Display_Init+0x16>
		p--;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f9      	bne.n	8000bf6 <Display_Init+0x10>

	Display_WriteCommand(oled , 0xAE); //display off
 8000c02:	2302      	movs	r3, #2
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	23ae      	movs	r3, #174	; 0xae
 8000c08:	2200      	movs	r2, #0
 8000c0a:	213c      	movs	r1, #60	; 0x3c
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f000 fb09 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //Set Memory Addressing Mode
 8000c12:	2302      	movs	r3, #2
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2320      	movs	r3, #32
 8000c18:	2200      	movs	r2, #0
 8000c1a:	213c      	movs	r1, #60	; 0x3c
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 fb01 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c22:	2302      	movs	r3, #2
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2310      	movs	r3, #16
 8000c28:	2200      	movs	r2, #0
 8000c2a:	213c      	movs	r1, #60	; 0x3c
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 faf9 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c32:	2302      	movs	r3, #2
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	23b0      	movs	r3, #176	; 0xb0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	213c      	movs	r1, #60	; 0x3c
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 faf1 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xC8); //Set COM Output Scan Direction
 8000c42:	2302      	movs	r3, #2
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	23c8      	movs	r3, #200	; 0xc8
 8000c48:	2200      	movs	r2, #0
 8000c4a:	213c      	movs	r1, #60	; 0x3c
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 fae9 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //---set low column address
 8000c52:	2302      	movs	r3, #2
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2300      	movs	r3, #0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	213c      	movs	r1, #60	; 0x3c
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 fae1 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //---set high column address
 8000c62:	2302      	movs	r3, #2
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2310      	movs	r3, #16
 8000c68:	2200      	movs	r2, #0
 8000c6a:	213c      	movs	r1, #60	; 0x3c
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 fad9 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x40); //--set start line address
 8000c72:	2302      	movs	r3, #2
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	2200      	movs	r2, #0
 8000c7a:	213c      	movs	r1, #60	; 0x3c
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 fad1 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x81); //--set contrast control register
 8000c82:	2302      	movs	r3, #2
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2381      	movs	r3, #129	; 0x81
 8000c88:	2200      	movs	r2, #0
 8000c8a:	213c      	movs	r1, #60	; 0x3c
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 fac9 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xFF);
 8000c92:	2302      	movs	r3, #2
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	23ff      	movs	r3, #255	; 0xff
 8000c98:	2200      	movs	r2, #0
 8000c9a:	213c      	movs	r1, #60	; 0x3c
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 fac1 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA1); //--set segment re-map 0 to 127
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	23a1      	movs	r3, #161	; 0xa1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	213c      	movs	r1, #60	; 0x3c
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 fab9 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA6); //--set normal display
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	23a6      	movs	r3, #166	; 0xa6
 8000cb8:	2200      	movs	r2, #0
 8000cba:	213c      	movs	r1, #60	; 0x3c
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 fab1 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA8); //--set multiplex ratio(1 to 64)
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	23a8      	movs	r3, #168	; 0xa8
 8000cc8:	2200      	movs	r2, #0
 8000cca:	213c      	movs	r1, #60	; 0x3c
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 faa9 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x3F); //
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	233f      	movs	r3, #63	; 0x3f
 8000cd8:	2200      	movs	r2, #0
 8000cda:	213c      	movs	r1, #60	; 0x3c
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 faa1 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	23a4      	movs	r3, #164	; 0xa4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	213c      	movs	r1, #60	; 0x3c
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fa99 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD3); //-set display offset
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	23d3      	movs	r3, #211	; 0xd3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	213c      	movs	r1, #60	; 0x3c
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 fa91 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //-not offset
 8000d02:	2302      	movs	r3, #2
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2300      	movs	r3, #0
 8000d08:	2200      	movs	r2, #0
 8000d0a:	213c      	movs	r1, #60	; 0x3c
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 fa89 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD5); //--set display clock divide ratio/oscillator frequency
 8000d12:	2302      	movs	r3, #2
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	23d5      	movs	r3, #213	; 0xd5
 8000d18:	2200      	movs	r2, #0
 8000d1a:	213c      	movs	r1, #60	; 0x3c
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f000 fa81 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xF0); //--set divide ratio
 8000d22:	2302      	movs	r3, #2
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	23f0      	movs	r3, #240	; 0xf0
 8000d28:	2200      	movs	r2, #0
 8000d2a:	213c      	movs	r1, #60	; 0x3c
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 fa79 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD9); //--set pre-charge period
 8000d32:	2302      	movs	r3, #2
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	23d9      	movs	r3, #217	; 0xd9
 8000d38:	2200      	movs	r2, #0
 8000d3a:	213c      	movs	r1, #60	; 0x3c
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 fa71 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x22); //
 8000d42:	2302      	movs	r3, #2
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2322      	movs	r3, #34	; 0x22
 8000d48:	2200      	movs	r2, #0
 8000d4a:	213c      	movs	r1, #60	; 0x3c
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 fa69 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDA); //--set Com pins hardware configuration
 8000d52:	2302      	movs	r3, #2
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	23da      	movs	r3, #218	; 0xda
 8000d58:	2200      	movs	r2, #0
 8000d5a:	213c      	movs	r1, #60	; 0x3c
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fa61 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x12);
 8000d62:	2302      	movs	r3, #2
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2312      	movs	r3, #18
 8000d68:	2200      	movs	r2, #0
 8000d6a:	213c      	movs	r1, #60	; 0x3c
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 fa59 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDB); //--set vcomh
 8000d72:	2302      	movs	r3, #2
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	23db      	movs	r3, #219	; 0xdb
 8000d78:	2200      	movs	r2, #0
 8000d7a:	213c      	movs	r1, #60	; 0x3c
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f000 fa51 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //0x20,0.77xVcc
 8000d82:	2302      	movs	r3, #2
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2320      	movs	r3, #32
 8000d88:	2200      	movs	r2, #0
 8000d8a:	213c      	movs	r1, #60	; 0x3c
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 fa49 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x8D); //--set DC-DC enable
 8000d92:	2302      	movs	r3, #2
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	238d      	movs	r3, #141	; 0x8d
 8000d98:	2200      	movs	r2, #0
 8000d9a:	213c      	movs	r1, #60	; 0x3c
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 fa41 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x14); //
 8000da2:	2302      	movs	r3, #2
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2314      	movs	r3, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	213c      	movs	r1, #60	; 0x3c
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 fa39 	bl	8001224 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xAF); //--turn on SSD1306 panel
 8000db2:	2302      	movs	r3, #2
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	23af      	movs	r3, #175	; 0xaf
 8000db8:	2200      	movs	r2, #0
 8000dba:	213c      	movs	r1, #60	; 0x3c
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 fa31 	bl	8001224 <Display_I2C_Write>


	Display_WriteCommand(oled ,Display_DEACTIVATE_SCROLL);
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	232e      	movs	r3, #46	; 0x2e
 8000dc8:	2200      	movs	r2, #0
 8000dca:	213c      	movs	r1, #60	; 0x3c
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 fa29 	bl	8001224 <Display_I2C_Write>
	//Display_Fill(Display_COLOR_WHITE);	// Clear screen
	Display_Fill(oled ,Display_COLOR_BLACK);	// Clear screen
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f84c 	bl	8000e72 <Display_Fill>
	Display_UpdateScreen(oled);		// Update screen
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 f811 	bl	8000e02 <Display_UpdateScreen>

	// Set default values
	oled->CurrentX = 0;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = 0;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

	// Initialized OK
	oled->Initialized = 1;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409

	// Return OK
	return 1;
 8000df8:	2301      	movs	r3, #1
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <Display_UpdateScreen>:
 * This function updates the screen of the OLED display by writing the contents of the buffer "oled->Display_Buffer" to the screen.
 * It does this by iterating through each of the 8 pages (m) on the OLED display and setting the page address to the current page (0xB0 + m).
 * It then sets the column address to the start of the page (0x00 and 0x10) and writes the contents
 * of the corresponding section of the buffer (Display_WIDTH * m) to the screen using the Display_I2C_WriteMulti function.
 */
void Display_UpdateScreen(OLED_t * oled) {
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af02      	add	r7, sp, #8
 8000e08:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
 8000e0e:	e028      	b.n	8000e62 <Display_UpdateScreen+0x60>
		Display_WriteCommand(oled , 0xB0 + m);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	3b50      	subs	r3, #80	; 0x50
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2202      	movs	r2, #2
 8000e18:	9200      	str	r2, [sp, #0]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	213c      	movs	r1, #60	; 0x3c
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 fa00 	bl	8001224 <Display_I2C_Write>
		Display_WriteCommand(oled , 0x00);
 8000e24:	2302      	movs	r3, #2
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	213c      	movs	r1, #60	; 0x3c
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 f9f8 	bl	8001224 <Display_I2C_Write>
		Display_WriteCommand(oled , 0x10);
 8000e34:	2302      	movs	r3, #2
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2310      	movs	r3, #16
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	213c      	movs	r1, #60	; 0x3c
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f000 f9f0 	bl	8001224 <Display_I2C_Write>

		Display_I2C_WriteMulti(oled , 0x3C, 0x40, &(oled->Display_Buffer[Display_WIDTH * m]), Display_WIDTH);
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	01db      	lsls	r3, r3, #7
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2280      	movs	r2, #128	; 0x80
 8000e50:	9200      	str	r2, [sp, #0]
 8000e52:	2240      	movs	r2, #64	; 0x40
 8000e54:	213c      	movs	r1, #60	; 0x3c
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 f957 	bl	800110a <Display_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	2b07      	cmp	r3, #7
 8000e66:	d9d3      	bls.n	8000e10 <Display_UpdateScreen+0xe>

	}
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <Display_Fill>:
 * The function takes in two arguments: a pointer to an OLED structure (oled) and the color to fill the display with (color).
 * The memset function is then used to fill the buffer with either 0x00 (black) or 0xFF (white) depending on the color passed in as an argument.
 * The number of bytes to be filled is equal to the size of the buffer, which is defined by sizeof(oled->Display_Buffer).
 * This function is used to clear the screen and set all pixels to the specified color.
 */
void Display_Fill(OLED_t * oled , Display_COLOR_t color) {
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	70fb      	strb	r3, [r7, #3]
	// Set memory, fill a block of memory with value
	memset(oled->Display_Buffer, (color == Display_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(oled->Display_Buffer));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	1d18      	adds	r0, r3, #4
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <Display_Fill+0x1a>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e000      	b.n	8000e8e <Display_Fill+0x1c>
 8000e8c:	23ff      	movs	r3, #255	; 0xff
 8000e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e92:	4619      	mov	r1, r3
 8000e94:	f001 f81e 	bl	8001ed4 <memset>
  //memset(starting address, value to be filled, number of bytes to be filled)
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <Display_DrawPixel>:
 * If they are not, the function exits. Next, it checks if the display is set to be inverted and, if it is, it inverts the color of the pixel.
 * Finally, it sets the color of the pixel in the Display_Buffer using bit manipulation. If the color is white, it sets the corresponding bit in the buffer to 1.
 * If the color is black, it sets the corresponding bit to 0.
 * This allows the display to render the pixel on the screen.
 */
void Display_DrawPixel(OLED_t * oled ,uint16_t x, uint16_t y, Display_COLOR_t color) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	817b      	strh	r3, [r7, #10]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	813b      	strh	r3, [r7, #8]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	71fb      	strb	r3, [r7, #7]

	if (x >= Display_WIDTH || y >= Display_HEIGHT)
 8000eba:	897b      	ldrh	r3, [r7, #10]
 8000ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ebe:	d84f      	bhi.n	8000f60 <Display_DrawPixel+0xc0>
 8000ec0:	893b      	ldrh	r3, [r7, #8]
 8000ec2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ec4:	d84c      	bhi.n	8000f60 <Display_DrawPixel+0xc0>
		// Error
		return;
	}

	// Check if pixels are inverted
	if (oled->Inverted) {
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <Display_DrawPixel+0x3e>
		color = (Display_COLOR_t)!color;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2301      	moveq	r3, #1
 8000ed8:	2300      	movne	r3, #0
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	71fb      	strb	r3, [r7, #7]
	}

	// Set color
	if (color == Display_COLOR_WHITE) {
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d11d      	bne.n	8000f20 <Display_DrawPixel+0x80>
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] |= 1 << (y % 8);
 8000ee4:	897a      	ldrh	r2, [r7, #10]
 8000ee6:	893b      	ldrh	r3, [r7, #8]
 8000ee8:	08db      	lsrs	r3, r3, #3
 8000eea:	b298      	uxth	r0, r3
 8000eec:	4603      	mov	r3, r0
 8000eee:	01db      	lsls	r3, r3, #7
 8000ef0:	4413      	add	r3, r2
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	791b      	ldrb	r3, [r3, #4]
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	893b      	ldrh	r3, [r7, #8]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	2101      	movs	r1, #1
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b259      	sxtb	r1, r3
 8000f0c:	897a      	ldrh	r2, [r7, #10]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	01db      	lsls	r3, r3, #7
 8000f12:	4413      	add	r3, r2
 8000f14:	b2c9      	uxtb	r1, r1
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4413      	add	r3, r2
 8000f1a:	460a      	mov	r2, r1
 8000f1c:	711a      	strb	r2, [r3, #4]
 8000f1e:	e020      	b.n	8000f62 <Display_DrawPixel+0xc2>
	} else {
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] &= ~(1 << (y % 8));
 8000f20:	897a      	ldrh	r2, [r7, #10]
 8000f22:	893b      	ldrh	r3, [r7, #8]
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	b298      	uxth	r0, r3
 8000f28:	4603      	mov	r3, r0
 8000f2a:	01db      	lsls	r3, r3, #7
 8000f2c:	4413      	add	r3, r2
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	4413      	add	r3, r2
 8000f32:	791b      	ldrb	r3, [r3, #4]
 8000f34:	b25a      	sxtb	r2, r3
 8000f36:	893b      	ldrh	r3, [r7, #8]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	b259      	sxtb	r1, r3
 8000f4c:	897a      	ldrh	r2, [r7, #10]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	01db      	lsls	r3, r3, #7
 8000f52:	4413      	add	r3, r2
 8000f54:	b2c9      	uxtb	r1, r1
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	4413      	add	r3, r2
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	711a      	strb	r2, [r3, #4]
 8000f5e:	e000      	b.n	8000f62 <Display_DrawPixel+0xc2>
		return;
 8000f60:	bf00      	nop
	}
}
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <Display_GotoXY>:
 * This function sets the current write position on the OLED display to the specified x and y coordinates.
 * The OLED_t struct pointer "oled" is passed in as a parameter, and the struct contains the current x and y position as members "CurrentX" and "CurrentY", respectively.
 * The function updates these members with the new x and y coordinates passed in as parameters.
 * This allows for easy control over the position for subsequent writes or drawing operations.
 */
void Display_GotoXY(OLED_t * oled ,uint16_t x, uint16_t y) {
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]
 8000f76:	4613      	mov	r3, r2
 8000f78:	803b      	strh	r3, [r7, #0]
	// Set write pointers
	oled->CurrentX = x;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	887a      	ldrh	r2, [r7, #2]
 8000f7e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = y;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	883a      	ldrh	r2, [r7, #0]
 8000f86:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <Display_Putc>:
 * It checks if there is enough space on the OLED display to write the character in the current position,
 * and if there is, it uses the font definition to determine which pixels should be turned on or off to write the character.
 * It then increments the current X position on the OLED structure so that the next character can be written in the correct position.
 * The function returns the character that was written.
 */
char Display_Putc(OLED_t * oled ,char ch, FontDef_t *Font, Display_COLOR_t color) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	72fb      	strb	r3, [r7, #11]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	// Check available space in LCD
	if (
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4413      	add	r3, r2
	if (
 8000fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000fb8:	dc08      	bgt.n	8000fcc <Display_Putc+0x38>
		Display_HEIGHT <= (oled->CurrentY + Font->FontHeight)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	785b      	ldrb	r3, [r3, #1]
 8000fc6:	4413      	add	r3, r2
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 8000fc8:	2b3f      	cmp	r3, #63	; 0x3f
 8000fca:	dd01      	ble.n	8000fd0 <Display_Putc+0x3c>
	) {
		// Error
		return 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e064      	b.n	800109a <Display_Putc+0x106>
	}

	// Go through font
	for (i = 0; i < Font->FontHeight; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	e04f      	b.n	8001076 <Display_Putc+0xe2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	3b20      	subs	r3, #32
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	7849      	ldrb	r1, [r1, #1]
 8000fe2:	fb01 f303 	mul.w	r3, r1, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	440b      	add	r3, r1
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	e034      	b.n	8001064 <Display_Putc+0xd0>
			if ((b << j) & 0x8000) {
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d012      	beq.n	8001030 <Display_Putc+0x9c>
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t) color);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	b29b      	uxth	r3, r3
 8001014:	4413      	add	r3, r2
 8001016:	b299      	uxth	r1, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	b29b      	uxth	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	b29a      	uxth	r2, r3
 8001026:	7abb      	ldrb	r3, [r7, #10]
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff ff39 	bl	8000ea0 <Display_DrawPixel>
 800102e:	e016      	b.n	800105e <Display_Putc+0xca>
			} else {
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t)!color);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	b29b      	uxth	r3, r3
 800103a:	4413      	add	r3, r2
 800103c:	b299      	uxth	r1, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	b29b      	uxth	r3, r3
 8001048:	4413      	add	r3, r2
 800104a:	b29a      	uxth	r2, r3
 800104c:	7abb      	ldrb	r3, [r7, #10]
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f7ff ff21 	bl	8000ea0 <Display_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	3301      	adds	r3, #1
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4293      	cmp	r3, r2
 800106e:	d3c4      	bcc.n	8000ffa <Display_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	3301      	adds	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	461a      	mov	r2, r3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	4293      	cmp	r3, r2
 8001080:	d3a9      	bcc.n	8000fd6 <Display_Putc+0x42>
			}
		}
	}

	// Increase pointer
	oled->CurrentX += Font->FontWidth;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	4413      	add	r3, r2
 8001090:	b29a      	uxth	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

	// Return character written
	return ch;
 8001098:	7afb      	ldrb	r3, [r7, #11]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <Display_Puts>:
 * The function starts by setting a pointer to the first character of the string and then loops through each character of the string. For each character,
 * the function calls the Display_Putc function to write the character to the OLED display and then increments the pointer to the next character in the string.
 * If there is an error while writing a character, the function returns that character.
 * If all the characters in the string are successfully written to the OLED display, the function returns the last character of the string (which should be a null character).
 */
char Display_Puts(OLED_t * oled ,char* str, FontDef_t* Font, Display_COLOR_t color) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	70fb      	strb	r3, [r7, #3]
	// Write characters
	while (*str) {
 80010b0:	e012      	b.n	80010d8 <Display_Puts+0x36>
		// Write character by character
		if (Display_Putc(oled ,*str, Font, color) != *str) {
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	7819      	ldrb	r1, [r3, #0]
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f7ff ff6a 	bl	8000f94 <Display_Putc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d002      	beq.n	80010d2 <Display_Puts+0x30>
			// Return error
			return *str;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	e008      	b.n	80010e4 <Display_Puts+0x42>
		}

		// Increase string pointer
		str++;
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
	while (*str) {
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1e8      	bne.n	80010b2 <Display_Puts+0x10>
	}

	// Everything OK, zero should be returned
	return *str;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	781b      	ldrb	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <Display_Clear>:
 * Then it calls Display_UpdateScreen() to update the OLED screen with the new display buffer.
 * This effectively clears the entire OLED screen and sets it to a blank black display.
 */

void Display_Clear (OLED_t * oled )
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	Display_Fill (oled , 0);
 80010f4:	2100      	movs	r1, #0
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff febb 	bl	8000e72 <Display_Fill>
	Display_UpdateScreen(oled);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fe80 	bl	8000e02 <Display_UpdateScreen>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <Display_I2C_WriteMulti>:
 * The data is sent one byte at a time, and the function waits for the TXIS flag to be set before sending the next byte. Once all the data has been sent, the function ends.
 */


void Display_I2C_WriteMulti(OLED_t * oled,uint8_t address, uint8_t dataRegister, uint8_t *data , uint16_t numBytes)	//data is a pointer
{
 800110a:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	72fb      	strb	r3, [r7, #11]
 800111a:	4613      	mov	r3, r2
 800111c:	72bb      	strb	r3, [r7, #10]
 800111e:	466b      	mov	r3, sp
 8001120:	4618      	mov	r0, r3
	uint8_t i;
	uint8_t j;
	uint8_t dt[numBytes];		//necessary for multi Write
 8001122:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001124:	460b      	mov	r3, r1
 8001126:	3b01      	subs	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	b28b      	uxth	r3, r1
 800112c:	2200      	movs	r2, #0
 800112e:	4698      	mov	r8, r3
 8001130:	4691      	mov	r9, r2
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800113e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001146:	b28b      	uxth	r3, r1
 8001148:	2200      	movs	r2, #0
 800114a:	461c      	mov	r4, r3
 800114c:	4615      	mov	r5, r2
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	00eb      	lsls	r3, r5, #3
 8001158:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800115c:	00e2      	lsls	r2, r4, #3
 800115e:	460b      	mov	r3, r1
 8001160:	3307      	adds	r3, #7
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	ebad 0d03 	sub.w	sp, sp, r3
 800116a:	466b      	mov	r3, sp
 800116c:	3300      	adds	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
	I2C_TypeDef *  i2c = oled->dev;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	613b      	str	r3, [r7, #16]
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	005a      	lsls	r2, r3, #1
 800117a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800117c:	041b      	lsls	r3, r3, #16
 800117e:	4313      	orrs	r3, r2
 8001180:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8001194:	e007      	b.n	80011a6 <Display_I2C_WriteMulti+0x9c>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <Display_I2C_WriteMulti+0x9c>
 80011a2:	4685      	mov	sp, r0
 80011a4:	e039      	b.n	800121a <Display_I2C_WriteMulti+0x110>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f1      	beq.n	8001196 <Display_I2C_WriteMulti+0x8c>
			return;}}

	dt[0] = dataRegister;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	7aba      	ldrb	r2, [r7, #10]
 80011b6:	701a      	strb	r2, [r3, #0]
	for(i=0; i<numBytes; i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	77bb      	strb	r3, [r7, #30]
 80011bc:	e00a      	b.n	80011d4 <Display_I2C_WriteMulti+0xca>
	{
	dt[i+1] = data[i];	//necessary for multi Write
 80011be:	7fbb      	ldrb	r3, [r7, #30]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	441a      	add	r2, r3
 80011c4:	7fbb      	ldrb	r3, [r7, #30]
 80011c6:	3301      	adds	r3, #1
 80011c8:	7811      	ldrb	r1, [r2, #0]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<numBytes; i++)
 80011ce:	7fbb      	ldrb	r3, [r7, #30]
 80011d0:	3301      	adds	r3, #1
 80011d2:	77bb      	strb	r3, [r7, #30]
 80011d4:	7fbb      	ldrb	r3, [r7, #30]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80011da:	429a      	cmp	r2, r3
 80011dc:	d8ef      	bhi.n	80011be <Display_I2C_WriteMulti+0xb4>
	}

	for(j=0; j <= (numBytes-1); j++)
 80011de:	2300      	movs	r3, #0
 80011e0:	77fb      	strb	r3, [r7, #31]
 80011e2:	e014      	b.n	800120e <Display_I2C_WriteMulti+0x104>
	{
		i2c->TXDR = dt[j];
 80011e4:	7ffb      	ldrb	r3, [r7, #31]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	461a      	mov	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 80011f0:	7ffa      	ldrb	r2, [r7, #31]
 80011f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80011f4:	3b01      	subs	r3, #1
 80011f6:	429a      	cmp	r2, r3
 80011f8:	da06      	bge.n	8001208 <Display_I2C_WriteMulti+0xfe>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}		//ggf TXIS mit TXE ergänzen
 80011fa:	bf00      	nop
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f9      	beq.n	80011fc <Display_I2C_WriteMulti+0xf2>
	for(j=0; j <= (numBytes-1); j++)
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	3301      	adds	r3, #1
 800120c:	77fb      	strb	r3, [r7, #31]
 800120e:	7ffb      	ldrb	r3, [r7, #31]
 8001210:	b29b      	uxth	r3, r3
 8001212:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001214:	429a      	cmp	r2, r3
 8001216:	d8e5      	bhi.n	80011e4 <Display_I2C_WriteMulti+0xda>
 8001218:	4685      	mov	sp, r0
		}
	}

}
 800121a:	3724      	adds	r7, #36	; 0x24
 800121c:	46bd      	mov	sp, r7
 800121e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001222:	4770      	bx	lr

08001224 <Display_I2C_Write>:
 * The number of bytes to be written (in this case, 2 bytes, one for the register and one for the data) is also passed as an argument.
 * The function starts the I2C communication and waits for the transmit buffer to be empty before sending the register and data.
 * It then waits for the transmit buffer to be empty again before sending the data. The function will exit and return if a NACK is received during the transmission.
 */
void Display_I2C_Write(OLED_t * oled, uint8_t address, uint8_t dataRegister, uint8_t data , uint8_t numBytes)
{
 8001224:	b480      	push	{r7}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	4608      	mov	r0, r1
 800122e:	4611      	mov	r1, r2
 8001230:	461a      	mov	r2, r3
 8001232:	4603      	mov	r3, r0
 8001234:	70fb      	strb	r3, [r7, #3]
 8001236:	460b      	mov	r3, r1
 8001238:	70bb      	strb	r3, [r7, #2]
 800123a:	4613      	mov	r3, r2
 800123c:	707b      	strb	r3, [r7, #1]


	uint8_t j;
	uint8_t dt[2];
	I2C_TypeDef *  i2c = oled->dev;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
	dt[0] = dataRegister;
 8001244:	78bb      	ldrb	r3, [r7, #2]
 8001246:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	737b      	strb	r3, [r7, #13]

	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	005a      	lsls	r2, r3, #1
 8001250:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001254:	041b      	lsls	r3, r3, #16
 8001256:	4313      	orrs	r3, r2
 8001258:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 800126c:	e005      	b.n	800127a <Display_I2C_Write+0x56>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d126      	bne.n	80012c8 <Display_I2C_Write+0xa4>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f3      	beq.n	800126e <Display_I2C_Write+0x4a>
			return;}}

	for(j=0; j <= (numBytes-1); j++)
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]
 800128a:	e017      	b.n	80012bc <Display_I2C_Write+0x98>
	{
		i2c->TXDR = dt[j];
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	3318      	adds	r3, #24
 8001290:	443b      	add	r3, r7
 8001292:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001296:	461a      	mov	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 800129c:	7dfa      	ldrb	r2, [r7, #23]
 800129e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	429a      	cmp	r2, r3
 80012a6:	da06      	bge.n	80012b6 <Display_I2C_Write+0x92>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}
 80012a8:	bf00      	nop
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f9      	beq.n	80012aa <Display_I2C_Write+0x86>
	for(j=0; j <= (numBytes-1); j++)
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	3301      	adds	r3, #1
 80012ba:	75fb      	strb	r3, [r7, #23]
 80012bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d8e2      	bhi.n	800128c <Display_I2C_Write+0x68>
 80012c6:	e000      	b.n	80012ca <Display_I2C_Write+0xa6>
			return;}}
 80012c8:	bf00      	nop
		}
	}

}
 80012ca:	371c      	adds	r7, #28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
	...

080012d4 <gpio_clock_enable>:
 * After each device reset, all peripheral clocks are disabled (except for the SRAM and FLITF).
Before using a peripheral user has to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.  s.50
 */
void gpio_clock_enable(GPIO_TypeDef * Port)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if(Port == GPIOA)        //  Bit 17 IOPAEN: I/O port A clock enable
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012e2:	d106      	bne.n	80012f2 <gpio_clock_enable+0x1e>
	{
		RCC->AHBENR |= (1 << GPIOA_CLOCK_ENABLE_BIT) ; //(1<<17);
 80012e4:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <gpio_clock_enable+0xc0>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	4a2a      	ldr	r2, [pc, #168]	; (8001394 <gpio_clock_enable+0xc0>)
 80012ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ee:	6153      	str	r3, [r2, #20]
	}
	*/
	else{

	}
}
 80012f0:	e04b      	b.n	800138a <gpio_clock_enable+0xb6>
	else if(Port == GPIOB)  //    Bit 18 IOPBEN: I/O port B  clock enable
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a28      	ldr	r2, [pc, #160]	; (8001398 <gpio_clock_enable+0xc4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d106      	bne.n	8001308 <gpio_clock_enable+0x34>
		RCC->AHBENR |= (1 << GPIOB_CLOCK_ENABLE_BIT) ;
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <gpio_clock_enable+0xc0>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a25      	ldr	r2, [pc, #148]	; (8001394 <gpio_clock_enable+0xc0>)
 8001300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001304:	6153      	str	r3, [r2, #20]
}
 8001306:	e040      	b.n	800138a <gpio_clock_enable+0xb6>
	else if(Port == GPIOC)   //  Bit 19 IOPCEN: I/O port C clock enable
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a24      	ldr	r2, [pc, #144]	; (800139c <gpio_clock_enable+0xc8>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d106      	bne.n	800131e <gpio_clock_enable+0x4a>
		RCC->AHBENR |= (1 << GPIOC_CLOCK_ENABLE_BIT) ;
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <gpio_clock_enable+0xc0>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <gpio_clock_enable+0xc0>)
 8001316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800131a:	6153      	str	r3, [r2, #20]
}
 800131c:	e035      	b.n	800138a <gpio_clock_enable+0xb6>
	else if(Port == GPIOD)    //  Bit 20 IOPDEN: I/O port D clock enable
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <gpio_clock_enable+0xcc>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d106      	bne.n	8001334 <gpio_clock_enable+0x60>
		RCC->AHBENR |= (1 << GPIOD_CLOCK_ENABLE_BIT) ;
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <gpio_clock_enable+0xc0>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <gpio_clock_enable+0xc0>)
 800132c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001330:	6153      	str	r3, [r2, #20]
}
 8001332:	e02a      	b.n	800138a <gpio_clock_enable+0xb6>
	else if(Port == GPIOE)    //  Bit 21 IOPEEN: I/O port E clock enable
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <gpio_clock_enable+0xd0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d106      	bne.n	800134a <gpio_clock_enable+0x76>
		RCC->AHBENR |= (1 << GPIOE_CLOCK_ENABLE_BIT) ;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <gpio_clock_enable+0xc0>)
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <gpio_clock_enable+0xc0>)
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001346:	6153      	str	r3, [r2, #20]
}
 8001348:	e01f      	b.n	800138a <gpio_clock_enable+0xb6>
	else if(Port == GPIOF)   //  Bit 22 IOPFEN: I/O port F clock enable
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <gpio_clock_enable+0xd4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d106      	bne.n	8001360 <gpio_clock_enable+0x8c>
		RCC->AHBENR |= (1 << GPIOF_CLOCK_ENABLE_BIT) ;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <gpio_clock_enable+0xc0>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <gpio_clock_enable+0xc0>)
 8001358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800135c:	6153      	str	r3, [r2, #20]
}
 800135e:	e014      	b.n	800138a <gpio_clock_enable+0xb6>
	else if(Port == GPIOG)    //  Bit 23 IOPGEN: I/O port G clock enable
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <gpio_clock_enable+0xd8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d106      	bne.n	8001376 <gpio_clock_enable+0xa2>
		RCC->AHBENR |= (1 << GPIOG_CLOCK_ENABLE_BIT) ;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <gpio_clock_enable+0xc0>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4a09      	ldr	r2, [pc, #36]	; (8001394 <gpio_clock_enable+0xc0>)
 800136e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001372:	6153      	str	r3, [r2, #20]
}
 8001374:	e009      	b.n	800138a <gpio_clock_enable+0xb6>
	else if(Port == GPIOH)    //  Bit 16 IOPHEN: I/O port H clock enable
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <gpio_clock_enable+0xdc>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d105      	bne.n	800138a <gpio_clock_enable+0xb6>
		RCC->AHBENR |= (1 << GPIOH_CLOCK_ENABLE_BIT) ;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <gpio_clock_enable+0xc0>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <gpio_clock_enable+0xc0>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6153      	str	r3, [r2, #20]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400
 800139c:	48000800 	.word	0x48000800
 80013a0:	48000c00 	.word	0x48000c00
 80013a4:	48001000 	.word	0x48001000
 80013a8:	48001400 	.word	0x48001400
 80013ac:	48001800 	.word	0x48001800
 80013b0:	48001c00 	.word	0x48001c00

080013b4 <reset_io>:
 * the OSPEEDR register controls the output speed,
 * and the PUPDR register controls the pull-up/pull-down settings.
 * By setting all of these registers to zero, the function effectively disables all the pins on the specified port
 * and sets them to their default state, which is an input mode with no pull-up/pull-down resistors and no output buffer.
 */
void reset_io(GPIO_TypeDef * Port ) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	Port->MODER   = 0x00 ;             // set pin Mode
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
	Port->OTYPER  = 0x00 ;             //set output type OD/PP
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR = 0x00 ;             //set output speed
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  = 0x00 ;             //set pin Pull
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <gpio_config_pin>:
 * And the otype variable sets the pin's output type (open-drain or push-pull).
 * The function sets these parameters by setting the appropriate bits in the MODER, OTYPER, OSPEEDR, and PUPDR registers of the specified port.
 */
void gpio_config_pin(GPIO_TypeDef * Port , int Pin , GPIO_Mode_t Mode ,
					   GPIO_Speed_t speed ,GPIO_Pull_t pull, GPIO_out_type_t otype)
{
 80013de:	b480      	push	{r7}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	4611      	mov	r1, r2
 80013ea:	461a      	mov	r2, r3
 80013ec:	460b      	mov	r3, r1
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
	Port->MODER   |= (Mode  << 2 * Pin) ; // set  pin Mode
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	79f9      	ldrb	r1, [r7, #7]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	0052      	lsls	r2, r2, #1
 80013fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001402:	431a      	orrs	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	601a      	str	r2, [r3, #0]
	Port->OTYPER  |= (otype << Pin)     ; //set output type OD/PP
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	7f39      	ldrb	r1, [r7, #28]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	fa01 f202 	lsl.w	r2, r1, r2
 8001414:	431a      	orrs	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR |= (speed << 2 * Pin) ; //set output speed
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	79b9      	ldrb	r1, [r7, #6]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	0052      	lsls	r2, r2, #1
 8001424:	fa01 f202 	lsl.w	r2, r1, r2
 8001428:	431a      	orrs	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  |= (pull  << 2 * Pin) ; //set pin Pull
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	7e39      	ldrb	r1, [r7, #24]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	0052      	lsls	r2, r2, #1
 8001438:	fa01 f202 	lsl.w	r2, r1, r2
 800143c:	431a      	orrs	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	60da      	str	r2, [r3, #12]
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <gpio_set_pinState>:
 * if it is high it uses bitwise OR operator to set the specified pin to high,
 * if it is low it uses bitwise AND operator with NOT operator to set the specified pin to low.
 */

void gpio_set_pinState(GPIO_TypeDef * Port , int Pin , Pin_State State)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	71fb      	strb	r3, [r7, #7]
    // assert that the pin number is less than 16
    // this is to ensure that the pin number is within the valid range
    // assert(pin < 16);

    if(State == HIGH)
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <gpio_set_pinState+0x28>
    {
        // Use bitwise OR operator to set the specified pin to high
        Port->ODR |= (1 << Pin);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	2101      	movs	r1, #1
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	fa01 f202 	lsl.w	r2, r1, r2
 800146c:	431a      	orrs	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	615a      	str	r2, [r3, #20]
    }
    else {
        // Use bitwise AND operator with NOT operator to set the specified pin to low
        Port->ODR &= ~(1 << Pin);
    }
}
 8001472:	e009      	b.n	8001488 <gpio_set_pinState+0x3c>
        Port->ODR &= ~(1 << Pin);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	2101      	movs	r1, #1
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	43d2      	mvns	r2, r2
 8001482:	401a      	ands	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	615a      	str	r2, [r3, #20]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
	...

08001494 <I2C_Init>:
 * Depending on which peripheral is being initialized, the function sets up the corresponding GPIO pins as alternate function mode and enables the peripheral clock.
 * After that, the function sets up the timing configuration for the I2C peripheral by setting the PRESC, SCLDEL, and SDADEL bits in the TIMINGR register.
 * Finally, the function enables the I2C peripheral by setting the PE bit in the CR1 register.
 */
void I2C_Init(I2C_TypeDef * i2c)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]


 	 if( i2c == I2C1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a6e      	ldr	r2, [pc, #440]	; (8001658 <I2C_Init+0x1c4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d118      	bne.n	80014d6 <I2C_Init+0x42>
 	 {
 		// PB6  I2C1_SCL, PB7   I2C1_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80014a4:	4b6d      	ldr	r3, [pc, #436]	; (800165c <I2C_Init+0x1c8>)
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	4a6c      	ldr	r2, [pc, #432]	; (800165c <I2C_Init+0x1c8>)
 80014aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ae:	6153      	str	r3, [r2, #20]
 		GPIOB->MODER |= (0b10 << GPIO_MODER_MODER6_Pos) |
 80014b0:	4b6b      	ldr	r3, [pc, #428]	; (8001660 <I2C_Init+0x1cc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a6a      	ldr	r2, [pc, #424]	; (8001660 <I2C_Init+0x1cc>)
 80014b6:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80014ba:	6013      	str	r3, [r2, #0]
		   (0b10 << GPIO_MODER_MODER7_Pos); // PB6, PB7: Alternate function
		 GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFRL6_Pos) |
 80014bc:	4b68      	ldr	r3, [pc, #416]	; (8001660 <I2C_Init+0x1cc>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a67      	ldr	r2, [pc, #412]	; (8001660 <I2C_Init+0x1cc>)
 80014c2:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 80014c6:	6213      	str	r3, [r2, #32]
		   (4 << GPIO_AFRL_AFRL7_Pos);         // 0100: AF4

		 RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //i2c clock enable
 80014c8:	4b64      	ldr	r3, [pc, #400]	; (800165c <I2C_Init+0x1c8>)
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	4a63      	ldr	r2, [pc, #396]	; (800165c <I2C_Init+0x1c8>)
 80014ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d2:	61d3      	str	r3, [r2, #28]
 80014d4:	e0ac      	b.n	8001630 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C2 )
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a62      	ldr	r2, [pc, #392]	; (8001664 <I2C_Init+0x1d0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d14c      	bne.n	8001578 <I2C_Init+0xe4>
 	 {
 		//PA9 I2C2_SCL , PA10 I2C2_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <I2C_Init+0x1c8>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	4a5e      	ldr	r2, [pc, #376]	; (800165c <I2C_Init+0x1c8>)
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	6153      	str	r3, [r2, #20]
 		GPIOA->MODER |= (2 << 18) ;// PA9 10: Alternate function mode
 80014ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014f8:	6013      	str	r3, [r2, #0]
 		GPIOA->MODER |= (2 << 20) ;//PA10 10: Alternate function mode
 80014fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001508:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER |= (1 << 9 ) ;//PA9  GPIO port output type register 1: Output open-drain
 800150a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001518:	6053      	str	r3, [r2, #4]
 		GPIOA->OTYPER |= (1 << 10) ;//PA10 Oepn Drain
 800151a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001528:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 18) | (3 << 20) ; //PA9,PA10  GPIO port output speed register 11: High speed
 800152a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001534:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8001538:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR  |= (1<<18) | (1<<20) ;//PA9 ,PA10 GPIO port pull-up/pull-down register 01: Pull-up
 800153a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001544:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8001548:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1] |= ( 4 << 4 );   //select GPIO alternate function high register  PA9  0100: AF4
 800154a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001558:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOA->AFR[1] |= (4 << 8);   //select GPIO alternate function high register  PA10   0100: AF4
 800155a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001564:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001568:	6253      	str	r3, [r2, #36]	; 0x24

 		RCC->APB1ENR |=RCC_APB1ENR_I2C2EN ; //i2c clock enable
 800156a:	4b3c      	ldr	r3, [pc, #240]	; (800165c <I2C_Init+0x1c8>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a3b      	ldr	r2, [pc, #236]	; (800165c <I2C_Init+0x1c8>)
 8001570:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	e05b      	b.n	8001630 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C3 )
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3b      	ldr	r2, [pc, #236]	; (8001668 <I2C_Init+0x1d4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d157      	bne.n	8001630 <I2C_Init+0x19c>
 	 {
 		//PA8 I2C3_SCL , PB5 I2C3_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <I2C_Init+0x1c8>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	4a35      	ldr	r2, [pc, #212]	; (800165c <I2C_Init+0x1c8>)
 8001586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158a:	6153      	str	r3, [r2, #20]
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <I2C_Init+0x1c8>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	4a32      	ldr	r2, [pc, #200]	; (800165c <I2C_Init+0x1c8>)
 8001592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001596:	6153      	str	r3, [r2, #20]

 		GPIOA->MODER   |= (2 << 16) ;// PA8 ALF
 8001598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a6:	6013      	str	r3, [r2, #0]
 		GPIOB->MODER   |= (2 << 10) ;//PB5 ALF
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <I2C_Init+0x1cc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <I2C_Init+0x1cc>)
 80015ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015b2:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER  |= (1 << 8 ) ;//PA8 Open Drain
 80015b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6053      	str	r3, [r2, #4]
 		GPIOB->OTYPER  |= (1 << 5 ) ;//PB5 Oepn Drain
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <I2C_Init+0x1cc>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a25      	ldr	r2, [pc, #148]	; (8001660 <I2C_Init+0x1cc>)
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 16) ;//PA8 High Speed
 80015d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015da:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80015de:	6093      	str	r3, [r2, #8]
 		GPIOB->OSPEEDR |= (3 << 10) ; //PB5 High Speed
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <I2C_Init+0x1cc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <I2C_Init+0x1cc>)
 80015e6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80015ea:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR   |= (1 << 16) ;//PA8 PULL up
 80015ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fa:	60d3      	str	r3, [r2, #12]
 		GPIOB->PUPDR   |= (1 << 10) ;//PB5 PULL up
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <I2C_Init+0x1cc>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4a17      	ldr	r2, [pc, #92]	; (8001660 <I2C_Init+0x1cc>)
 8001602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001606:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1]  |= ( 3 << 0 );//select Alf PA8    0011: AF3
 8001608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001612:	f043 0303 	orr.w	r3, r3, #3
 8001616:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOB->AFR[0]  |= (8 << 20) ;//select Alf PB5     1000: AF8
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <I2C_Init+0x1cc>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a10      	ldr	r2, [pc, #64]	; (8001660 <I2C_Init+0x1cc>)
 800161e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001622:	6213      	str	r3, [r2, #32]

 		RCC->APB1ENR |=RCC_APB1ENR_I2C3EN ; //i2c clock enable
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <I2C_Init+0x1c8>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	4a0c      	ldr	r2, [pc, #48]	; (800165c <I2C_Init+0x1c8>)
 800162a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800162e:	61d3      	str	r3, [r2, #28]
	 * Enabling and disabling the peripheral
	 * The I2C peripheral clock must be configured and enabled in the clock controller.
	 * Then the I2C can be enabled by setting the PE(PinEnable) bit in the I2C_CR1 register.
	 * When the I2C is disabled (PE=0), the I2C performs a software reset.
	 */
	 i2c->CR1 &= ~I2C_CR1_PE;                // disable the i2c peripheral clock  (clear PE bit in I2C_CR1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 0201 	bic.w	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	601a      	str	r2, [r3, #0]
	/*
	 * I2C timings
	 * The timings must be configured in order to guarantee a correct data hold and setup time,
	 * used in master and slave modes. This is done by programming the PRESC,SCLDEL and SDADEL bits in the I2C_TIMINGR register.
	 */
	 i2c->TIMINGR = (1 << I2C_TIMINGR_PRESC_Pos) | // Standard mode 100 kHz @ 8 MHz (page 849/1141)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <I2C_Init+0x1d8>)
 8001640:	611a      	str	r2, [r3, #16]
	             (0x13 << I2C_TIMINGR_SCLL_Pos)  |
	             (0xF << I2C_TIMINGR_SCLH_Pos)   |
	             (0x2 << I2C_TIMINGR_SDADEL_Pos) |
	             (0x4 << I2C_TIMINGR_SCLDEL_Pos);

	 i2c->CR1 |= I2C_CR1_PE;// enable the i2c peripheral clock (set PE bit inI2C_CR1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]

}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40005400 	.word	0x40005400
 800165c:	40021000 	.word	0x40021000
 8001660:	48000400 	.word	0x48000400
 8001664:	40005800 	.word	0x40005800
 8001668:	40007800 	.word	0x40007800
 800166c:	10420f13 	.word	0x10420f13

08001670 <I2C_Write>:

After that, it writes the data buffer to the I2C device using a for loop, the loop iterates len-1 times and writes a byte to the TXDR register each time.
 */

void I2C_Write(I2C_TypeDef * i2c , uint8_t address , uint8_t * data , uint8_t len)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	461a      	mov	r2, r3
 800167c:	460b      	mov	r3, r1
 800167e:	72fb      	strb	r3, [r7, #11]
 8001680:	4613      	mov	r3, r2
 8001682:	72bb      	strb	r3, [r7, #10]
    //configuring the CR2 register to send the device address, the length of the data buffer, and the write bit.
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (len << I2C_CR2_NBYTES_Pos)
 8001684:	7afb      	ldrb	r3, [r7, #11]
 8001686:	005a      	lsls	r2, r3, #1
 8001688:	7abb      	ldrb	r3, [r7, #10]
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	4313      	orrs	r3, r2
			                                        | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);
 800168e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (len << I2C_CR2_NBYTES_Pos)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	605a      	str	r2, [r3, #4]
    //sending start condition
		i2c->CR2 |= I2C_CR2_START;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	605a      	str	r2, [r3, #4]
    //waiting until the TXDR register is empty
		while ((i2c->ISR & I2C_ISR_TXIS)==0) {
 80016a2:	e005      	b.n	80016b0 <I2C_Write+0x40>
			if ((i2c->ISR & I2C_ISR_NACKF)){
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d123      	bne.n	80016f8 <I2C_Write+0x88>
		while ((i2c->ISR & I2C_ISR_TXIS)==0) {
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f3      	beq.n	80016a4 <I2C_Write+0x34>
				return;}}
    //writing data buffer to the I2C device using a for loop
		for(uint8_t j=0; j <= (len-1); j++)
 80016bc:	2300      	movs	r3, #0
 80016be:	75fb      	strb	r3, [r7, #23]
 80016c0:	e015      	b.n	80016ee <I2C_Write+0x7e>
		{
			i2c->TXDR = data[j];
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
			if(j < (len-1))
 80016d0:	7dfa      	ldrb	r2, [r7, #23]
 80016d2:	7abb      	ldrb	r3, [r7, #10]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	429a      	cmp	r2, r3
 80016d8:	da06      	bge.n	80016e8 <I2C_Write+0x78>
			{
                //waiting until the TXIS flag is set
				while((i2c->ISR & I2C_ISR_TXIS)==0){}
 80016da:	bf00      	nop
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f9      	beq.n	80016dc <I2C_Write+0x6c>
		for(uint8_t j=0; j <= (len-1); j++)
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	3301      	adds	r3, #1
 80016ec:	75fb      	strb	r3, [r7, #23]
 80016ee:	7aba      	ldrb	r2, [r7, #10]
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d8e5      	bhi.n	80016c2 <I2C_Write+0x52>
 80016f6:	e000      	b.n	80016fa <I2C_Write+0x8a>
				return;}}
 80016f8:	bf00      	nop
			}
		}
}
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <I2C_Read>:
This stops the current I2C communication and releases the bus for other devices to use it.
 */


void I2C_Read(I2C_TypeDef * i2c ,uint8_t address , uint8_t * buffer , int len)
{
 8001702:	b480      	push	{r7}
 8001704:	b087      	sub	sp, #28
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	460b      	mov	r3, r1
 8001710:	72fb      	strb	r3, [r7, #11]
    //setting the slave address and the number of bytes to be transmitted
    i2c->CR2  = ((address << 1) << I2C_CR2_SADD_Pos) ;
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
	i2c->CR2 |=   (len << I2C_CR2_NBYTES_Pos);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	0412      	lsls	r2, r2, #16
 8001724:	431a      	orrs	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	605a      	str	r2, [r3, #4]
    //setting the read bit
	i2c->CR2 |= (1<<I2C_CR2_RD_WRN_Pos);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	605a      	str	r2, [r3, #4]
    //generating start condition
	i2c->CR2 |= I2C_CR2_START;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	605a      	str	r2, [r3, #4]

    //reading data from the i2c device using a for loop
	 for( int i = 0 ;i<len ;i++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e01d      	b.n	8001784 <I2C_Read+0x82>
	 {
        //waiting for the RXNE flag to be set
		 while((i2c->ISR & I2C_ISR_RXNE) == 0) ;
 8001748:	bf00      	nop
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f9      	beq.n	800174a <I2C_Read+0x48>
        //reading the data from the RXDR register
		 *buffer = i2c->RXDR ;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	b2da      	uxtb	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	701a      	strb	r2, [r3, #0]
        //incrementing the buffer pointer
		 buffer++ ;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3301      	adds	r3, #1
 8001764:	607b      	str	r3, [r7, #4]

		 if(i == len - 1)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3b01      	subs	r3, #1
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	429a      	cmp	r2, r3
 800176e:	d106      	bne.n	800177e <I2C_Read+0x7c>
		 {
            //waiting for the TC flag to be set
			 while((i2c->ISR & I2C_ISR_TC) == 0) ;
 8001770:	bf00      	nop
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f9      	beq.n	8001772 <I2C_Read+0x70>
	 for( int i = 0 ;i<len ;i++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbdd      	blt.n	8001748 <I2C_Read+0x46>
		 }
		 else{
			 //nope
		 }
	 }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <keypad_init>:
 * The function initializes the keypad by setting the keypad port and start pin, enabling the clock for the specified GPIO port,
 * and configuring the keypad's key direction (input or output) using the keypad_config_key_direction() function.

 */
void keypad_init(GPIO_TypeDef * port , int s_pin)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	keypad_port = port   ;
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <keypad_init+0x2c>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6013      	str	r3, [r2, #0]
	start_pin   = s_pin  ;
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <keypad_init+0x30>)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	6013      	str	r3, [r2, #0]
	gpio_clock_enable(port) ;
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fd90 	bl	80012d4 <gpio_clock_enable>
	keypad_config_key_direction(port , s_pin) ;////set  the first 4 pins as output and the second 4 pins as input
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f808 	bl	80017cc <keypad_config_key_direction>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000d2c 	.word	0x20000d2c
 80017c8:	20000d30 	.word	0x20000d30

080017cc <keypad_config_key_direction>:
 */



static void keypad_config_key_direction( GPIO_TypeDef * port , int s_pin)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fdec 	bl	80013b4 <reset_io>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r1  1
 80017dc:	6839      	ldr	r1, [r7, #0]
 80017de:	1c4b      	adds	r3, r1, #1
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	2300      	movs	r3, #0
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2300      	movs	r3, #0
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2300      	movs	r3, #0
 80017ec:	2201      	movs	r2, #1
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fdf5 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r2  0
 80017f4:	6839      	ldr	r1, [r7, #0]
 80017f6:	1c4b      	adds	r3, r1, #1
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	2300      	movs	r3, #0
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2201      	movs	r2, #1
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fde9 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r3  0
 800180c:	6839      	ldr	r1, [r7, #0]
 800180e:	1c4b      	adds	r3, r1, #1
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	2300      	movs	r3, #0
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	2201      	movs	r2, #1
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fddd 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r4  0
 8001824:	6839      	ldr	r1, [r7, #0]
 8001826:	1c4b      	adds	r3, r1, #1
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	2300      	movs	r3, #0
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	2300      	movs	r3, #0
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2300      	movs	r3, #0
 8001834:	2201      	movs	r2, #1
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fdd1 	bl	80013de <gpio_config_pin>
	//configure the pins as Intput with pull-up
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C1  1
 800183c:	6839      	ldr	r1, [r7, #0]
 800183e:	1c4b      	adds	r3, r1, #1
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	2300      	movs	r3, #0
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	2301      	movs	r3, #1
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2300      	movs	r3, #0
 800184c:	2200      	movs	r2, #0
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fdc5 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C2  0
 8001854:	6839      	ldr	r1, [r7, #0]
 8001856:	1c4b      	adds	r3, r1, #1
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	2300      	movs	r3, #0
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	2301      	movs	r3, #1
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2300      	movs	r3, #0
 8001864:	2200      	movs	r2, #0
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fdb9 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C3  1
 800186c:	6839      	ldr	r1, [r7, #0]
 800186e:	1c4b      	adds	r3, r1, #1
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	2300      	movs	r3, #0
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	2301      	movs	r3, #1
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	2200      	movs	r2, #0
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fdad 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C4  1
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	1c4b      	adds	r3, r1, #1
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	2300      	movs	r3, #0
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	2301      	movs	r3, #1
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2300      	movs	r3, #0
 8001894:	2200      	movs	r2, #0
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fda1 	bl	80013de <gpio_config_pin>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <keypad_inverse_pin_direction>:
 * The reset_io() function is used to reset the pin direction and configuration of the specified port.
 * The s_pin argument is used to specify the starting pin number for the keypad pins on the specified port.
 * This is likely to be used in a keypad driver to configure the keypad pins and read keypad input.
 */
static void keypad_inverse_pin_direction( GPIO_TypeDef * port , int s_pin)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fd80 	bl	80013b4 <reset_io>
	//configure the pins as Intput with pull-down
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R1     0
 80018b4:	6839      	ldr	r1, [r7, #0]
 80018b6:	1c4b      	adds	r3, r1, #1
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	2300      	movs	r3, #0
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2302      	movs	r3, #2
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2200      	movs	r2, #0
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fd89 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R2     1
 80018cc:	6839      	ldr	r1, [r7, #0]
 80018ce:	1c4b      	adds	r3, r1, #1
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	2300      	movs	r3, #0
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2302      	movs	r3, #2
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	2200      	movs	r2, #0
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fd7d 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R3     1
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	1c4b      	adds	r3, r1, #1
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	2302      	movs	r3, #2
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2300      	movs	r3, #0
 80018f4:	2200      	movs	r2, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fd71 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN  , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R4     1
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	1c4b      	adds	r3, r1, #1
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	2300      	movs	r3, #0
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2302      	movs	r3, #2
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	2200      	movs	r2, #0
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fd65 	bl	80013de <gpio_config_pin>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C1     0
 8001914:	6839      	ldr	r1, [r7, #0]
 8001916:	1c4b      	adds	r3, r1, #1
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	2300      	movs	r3, #0
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	2300      	movs	r3, #0
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	2201      	movs	r2, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fd59 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C2     1
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	1c4b      	adds	r3, r1, #1
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	2300      	movs	r3, #0
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	2300      	movs	r3, #0
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2300      	movs	r3, #0
 800193c:	2201      	movs	r2, #1
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fd4d 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C3     0
 8001944:	6839      	ldr	r1, [r7, #0]
 8001946:	1c4b      	adds	r3, r1, #1
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	2300      	movs	r3, #0
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	2300      	movs	r3, #0
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2300      	movs	r3, #0
 8001954:	2201      	movs	r2, #1
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fd41 	bl	80013de <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C4     0
 800195c:	6839      	ldr	r1, [r7, #0]
 800195e:	1c4b      	adds	r3, r1, #1
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	2300      	movs	r3, #0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	2201      	movs	r2, #1
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fd35 	bl	80013de <gpio_config_pin>

}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <keypad_get_pressedkey>:
 * The function then returns the value of the pressed key, or 0 if no key was pressed.
 * Overall, this function uses a combination of bit shifting, bit masking and loops to read the state of the keypad and determine which key is pressed.
 * The function is not very readable and could be improved by adding more comments and breaking it down into smaller functions for better readability and maintainability.
 */
	char keypad_get_pressedkey()
					{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
					    uint16_t porte = 0;   // Set a variable to store the state of the GPIOC pins
 8001982:	2300      	movs	r3, #0
 8001984:	817b      	strh	r3, [r7, #10]
					    porte = GPIOC->IDR ; /* IDR is a register of the GPIOC that contains the input states of the pins.
 8001986:	4b51      	ldr	r3, [pc, #324]	; (8001acc <keypad_get_pressedkey+0x150>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	817b      	strh	r3, [r7, #10]
					                            * We can read the whole pin status of the GPIOC port with the IDR register.
					                            */
					    uint8_t  eidr  = 0;  // Set a variable to store the state of the 8 keypad pins
 800198c:	2300      	movs	r3, #0
 800198e:	727b      	strb	r3, [r7, #9]
					    uint8_t  ch    = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	723b      	strb	r3, [r7, #8]
					    char ret = 0 ;
 8001994:	2300      	movs	r3, #0
 8001996:	75fb      	strb	r3, [r7, #23]

					    // Check the current state of the keypad
					    switch(state)
 8001998:	4b4d      	ldr	r3, [pc, #308]	; (8001ad0 <keypad_get_pressedkey+0x154>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b02      	cmp	r3, #2
 800199e:	f000 8087 	beq.w	8001ab0 <keypad_get_pressedkey+0x134>
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	f300 8088 	bgt.w	8001ab8 <keypad_get_pressedkey+0x13c>
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <keypad_get_pressedkey+0x36>
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d072      	beq.n	8001a96 <keypad_get_pressedkey+0x11a>

				state = State_free ;
				break ;
			}
		default :
			break ;
 80019b0:	e082      	b.n	8001ab8 <keypad_get_pressedkey+0x13c>
					                eidr = (porte >> start_pin) ; // Get the state of the keypad pins
 80019b2:	897a      	ldrh	r2, [r7, #10]
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <keypad_get_pressedkey+0x158>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	fa42 f303 	asr.w	r3, r2, r3
 80019bc:	727b      	strb	r3, [r7, #9]
					                if(eidr != DEFAULT_KEYPAD_PORT_INP) // If the value is different than the default input state
 80019be:	7a7b      	ldrb	r3, [r7, #9]
 80019c0:	2bf0      	cmp	r3, #240	; 0xf0
 80019c2:	d07b      	beq.n	8001abc <keypad_get_pressedkey+0x140>
					                    ch = ~eidr; // Set the inverse of eidr in ch
 80019c4:	7a7b      	ldrb	r3, [r7, #9]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	723b      	strb	r3, [r7, #8]
					                    ch = ch & DEFAULT_KEYPAD_PORT_INP; // Get the row of the pressed key
 80019ca:	7a3b      	ldrb	r3, [r7, #8]
 80019cc:	f023 030f 	bic.w	r3, r3, #15
 80019d0:	723b      	strb	r3, [r7, #8]
					                    keypad_inverse_pin_direction(keypad_port ,start_pin ) ;
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <keypad_get_pressedkey+0x15c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a3f      	ldr	r2, [pc, #252]	; (8001ad4 <keypad_get_pressedkey+0x158>)
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff61 	bl	80018a4 <keypad_inverse_pin_direction>
					uint16_t out = (ch << start_pin) ;  //
 80019e2:	7a3a      	ldrb	r2, [r7, #8]
 80019e4:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <keypad_get_pressedkey+0x158>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	80fb      	strh	r3, [r7, #6]
					keypad_port->ODR = out ;
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <keypad_get_pressedkey+0x15c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	88fa      	ldrh	r2, [r7, #6]
 80019f4:	615a      	str	r2, [r3, #20]
					delay_ms(1) ;
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff f84e 	bl	8000a98 <delay_ms>
					porte = keypad_port->IDR ;//get the state of input port
 80019fc:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <keypad_get_pressedkey+0x15c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	817b      	strh	r3, [r7, #10]
					eidr = (porte >> start_pin) ;//& 0xff ; //get the state of keypad pins
 8001a04:	897a      	ldrh	r2, [r7, #10]
 8001a06:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <keypad_get_pressedkey+0x158>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa42 f303 	asr.w	r3, r2, r3
 8001a0e:	727b      	strb	r3, [r7, #9]
					int col = 0 ;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
					for(col = 0 ; col <4 ; col++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	e00d      	b.n	8001a36 <keypad_get_pressedkey+0xba>
						if(   (((eidr & 0xf0) >> 4) &  (1<<col)) != 0 )
 8001a1a:	7a7b      	ldrb	r3, [r7, #9]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fa42 f303 	asr.w	r3, r2, r3
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d106      	bne.n	8001a3e <keypad_get_pressedkey+0xc2>
					for(col = 0 ; col <4 ; col++)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3301      	adds	r3, #1
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	ddee      	ble.n	8001a1a <keypad_get_pressedkey+0x9e>
 8001a3c:	e000      	b.n	8001a40 <keypad_get_pressedkey+0xc4>
							break ;
 8001a3e:	bf00      	nop
					int row = 0 ;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
					for(row = 0 ; row <4 ; row++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e00c      	b.n	8001a64 <keypad_get_pressedkey+0xe8>
						if( ((eidr & 0x0f) & (1<<row)) != 0)
 8001a4a:	7a7b      	ldrb	r3, [r7, #9]
 8001a4c:	f003 020f 	and.w	r2, r3, #15
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	fa42 f303 	asr.w	r3, r2, r3
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <keypad_get_pressedkey+0xf0>
					for(row = 0 ; row <4 ; row++)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3301      	adds	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	ddef      	ble.n	8001a4a <keypad_get_pressedkey+0xce>
 8001a6a:	e000      	b.n	8001a6e <keypad_get_pressedkey+0xf2>
							break ;
 8001a6c:	bf00      	nop
					ret = keys[row][col] ;
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <keypad_get_pressedkey+0x160>)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	441a      	add	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	75fb      	strb	r3, [r7, #23]
					keypad_config_key_direction(keypad_port ,start_pin ) ;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <keypad_get_pressedkey+0x15c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <keypad_get_pressedkey+0x158>)
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fe9f 	bl	80017cc <keypad_config_key_direction>
					state = State_key_pressed ;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <keypad_get_pressedkey+0x154>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
				break ;
 8001a94:	e012      	b.n	8001abc <keypad_get_pressedkey+0x140>
				eidr = (porte >> start_pin) & 0xff ;
 8001a96:	897a      	ldrh	r2, [r7, #10]
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <keypad_get_pressedkey+0x158>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa42 f303 	asr.w	r3, r2, r3
 8001aa0:	727b      	strb	r3, [r7, #9]
				if(eidr == DEFAULT_KEYPAD_PORT_INP)
 8001aa2:	7a7b      	ldrb	r3, [r7, #9]
 8001aa4:	2bf0      	cmp	r3, #240	; 0xf0
 8001aa6:	d10b      	bne.n	8001ac0 <keypad_get_pressedkey+0x144>
					state = State_key_released ;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <keypad_get_pressedkey+0x154>)
 8001aaa:	2202      	movs	r2, #2
 8001aac:	701a      	strb	r2, [r3, #0]
				break ;
 8001aae:	e007      	b.n	8001ac0 <keypad_get_pressedkey+0x144>
				state = State_free ;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <keypad_get_pressedkey+0x154>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
				break ;
 8001ab6:	e004      	b.n	8001ac2 <keypad_get_pressedkey+0x146>
			break ;
 8001ab8:	bf00      	nop
 8001aba:	e002      	b.n	8001ac2 <keypad_get_pressedkey+0x146>
				break ;
 8001abc:	bf00      	nop
 8001abe:	e000      	b.n	8001ac2 <keypad_get_pressedkey+0x146>
				break ;
 8001ac0:	bf00      	nop

	}


	return ret ;
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	48000800 	.word	0x48000800
 8001ad0:	20000d34 	.word	0x20000d34
 8001ad4:	20000d30 	.word	0x20000d30
 8001ad8:	20000d2c 	.word	0x20000d2c
 8001adc:	20000064 	.word	0x20000064

08001ae0 <rtc_write_reg>:
 * - The register to write the data to (a uint8_t)
 * - The data to be written (a uint8_t)
 * - the lenght of the data to be written (an int)
 */
static void rtc_write_reg(uint8_t address ,uint8_t reg , uint8_t  data , int len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
 8001aec:	460b      	mov	r3, r1
 8001aee:	71bb      	strb	r3, [r7, #6]
 8001af0:	4613      	mov	r3, r2
 8001af2:	717b      	strb	r3, [r7, #5]
    // Declare a temporary array of 2 elements
    uint8_t tmp[2] ;

    // Assign the value of the register to the first element of the temporary array
    tmp[0]  = reg ;
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	733b      	strb	r3, [r7, #12]
    // Assign the value of the data to the second element of the temporary array
    tmp[1]  = data ;
 8001af8:	797b      	ldrb	r3, [r7, #5]
 8001afa:	737b      	strb	r3, [r7, #13]

    // Call the I2C_Write function to send the data in the temporary array to the RTC device at the specified address on the I2C bus.
    I2C_Write(rtc_i2c , address , tmp ,2 ) ;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <rtc_write_reg+0x34>)
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	f107 020c 	add.w	r2, r7, #12
 8001b04:	79f9      	ldrb	r1, [r7, #7]
 8001b06:	2302      	movs	r3, #2
 8001b08:	f7ff fdb2 	bl	8001670 <I2C_Write>
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000d38 	.word	0x20000d38

08001b18 <rtc_init>:
 * This allows the other functions of the RTC driver to use the same I2C peripheral without having to pass it as a parameter every time.
 * It assigns the passed I2C peripheral to a global variable so that the same peripheral can be used by other functions
 *  without having to pass it as a parameter every time.
 */
void rtc_init(I2C_TypeDef * dev)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    // Assign the passed I2C peripheral to a global variable
    rtc_i2c = dev ;
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <rtc_init+0x18>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000d38 	.word	0x20000d38

08001b34 <rtc_get_reg>:
 * This function retrieves the value of a specified register from the RTC (Real-time clock) device.
 * The function takes in one parameter:
 * - The address of the register (uint8_t)
 */
uint8_t rtc_get_reg(uint8_t reg)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
    // Declare a variable to hold the value of the register
    uint8_t val ;

    // Send the register address to the RTC device
    I2C_Write(rtc_i2c , RTC_I2C_ADDR , &reg  , 1) ;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <rtc_get_reg+0x38>)
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	1dfa      	adds	r2, r7, #7
 8001b44:	2301      	movs	r3, #1
 8001b46:	2168      	movs	r1, #104	; 0x68
 8001b48:	f7ff fd92 	bl	8001670 <I2C_Write>

    // Wait for 2ms
    delay_ms(2);
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7fe ffa3 	bl	8000a98 <delay_ms>

    // Read the value of the register from the RTC device
    I2C_Read(rtc_i2c  , RTC_I2C_ADDR , &val , 1) ;
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <rtc_get_reg+0x38>)
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	f107 020f 	add.w	r2, r7, #15
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	2168      	movs	r1, #104	; 0x68
 8001b5e:	f7ff fdd0 	bl	8001702 <I2C_Read>

    // Return the value of the register
    return val ;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000d38 	.word	0x20000d38

08001b70 <rtc_get_time>:
 * If it is in 12 hour mode, it also checks the AM/PM bit using the RTC_AM_PM_BIT_MASK and stores the value in the "am_pm" field of the struct.
 * After all values are stored, the function returns the struct.
*/

void rtc_get_time(rtc_time_t * rtc_time )
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	uint8_t tmp = rtc_get_reg(RTC_REG_SECOND) ;
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff ffdb 	bl	8001b34 <rtc_get_reg>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
	tm = tmp ;
 8001b82:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <rtc_get_time+0xf4>)
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	7013      	strb	r3, [r2, #0]
	//BCD --> DEC
	rtc_time->sec  = ((tmp >> 4) & 0x0f) * 10 + (tmp & 0x0f) ;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	091b      	lsrs	r3, r3, #4
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	0092      	lsls	r2, r2, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	701a      	strb	r2, [r3, #0]

	tmp = rtc_get_reg(RTC_REG_MINUTE) ;
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff ffc3 	bl	8001b34 <rtc_get_reg>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	73fb      	strb	r3, [r7, #15]
	//BCD --> DEC
	rtc_time->min  = ((tmp >> 4) & 0x0f) * 10 + (tmp & 0x0f) ;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	705a      	strb	r2, [r3, #1]

	tmp = rtc_get_reg(RTC_REG_HOUR) ;
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f7ff ffae 	bl	8001b34 <rtc_get_reg>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]


	if( (tmp & RTC_BIT_MODE_MASK) != 0)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d022      	beq.n	8001c2c <rtc_get_time+0xbc>
	{
		//12 hour mode
		rtc_time->mode = H_12 ;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	70da      	strb	r2, [r3, #3]
		if((tmp & RTC_AM_PM_BIT_MASK) != 0)
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	f003 0320 	and.w	r3, r3, #32
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <rtc_get_time+0x8e>
		{
			rtc_time->am_pm = PM ;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	711a      	strb	r2, [r3, #4]
 8001bfc:	e002      	b.n	8001c04 <rtc_get_time+0x94>
		}
		else{
			rtc_time->am_pm = AM ;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	711a      	strb	r2, [r3, #4]
		}

		rtc_time->hr = ((tmp & 0x1f) >> 4) * 10 + (tmp & 0x0f) ;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	111b      	asrs	r3, r3, #4
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	709a      	strb	r2, [r3, #2]
		rtc_time->mode = H_24 ;
		tmp = RTC_24H_MASK & tmp ;
		rtc_time->hr = (tmp >> 4) * 10 + (tmp & 0x0f) ;
	}

}
 8001c2a:	e016      	b.n	8001c5a <rtc_get_time+0xea>
		rtc_time->mode = H_24 ;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	70da      	strb	r2, [r3, #3]
		tmp = RTC_24H_MASK & tmp ;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c38:	73fb      	strb	r3, [r7, #15]
		rtc_time->hr = (tmp >> 4) * 10 + (tmp & 0x0f) ;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	709a      	strb	r2, [r3, #2]
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000d3c 	.word	0x20000d3c

08001c68 <rtc_get_date>:
 * The function then reads the month register from the RTC device and clears the century bit by ANDing it with 0x7f.
 * It then extracts the tens and ones digits of the month from the BCD value in the same way as the day.
 * Finally, the function reads the year register from the RTC device and extracts the tens and ones digits of the year from the BCD value using bitwise operations.
 */
void rtc_get_date(rtc_date_t * date)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
    // Read the date register from the RTC device
    uint8_t tmp = rtc_get_reg(RTC_REG_DATE) ;
 8001c70:	2004      	movs	r0, #4
 8001c72:	f7ff ff5f 	bl	8001b34 <rtc_get_reg>
 8001c76:	4603      	mov	r3, r0
 8001c78:	73fb      	strb	r3, [r7, #15]

    // Extract the tens and ones digits from the BCD value
    date->day = (tmp >> 4)*10 + (tmp & 0x0f) ;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	701a      	strb	r2, [r3, #0]

    // Read the month register from the RTC device
    tmp = rtc_get_reg(RTC_REG_MONTH) ;
 8001c9a:	2005      	movs	r0, #5
 8001c9c:	f7ff ff4a 	bl	8001b34 <rtc_get_reg>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73fb      	strb	r3, [r7, #15]

    // Clear the century bit
    tmp &= 0x7f ;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001caa:	73fb      	strb	r3, [r7, #15]

    // Extract the tens and ones digits from the BCD value
    date->month = (tmp >> 4) *10 +(tmp & 0x0f) ;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	705a      	strb	r2, [r3, #1]

    // Read the year register from the RTC device
    tmp = rtc_get_reg(RTC_REG_YEAR) ;
 8001ccc:	2006      	movs	r0, #6
 8001cce:	f7ff ff31 	bl	8001b34 <rtc_get_reg>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	73fb      	strb	r3, [r7, #15]

    // Extract the tens and ones digits from the BCD value
    date->year = (tmp >> 4) *10 +(tmp & 0x0f) ;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	709a      	strb	r2, [r3, #2]
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <rtc_set_alarm>:
 * The function then clears the alarm flag by ANDing the status register with 0xfe, and enables the alarm by setting the AE1 bit in the control register.
*/


void rtc_set_alarm(rtc_time_t * alarm)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
// Convert the alarm time to BCD format
uint8_t tmp = GET_BCD_HIGH(alarm->sec) | GET_BCD_LOW(alarm->sec);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4a44      	ldr	r2, [pc, #272]	; (8001e20 <rtc_set_alarm+0x120>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	b258      	sxtb	r0, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <rtc_set_alarm+0x120>)
 8001d20:	fba3 1302 	umull	r1, r3, r3, r2
 8001d24:	08d9      	lsrs	r1, r3, #3
 8001d26:	460b      	mov	r3, r1
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	b25b      	sxtb	r3, r3
 8001d34:	4303      	orrs	r3, r0
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	73fb      	strb	r3, [r7, #15]

// Write the BCD-formatted alarm time to the seconds register
rtc_write_reg( RTC_I2C_ADDR , RTC_A1_SECOND ,tmp , 1) ;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	2107      	movs	r1, #7
 8001d40:	2068      	movs	r0, #104	; 0x68
 8001d42:	f7ff fecd 	bl	8001ae0 <rtc_write_reg>

	tmp = GET_BCD_HIGH(alarm->min)  | GET_BCD_LOW(alarm->min)   ;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	785b      	ldrb	r3, [r3, #1]
 8001d4a:	4a35      	ldr	r2, [pc, #212]	; (8001e20 <rtc_set_alarm+0x120>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	b258      	sxtb	r0, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	785a      	ldrb	r2, [r3, #1]
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <rtc_set_alarm+0x120>)
 8001d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d62:	08d9      	lsrs	r1, r3, #3
 8001d64:	460b      	mov	r3, r1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	4303      	orrs	r3, r0
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	73fb      	strb	r3, [r7, #15]

	rtc_write_reg( RTC_I2C_ADDR , RTC_A1_MINUTE ,tmp , 1) ;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	2108      	movs	r1, #8
 8001d7e:	2068      	movs	r0, #104	; 0x68
 8001d80:	f7ff feae 	bl	8001ae0 <rtc_write_reg>

	tmp = GET_BCD_HIGH(alarm->hr)  | GET_BCD_LOW(alarm->hr)     ;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	789b      	ldrb	r3, [r3, #2]
 8001d88:	4a25      	ldr	r2, [pc, #148]	; (8001e20 <rtc_set_alarm+0x120>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	b258      	sxtb	r0, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	789a      	ldrb	r2, [r3, #2]
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <rtc_set_alarm+0x120>)
 8001d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001da0:	08d9      	lsrs	r1, r3, #3
 8001da2:	460b      	mov	r3, r1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	4303      	orrs	r3, r0
 8001db2:	b25b      	sxtb	r3, r3
 8001db4:	73fb      	strb	r3, [r7, #15]

	rtc_write_reg( RTC_I2C_ADDR , RTC_A1_HOUR ,tmp , 1) ;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	2301      	movs	r3, #1
 8001dba:	2109      	movs	r1, #9
 8001dbc:	2068      	movs	r0, #104	; 0x68
 8001dbe:	f7ff fe8f 	bl	8001ae0 <rtc_write_reg>

	//set alarm when sec ,mi, and hour matchs

	tmp = rtc_get_reg(RTC_A1_DATE) ;
 8001dc2:	200a      	movs	r0, #10
 8001dc4:	f7ff feb6 	bl	8001b34 <rtc_get_reg>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	73fb      	strb	r3, [r7, #15]

	//set A1M4 bit to one
	tmp |= 0x80 ;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dd2:	73fb      	strb	r3, [r7, #15]

	rtc_write_reg( RTC_I2C_ADDR , RTC_A1_DATE ,tmp , 1) ;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	210a      	movs	r1, #10
 8001dda:	2068      	movs	r0, #104	; 0x68
 8001ddc:	f7ff fe80 	bl	8001ae0 <rtc_write_reg>

	//clear alarm flag
	tmp  = rtc_get_reg(RTC_STATUS_REG) & 0xfe; // set A1F to 0
 8001de0:	200f      	movs	r0, #15
 8001de2:	f7ff fea7 	bl	8001b34 <rtc_get_reg>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]

	rtc_write_reg( RTC_I2C_ADDR , RTC_STATUS_REG ,tmp , 1) ;
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	2301      	movs	r3, #1
 8001df2:	210f      	movs	r1, #15
 8001df4:	2068      	movs	r0, #104	; 0x68
 8001df6:	f7ff fe73 	bl	8001ae0 <rtc_write_reg>

	//enable rtc alarm
	tmp = rtc_get_reg(RTC_CONTROL_REG) ;
 8001dfa:	200e      	movs	r0, #14
 8001dfc:	f7ff fe9a 	bl	8001b34 <rtc_get_reg>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]

	//set AE1 in control reg
	tmp |= 0x01;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]

	rtc_write_reg( RTC_I2C_ADDR , RTC_CONTROL_REG ,tmp , 1) ;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	2301      	movs	r3, #1
 8001e10:	210e      	movs	r1, #14
 8001e12:	2068      	movs	r0, #104	; 0x68
 8001e14:	f7ff fe64 	bl	8001ae0 <rtc_write_reg>

}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	cccccccd 	.word	0xcccccccd

08001e24 <rtc_is_alarm_set>:
 * Then it checks if the A1F bit is set in the status register by ANDing it with the RTC_STATUS_AF1_MASK.
 * If the A1F bit is set, it returns true, indicating that the alarm is set.
 * Otherwise, it returns false, indicating that the alarm is not set.
*/
bool rtc_is_alarm_set( )
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
bool ret = false ;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	71fb      	strb	r3, [r7, #7]
// Check if A1F in status register is set
if( (rtc_get_reg(RTC_STATUS_REG) & RTC_STATUS_AF1_MASK ) != 0 )
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f7ff fe80 	bl	8001b34 <rtc_get_reg>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <rtc_is_alarm_set+0x20>
{
ret = true ;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	71fb      	strb	r3, [r7, #7]
 8001e42:	e001      	b.n	8001e48 <rtc_is_alarm_set+0x24>
}
else{
ret = false ;
 8001e44:	2300      	movs	r3, #0
 8001e46:	71fb      	strb	r3, [r7, #7]
}
return ret ;
 8001e48:	79fb      	ldrb	r3, [r7, #7]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <rtc_set_alarm_callback>:
 * so that it can be called later when the alarm goes off.
 */
callback_t 	alarm1_callback  ;

void rtc_set_alarm_callback(callback_t  callback)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	alarm1_callback = callback ;
 8001e5c:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <rtc_set_alarm_callback+0x18>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	20000d40 	.word	0x20000d40

08001e70 <rtc_update>:
 * it calls the callback function that was previously set using rtc_set_alarm_callback().
 * If the alarm is not set, the function does nothing.
 * This function should be called periodically in the main loop of the program to check for the alarm status and respond accordingly.
 */
void rtc_update(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	if(rtc_is_alarm_set( ) == true)
 8001e74:	f7ff ffd6 	bl	8001e24 <rtc_is_alarm_set>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <rtc_update+0x14>
	{
		alarm1_callback() ;
 8001e7e:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <rtc_update+0x18>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4798      	blx	r3
	}
	else
	{

	}
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000d40 	.word	0x20000d40

08001e8c <__libc_init_array>:
 8001e8c:	b570      	push	{r4, r5, r6, lr}
 8001e8e:	4d0d      	ldr	r5, [pc, #52]	; (8001ec4 <__libc_init_array+0x38>)
 8001e90:	4c0d      	ldr	r4, [pc, #52]	; (8001ec8 <__libc_init_array+0x3c>)
 8001e92:	1b64      	subs	r4, r4, r5
 8001e94:	10a4      	asrs	r4, r4, #2
 8001e96:	2600      	movs	r6, #0
 8001e98:	42a6      	cmp	r6, r4
 8001e9a:	d109      	bne.n	8001eb0 <__libc_init_array+0x24>
 8001e9c:	4d0b      	ldr	r5, [pc, #44]	; (8001ecc <__libc_init_array+0x40>)
 8001e9e:	4c0c      	ldr	r4, [pc, #48]	; (8001ed0 <__libc_init_array+0x44>)
 8001ea0:	f000 fc9a 	bl	80027d8 <_init>
 8001ea4:	1b64      	subs	r4, r4, r5
 8001ea6:	10a4      	asrs	r4, r4, #2
 8001ea8:	2600      	movs	r6, #0
 8001eaa:	42a6      	cmp	r6, r4
 8001eac:	d105      	bne.n	8001eba <__libc_init_array+0x2e>
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
 8001eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb4:	4798      	blx	r3
 8001eb6:	3601      	adds	r6, #1
 8001eb8:	e7ee      	b.n	8001e98 <__libc_init_array+0xc>
 8001eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ebe:	4798      	blx	r3
 8001ec0:	3601      	adds	r6, #1
 8001ec2:	e7f2      	b.n	8001eaa <__libc_init_array+0x1e>
 8001ec4:	080041c0 	.word	0x080041c0
 8001ec8:	080041c0 	.word	0x080041c0
 8001ecc:	080041c0 	.word	0x080041c0
 8001ed0:	080041c4 	.word	0x080041c4

08001ed4 <memset>:
 8001ed4:	4402      	add	r2, r0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d100      	bne.n	8001ede <memset+0xa>
 8001edc:	4770      	bx	lr
 8001ede:	f803 1b01 	strb.w	r1, [r3], #1
 8001ee2:	e7f9      	b.n	8001ed8 <memset+0x4>

08001ee4 <siprintf>:
 8001ee4:	b40e      	push	{r1, r2, r3}
 8001ee6:	b500      	push	{lr}
 8001ee8:	b09c      	sub	sp, #112	; 0x70
 8001eea:	ab1d      	add	r3, sp, #116	; 0x74
 8001eec:	9002      	str	r0, [sp, #8]
 8001eee:	9006      	str	r0, [sp, #24]
 8001ef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <siprintf+0x38>)
 8001ef6:	9107      	str	r1, [sp, #28]
 8001ef8:	9104      	str	r1, [sp, #16]
 8001efa:	4909      	ldr	r1, [pc, #36]	; (8001f20 <siprintf+0x3c>)
 8001efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f00:	9105      	str	r1, [sp, #20]
 8001f02:	6800      	ldr	r0, [r0, #0]
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	a902      	add	r1, sp, #8
 8001f08:	f000 f868 	bl	8001fdc <_svfiprintf_r>
 8001f0c:	9b02      	ldr	r3, [sp, #8]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	b01c      	add	sp, #112	; 0x70
 8001f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f18:	b003      	add	sp, #12
 8001f1a:	4770      	bx	lr
 8001f1c:	20000074 	.word	0x20000074
 8001f20:	ffff0208 	.word	0xffff0208

08001f24 <__ssputs_r>:
 8001f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f28:	688e      	ldr	r6, [r1, #8]
 8001f2a:	429e      	cmp	r6, r3
 8001f2c:	4682      	mov	sl, r0
 8001f2e:	460c      	mov	r4, r1
 8001f30:	4690      	mov	r8, r2
 8001f32:	461f      	mov	r7, r3
 8001f34:	d838      	bhi.n	8001fa8 <__ssputs_r+0x84>
 8001f36:	898a      	ldrh	r2, [r1, #12]
 8001f38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f3c:	d032      	beq.n	8001fa4 <__ssputs_r+0x80>
 8001f3e:	6825      	ldr	r5, [r4, #0]
 8001f40:	6909      	ldr	r1, [r1, #16]
 8001f42:	eba5 0901 	sub.w	r9, r5, r1
 8001f46:	6965      	ldr	r5, [r4, #20]
 8001f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f50:	3301      	adds	r3, #1
 8001f52:	444b      	add	r3, r9
 8001f54:	106d      	asrs	r5, r5, #1
 8001f56:	429d      	cmp	r5, r3
 8001f58:	bf38      	it	cc
 8001f5a:	461d      	movcc	r5, r3
 8001f5c:	0553      	lsls	r3, r2, #21
 8001f5e:	d531      	bpl.n	8001fc4 <__ssputs_r+0xa0>
 8001f60:	4629      	mov	r1, r5
 8001f62:	f000 fb61 	bl	8002628 <_malloc_r>
 8001f66:	4606      	mov	r6, r0
 8001f68:	b950      	cbnz	r0, 8001f80 <__ssputs_r+0x5c>
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	f8ca 3000 	str.w	r3, [sl]
 8001f70:	89a3      	ldrh	r3, [r4, #12]
 8001f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f76:	81a3      	strh	r3, [r4, #12]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f80:	6921      	ldr	r1, [r4, #16]
 8001f82:	464a      	mov	r2, r9
 8001f84:	f000 fabe 	bl	8002504 <memcpy>
 8001f88:	89a3      	ldrh	r3, [r4, #12]
 8001f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f92:	81a3      	strh	r3, [r4, #12]
 8001f94:	6126      	str	r6, [r4, #16]
 8001f96:	6165      	str	r5, [r4, #20]
 8001f98:	444e      	add	r6, r9
 8001f9a:	eba5 0509 	sub.w	r5, r5, r9
 8001f9e:	6026      	str	r6, [r4, #0]
 8001fa0:	60a5      	str	r5, [r4, #8]
 8001fa2:	463e      	mov	r6, r7
 8001fa4:	42be      	cmp	r6, r7
 8001fa6:	d900      	bls.n	8001faa <__ssputs_r+0x86>
 8001fa8:	463e      	mov	r6, r7
 8001faa:	6820      	ldr	r0, [r4, #0]
 8001fac:	4632      	mov	r2, r6
 8001fae:	4641      	mov	r1, r8
 8001fb0:	f000 fab6 	bl	8002520 <memmove>
 8001fb4:	68a3      	ldr	r3, [r4, #8]
 8001fb6:	1b9b      	subs	r3, r3, r6
 8001fb8:	60a3      	str	r3, [r4, #8]
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	4433      	add	r3, r6
 8001fbe:	6023      	str	r3, [r4, #0]
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	e7db      	b.n	8001f7c <__ssputs_r+0x58>
 8001fc4:	462a      	mov	r2, r5
 8001fc6:	f000 fba3 	bl	8002710 <_realloc_r>
 8001fca:	4606      	mov	r6, r0
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d1e1      	bne.n	8001f94 <__ssputs_r+0x70>
 8001fd0:	6921      	ldr	r1, [r4, #16]
 8001fd2:	4650      	mov	r0, sl
 8001fd4:	f000 fabe 	bl	8002554 <_free_r>
 8001fd8:	e7c7      	b.n	8001f6a <__ssputs_r+0x46>
	...

08001fdc <_svfiprintf_r>:
 8001fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	898b      	ldrh	r3, [r1, #12]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	b09d      	sub	sp, #116	; 0x74
 8001fe8:	4607      	mov	r7, r0
 8001fea:	460d      	mov	r5, r1
 8001fec:	4614      	mov	r4, r2
 8001fee:	d50e      	bpl.n	800200e <_svfiprintf_r+0x32>
 8001ff0:	690b      	ldr	r3, [r1, #16]
 8001ff2:	b963      	cbnz	r3, 800200e <_svfiprintf_r+0x32>
 8001ff4:	2140      	movs	r1, #64	; 0x40
 8001ff6:	f000 fb17 	bl	8002628 <_malloc_r>
 8001ffa:	6028      	str	r0, [r5, #0]
 8001ffc:	6128      	str	r0, [r5, #16]
 8001ffe:	b920      	cbnz	r0, 800200a <_svfiprintf_r+0x2e>
 8002000:	230c      	movs	r3, #12
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	e0d1      	b.n	80021ae <_svfiprintf_r+0x1d2>
 800200a:	2340      	movs	r3, #64	; 0x40
 800200c:	616b      	str	r3, [r5, #20]
 800200e:	2300      	movs	r3, #0
 8002010:	9309      	str	r3, [sp, #36]	; 0x24
 8002012:	2320      	movs	r3, #32
 8002014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002018:	f8cd 800c 	str.w	r8, [sp, #12]
 800201c:	2330      	movs	r3, #48	; 0x30
 800201e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80021c8 <_svfiprintf_r+0x1ec>
 8002022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002026:	f04f 0901 	mov.w	r9, #1
 800202a:	4623      	mov	r3, r4
 800202c:	469a      	mov	sl, r3
 800202e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002032:	b10a      	cbz	r2, 8002038 <_svfiprintf_r+0x5c>
 8002034:	2a25      	cmp	r2, #37	; 0x25
 8002036:	d1f9      	bne.n	800202c <_svfiprintf_r+0x50>
 8002038:	ebba 0b04 	subs.w	fp, sl, r4
 800203c:	d00b      	beq.n	8002056 <_svfiprintf_r+0x7a>
 800203e:	465b      	mov	r3, fp
 8002040:	4622      	mov	r2, r4
 8002042:	4629      	mov	r1, r5
 8002044:	4638      	mov	r0, r7
 8002046:	f7ff ff6d 	bl	8001f24 <__ssputs_r>
 800204a:	3001      	adds	r0, #1
 800204c:	f000 80aa 	beq.w	80021a4 <_svfiprintf_r+0x1c8>
 8002050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002052:	445a      	add	r2, fp
 8002054:	9209      	str	r2, [sp, #36]	; 0x24
 8002056:	f89a 3000 	ldrb.w	r3, [sl]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80a2 	beq.w	80021a4 <_svfiprintf_r+0x1c8>
 8002060:	2300      	movs	r3, #0
 8002062:	f04f 32ff 	mov.w	r2, #4294967295
 8002066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800206a:	f10a 0a01 	add.w	sl, sl, #1
 800206e:	9304      	str	r3, [sp, #16]
 8002070:	9307      	str	r3, [sp, #28]
 8002072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002076:	931a      	str	r3, [sp, #104]	; 0x68
 8002078:	4654      	mov	r4, sl
 800207a:	2205      	movs	r2, #5
 800207c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002080:	4851      	ldr	r0, [pc, #324]	; (80021c8 <_svfiprintf_r+0x1ec>)
 8002082:	f7fe f8ad 	bl	80001e0 <memchr>
 8002086:	9a04      	ldr	r2, [sp, #16]
 8002088:	b9d8      	cbnz	r0, 80020c2 <_svfiprintf_r+0xe6>
 800208a:	06d0      	lsls	r0, r2, #27
 800208c:	bf44      	itt	mi
 800208e:	2320      	movmi	r3, #32
 8002090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002094:	0711      	lsls	r1, r2, #28
 8002096:	bf44      	itt	mi
 8002098:	232b      	movmi	r3, #43	; 0x2b
 800209a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800209e:	f89a 3000 	ldrb.w	r3, [sl]
 80020a2:	2b2a      	cmp	r3, #42	; 0x2a
 80020a4:	d015      	beq.n	80020d2 <_svfiprintf_r+0xf6>
 80020a6:	9a07      	ldr	r2, [sp, #28]
 80020a8:	4654      	mov	r4, sl
 80020aa:	2000      	movs	r0, #0
 80020ac:	f04f 0c0a 	mov.w	ip, #10
 80020b0:	4621      	mov	r1, r4
 80020b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020b6:	3b30      	subs	r3, #48	; 0x30
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	d94e      	bls.n	800215a <_svfiprintf_r+0x17e>
 80020bc:	b1b0      	cbz	r0, 80020ec <_svfiprintf_r+0x110>
 80020be:	9207      	str	r2, [sp, #28]
 80020c0:	e014      	b.n	80020ec <_svfiprintf_r+0x110>
 80020c2:	eba0 0308 	sub.w	r3, r0, r8
 80020c6:	fa09 f303 	lsl.w	r3, r9, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	9304      	str	r3, [sp, #16]
 80020ce:	46a2      	mov	sl, r4
 80020d0:	e7d2      	b.n	8002078 <_svfiprintf_r+0x9c>
 80020d2:	9b03      	ldr	r3, [sp, #12]
 80020d4:	1d19      	adds	r1, r3, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	9103      	str	r1, [sp, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bfbb      	ittet	lt
 80020de:	425b      	neglt	r3, r3
 80020e0:	f042 0202 	orrlt.w	r2, r2, #2
 80020e4:	9307      	strge	r3, [sp, #28]
 80020e6:	9307      	strlt	r3, [sp, #28]
 80020e8:	bfb8      	it	lt
 80020ea:	9204      	strlt	r2, [sp, #16]
 80020ec:	7823      	ldrb	r3, [r4, #0]
 80020ee:	2b2e      	cmp	r3, #46	; 0x2e
 80020f0:	d10c      	bne.n	800210c <_svfiprintf_r+0x130>
 80020f2:	7863      	ldrb	r3, [r4, #1]
 80020f4:	2b2a      	cmp	r3, #42	; 0x2a
 80020f6:	d135      	bne.n	8002164 <_svfiprintf_r+0x188>
 80020f8:	9b03      	ldr	r3, [sp, #12]
 80020fa:	1d1a      	adds	r2, r3, #4
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	9203      	str	r2, [sp, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	bfb8      	it	lt
 8002104:	f04f 33ff 	movlt.w	r3, #4294967295
 8002108:	3402      	adds	r4, #2
 800210a:	9305      	str	r3, [sp, #20]
 800210c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80021cc <_svfiprintf_r+0x1f0>
 8002110:	7821      	ldrb	r1, [r4, #0]
 8002112:	2203      	movs	r2, #3
 8002114:	4650      	mov	r0, sl
 8002116:	f7fe f863 	bl	80001e0 <memchr>
 800211a:	b140      	cbz	r0, 800212e <_svfiprintf_r+0x152>
 800211c:	2340      	movs	r3, #64	; 0x40
 800211e:	eba0 000a 	sub.w	r0, r0, sl
 8002122:	fa03 f000 	lsl.w	r0, r3, r0
 8002126:	9b04      	ldr	r3, [sp, #16]
 8002128:	4303      	orrs	r3, r0
 800212a:	3401      	adds	r4, #1
 800212c:	9304      	str	r3, [sp, #16]
 800212e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002132:	4827      	ldr	r0, [pc, #156]	; (80021d0 <_svfiprintf_r+0x1f4>)
 8002134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002138:	2206      	movs	r2, #6
 800213a:	f7fe f851 	bl	80001e0 <memchr>
 800213e:	2800      	cmp	r0, #0
 8002140:	d038      	beq.n	80021b4 <_svfiprintf_r+0x1d8>
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <_svfiprintf_r+0x1f8>)
 8002144:	bb1b      	cbnz	r3, 800218e <_svfiprintf_r+0x1b2>
 8002146:	9b03      	ldr	r3, [sp, #12]
 8002148:	3307      	adds	r3, #7
 800214a:	f023 0307 	bic.w	r3, r3, #7
 800214e:	3308      	adds	r3, #8
 8002150:	9303      	str	r3, [sp, #12]
 8002152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002154:	4433      	add	r3, r6
 8002156:	9309      	str	r3, [sp, #36]	; 0x24
 8002158:	e767      	b.n	800202a <_svfiprintf_r+0x4e>
 800215a:	fb0c 3202 	mla	r2, ip, r2, r3
 800215e:	460c      	mov	r4, r1
 8002160:	2001      	movs	r0, #1
 8002162:	e7a5      	b.n	80020b0 <_svfiprintf_r+0xd4>
 8002164:	2300      	movs	r3, #0
 8002166:	3401      	adds	r4, #1
 8002168:	9305      	str	r3, [sp, #20]
 800216a:	4619      	mov	r1, r3
 800216c:	f04f 0c0a 	mov.w	ip, #10
 8002170:	4620      	mov	r0, r4
 8002172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002176:	3a30      	subs	r2, #48	; 0x30
 8002178:	2a09      	cmp	r2, #9
 800217a:	d903      	bls.n	8002184 <_svfiprintf_r+0x1a8>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0c5      	beq.n	800210c <_svfiprintf_r+0x130>
 8002180:	9105      	str	r1, [sp, #20]
 8002182:	e7c3      	b.n	800210c <_svfiprintf_r+0x130>
 8002184:	fb0c 2101 	mla	r1, ip, r1, r2
 8002188:	4604      	mov	r4, r0
 800218a:	2301      	movs	r3, #1
 800218c:	e7f0      	b.n	8002170 <_svfiprintf_r+0x194>
 800218e:	ab03      	add	r3, sp, #12
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	462a      	mov	r2, r5
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <_svfiprintf_r+0x1fc>)
 8002196:	a904      	add	r1, sp, #16
 8002198:	4638      	mov	r0, r7
 800219a:	f3af 8000 	nop.w
 800219e:	1c42      	adds	r2, r0, #1
 80021a0:	4606      	mov	r6, r0
 80021a2:	d1d6      	bne.n	8002152 <_svfiprintf_r+0x176>
 80021a4:	89ab      	ldrh	r3, [r5, #12]
 80021a6:	065b      	lsls	r3, r3, #25
 80021a8:	f53f af2c 	bmi.w	8002004 <_svfiprintf_r+0x28>
 80021ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021ae:	b01d      	add	sp, #116	; 0x74
 80021b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021b4:	ab03      	add	r3, sp, #12
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	462a      	mov	r2, r5
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_svfiprintf_r+0x1fc>)
 80021bc:	a904      	add	r1, sp, #16
 80021be:	4638      	mov	r0, r7
 80021c0:	f000 f87a 	bl	80022b8 <_printf_i>
 80021c4:	e7eb      	b.n	800219e <_svfiprintf_r+0x1c2>
 80021c6:	bf00      	nop
 80021c8:	0800418c 	.word	0x0800418c
 80021cc:	08004192 	.word	0x08004192
 80021d0:	08004196 	.word	0x08004196
 80021d4:	00000000 	.word	0x00000000
 80021d8:	08001f25 	.word	0x08001f25

080021dc <_printf_common>:
 80021dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e0:	4616      	mov	r6, r2
 80021e2:	4699      	mov	r9, r3
 80021e4:	688a      	ldr	r2, [r1, #8]
 80021e6:	690b      	ldr	r3, [r1, #16]
 80021e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021ec:	4293      	cmp	r3, r2
 80021ee:	bfb8      	it	lt
 80021f0:	4613      	movlt	r3, r2
 80021f2:	6033      	str	r3, [r6, #0]
 80021f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021f8:	4607      	mov	r7, r0
 80021fa:	460c      	mov	r4, r1
 80021fc:	b10a      	cbz	r2, 8002202 <_printf_common+0x26>
 80021fe:	3301      	adds	r3, #1
 8002200:	6033      	str	r3, [r6, #0]
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	0699      	lsls	r1, r3, #26
 8002206:	bf42      	ittt	mi
 8002208:	6833      	ldrmi	r3, [r6, #0]
 800220a:	3302      	addmi	r3, #2
 800220c:	6033      	strmi	r3, [r6, #0]
 800220e:	6825      	ldr	r5, [r4, #0]
 8002210:	f015 0506 	ands.w	r5, r5, #6
 8002214:	d106      	bne.n	8002224 <_printf_common+0x48>
 8002216:	f104 0a19 	add.w	sl, r4, #25
 800221a:	68e3      	ldr	r3, [r4, #12]
 800221c:	6832      	ldr	r2, [r6, #0]
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	42ab      	cmp	r3, r5
 8002222:	dc26      	bgt.n	8002272 <_printf_common+0x96>
 8002224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002228:	1e13      	subs	r3, r2, #0
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	bf18      	it	ne
 800222e:	2301      	movne	r3, #1
 8002230:	0692      	lsls	r2, r2, #26
 8002232:	d42b      	bmi.n	800228c <_printf_common+0xb0>
 8002234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002238:	4649      	mov	r1, r9
 800223a:	4638      	mov	r0, r7
 800223c:	47c0      	blx	r8
 800223e:	3001      	adds	r0, #1
 8002240:	d01e      	beq.n	8002280 <_printf_common+0xa4>
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	68e5      	ldr	r5, [r4, #12]
 8002246:	6832      	ldr	r2, [r6, #0]
 8002248:	f003 0306 	and.w	r3, r3, #6
 800224c:	2b04      	cmp	r3, #4
 800224e:	bf08      	it	eq
 8002250:	1aad      	subeq	r5, r5, r2
 8002252:	68a3      	ldr	r3, [r4, #8]
 8002254:	6922      	ldr	r2, [r4, #16]
 8002256:	bf0c      	ite	eq
 8002258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800225c:	2500      	movne	r5, #0
 800225e:	4293      	cmp	r3, r2
 8002260:	bfc4      	itt	gt
 8002262:	1a9b      	subgt	r3, r3, r2
 8002264:	18ed      	addgt	r5, r5, r3
 8002266:	2600      	movs	r6, #0
 8002268:	341a      	adds	r4, #26
 800226a:	42b5      	cmp	r5, r6
 800226c:	d11a      	bne.n	80022a4 <_printf_common+0xc8>
 800226e:	2000      	movs	r0, #0
 8002270:	e008      	b.n	8002284 <_printf_common+0xa8>
 8002272:	2301      	movs	r3, #1
 8002274:	4652      	mov	r2, sl
 8002276:	4649      	mov	r1, r9
 8002278:	4638      	mov	r0, r7
 800227a:	47c0      	blx	r8
 800227c:	3001      	adds	r0, #1
 800227e:	d103      	bne.n	8002288 <_printf_common+0xac>
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002288:	3501      	adds	r5, #1
 800228a:	e7c6      	b.n	800221a <_printf_common+0x3e>
 800228c:	18e1      	adds	r1, r4, r3
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	2030      	movs	r0, #48	; 0x30
 8002292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002296:	4422      	add	r2, r4
 8002298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800229c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022a0:	3302      	adds	r3, #2
 80022a2:	e7c7      	b.n	8002234 <_printf_common+0x58>
 80022a4:	2301      	movs	r3, #1
 80022a6:	4622      	mov	r2, r4
 80022a8:	4649      	mov	r1, r9
 80022aa:	4638      	mov	r0, r7
 80022ac:	47c0      	blx	r8
 80022ae:	3001      	adds	r0, #1
 80022b0:	d0e6      	beq.n	8002280 <_printf_common+0xa4>
 80022b2:	3601      	adds	r6, #1
 80022b4:	e7d9      	b.n	800226a <_printf_common+0x8e>
	...

080022b8 <_printf_i>:
 80022b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022bc:	7e0f      	ldrb	r7, [r1, #24]
 80022be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022c0:	2f78      	cmp	r7, #120	; 0x78
 80022c2:	4691      	mov	r9, r2
 80022c4:	4680      	mov	r8, r0
 80022c6:	460c      	mov	r4, r1
 80022c8:	469a      	mov	sl, r3
 80022ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022ce:	d807      	bhi.n	80022e0 <_printf_i+0x28>
 80022d0:	2f62      	cmp	r7, #98	; 0x62
 80022d2:	d80a      	bhi.n	80022ea <_printf_i+0x32>
 80022d4:	2f00      	cmp	r7, #0
 80022d6:	f000 80d8 	beq.w	800248a <_printf_i+0x1d2>
 80022da:	2f58      	cmp	r7, #88	; 0x58
 80022dc:	f000 80a3 	beq.w	8002426 <_printf_i+0x16e>
 80022e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022e8:	e03a      	b.n	8002360 <_printf_i+0xa8>
 80022ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022ee:	2b15      	cmp	r3, #21
 80022f0:	d8f6      	bhi.n	80022e0 <_printf_i+0x28>
 80022f2:	a101      	add	r1, pc, #4	; (adr r1, 80022f8 <_printf_i+0x40>)
 80022f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022f8:	08002351 	.word	0x08002351
 80022fc:	08002365 	.word	0x08002365
 8002300:	080022e1 	.word	0x080022e1
 8002304:	080022e1 	.word	0x080022e1
 8002308:	080022e1 	.word	0x080022e1
 800230c:	080022e1 	.word	0x080022e1
 8002310:	08002365 	.word	0x08002365
 8002314:	080022e1 	.word	0x080022e1
 8002318:	080022e1 	.word	0x080022e1
 800231c:	080022e1 	.word	0x080022e1
 8002320:	080022e1 	.word	0x080022e1
 8002324:	08002471 	.word	0x08002471
 8002328:	08002395 	.word	0x08002395
 800232c:	08002453 	.word	0x08002453
 8002330:	080022e1 	.word	0x080022e1
 8002334:	080022e1 	.word	0x080022e1
 8002338:	08002493 	.word	0x08002493
 800233c:	080022e1 	.word	0x080022e1
 8002340:	08002395 	.word	0x08002395
 8002344:	080022e1 	.word	0x080022e1
 8002348:	080022e1 	.word	0x080022e1
 800234c:	0800245b 	.word	0x0800245b
 8002350:	682b      	ldr	r3, [r5, #0]
 8002352:	1d1a      	adds	r2, r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	602a      	str	r2, [r5, #0]
 8002358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800235c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002360:	2301      	movs	r3, #1
 8002362:	e0a3      	b.n	80024ac <_printf_i+0x1f4>
 8002364:	6820      	ldr	r0, [r4, #0]
 8002366:	6829      	ldr	r1, [r5, #0]
 8002368:	0606      	lsls	r6, r0, #24
 800236a:	f101 0304 	add.w	r3, r1, #4
 800236e:	d50a      	bpl.n	8002386 <_printf_i+0xce>
 8002370:	680e      	ldr	r6, [r1, #0]
 8002372:	602b      	str	r3, [r5, #0]
 8002374:	2e00      	cmp	r6, #0
 8002376:	da03      	bge.n	8002380 <_printf_i+0xc8>
 8002378:	232d      	movs	r3, #45	; 0x2d
 800237a:	4276      	negs	r6, r6
 800237c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002380:	485e      	ldr	r0, [pc, #376]	; (80024fc <_printf_i+0x244>)
 8002382:	230a      	movs	r3, #10
 8002384:	e019      	b.n	80023ba <_printf_i+0x102>
 8002386:	680e      	ldr	r6, [r1, #0]
 8002388:	602b      	str	r3, [r5, #0]
 800238a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800238e:	bf18      	it	ne
 8002390:	b236      	sxthne	r6, r6
 8002392:	e7ef      	b.n	8002374 <_printf_i+0xbc>
 8002394:	682b      	ldr	r3, [r5, #0]
 8002396:	6820      	ldr	r0, [r4, #0]
 8002398:	1d19      	adds	r1, r3, #4
 800239a:	6029      	str	r1, [r5, #0]
 800239c:	0601      	lsls	r1, r0, #24
 800239e:	d501      	bpl.n	80023a4 <_printf_i+0xec>
 80023a0:	681e      	ldr	r6, [r3, #0]
 80023a2:	e002      	b.n	80023aa <_printf_i+0xf2>
 80023a4:	0646      	lsls	r6, r0, #25
 80023a6:	d5fb      	bpl.n	80023a0 <_printf_i+0xe8>
 80023a8:	881e      	ldrh	r6, [r3, #0]
 80023aa:	4854      	ldr	r0, [pc, #336]	; (80024fc <_printf_i+0x244>)
 80023ac:	2f6f      	cmp	r7, #111	; 0x6f
 80023ae:	bf0c      	ite	eq
 80023b0:	2308      	moveq	r3, #8
 80023b2:	230a      	movne	r3, #10
 80023b4:	2100      	movs	r1, #0
 80023b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023ba:	6865      	ldr	r5, [r4, #4]
 80023bc:	60a5      	str	r5, [r4, #8]
 80023be:	2d00      	cmp	r5, #0
 80023c0:	bfa2      	ittt	ge
 80023c2:	6821      	ldrge	r1, [r4, #0]
 80023c4:	f021 0104 	bicge.w	r1, r1, #4
 80023c8:	6021      	strge	r1, [r4, #0]
 80023ca:	b90e      	cbnz	r6, 80023d0 <_printf_i+0x118>
 80023cc:	2d00      	cmp	r5, #0
 80023ce:	d04d      	beq.n	800246c <_printf_i+0x1b4>
 80023d0:	4615      	mov	r5, r2
 80023d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80023d6:	fb03 6711 	mls	r7, r3, r1, r6
 80023da:	5dc7      	ldrb	r7, [r0, r7]
 80023dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80023e0:	4637      	mov	r7, r6
 80023e2:	42bb      	cmp	r3, r7
 80023e4:	460e      	mov	r6, r1
 80023e6:	d9f4      	bls.n	80023d2 <_printf_i+0x11a>
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d10b      	bne.n	8002404 <_printf_i+0x14c>
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	07de      	lsls	r6, r3, #31
 80023f0:	d508      	bpl.n	8002404 <_printf_i+0x14c>
 80023f2:	6923      	ldr	r3, [r4, #16]
 80023f4:	6861      	ldr	r1, [r4, #4]
 80023f6:	4299      	cmp	r1, r3
 80023f8:	bfde      	ittt	le
 80023fa:	2330      	movle	r3, #48	; 0x30
 80023fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002400:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002404:	1b52      	subs	r2, r2, r5
 8002406:	6122      	str	r2, [r4, #16]
 8002408:	f8cd a000 	str.w	sl, [sp]
 800240c:	464b      	mov	r3, r9
 800240e:	aa03      	add	r2, sp, #12
 8002410:	4621      	mov	r1, r4
 8002412:	4640      	mov	r0, r8
 8002414:	f7ff fee2 	bl	80021dc <_printf_common>
 8002418:	3001      	adds	r0, #1
 800241a:	d14c      	bne.n	80024b6 <_printf_i+0x1fe>
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	b004      	add	sp, #16
 8002422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002426:	4835      	ldr	r0, [pc, #212]	; (80024fc <_printf_i+0x244>)
 8002428:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800242c:	6829      	ldr	r1, [r5, #0]
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	f851 6b04 	ldr.w	r6, [r1], #4
 8002434:	6029      	str	r1, [r5, #0]
 8002436:	061d      	lsls	r5, r3, #24
 8002438:	d514      	bpl.n	8002464 <_printf_i+0x1ac>
 800243a:	07df      	lsls	r7, r3, #31
 800243c:	bf44      	itt	mi
 800243e:	f043 0320 	orrmi.w	r3, r3, #32
 8002442:	6023      	strmi	r3, [r4, #0]
 8002444:	b91e      	cbnz	r6, 800244e <_printf_i+0x196>
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	f023 0320 	bic.w	r3, r3, #32
 800244c:	6023      	str	r3, [r4, #0]
 800244e:	2310      	movs	r3, #16
 8002450:	e7b0      	b.n	80023b4 <_printf_i+0xfc>
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	f043 0320 	orr.w	r3, r3, #32
 8002458:	6023      	str	r3, [r4, #0]
 800245a:	2378      	movs	r3, #120	; 0x78
 800245c:	4828      	ldr	r0, [pc, #160]	; (8002500 <_printf_i+0x248>)
 800245e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002462:	e7e3      	b.n	800242c <_printf_i+0x174>
 8002464:	0659      	lsls	r1, r3, #25
 8002466:	bf48      	it	mi
 8002468:	b2b6      	uxthmi	r6, r6
 800246a:	e7e6      	b.n	800243a <_printf_i+0x182>
 800246c:	4615      	mov	r5, r2
 800246e:	e7bb      	b.n	80023e8 <_printf_i+0x130>
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	6826      	ldr	r6, [r4, #0]
 8002474:	6961      	ldr	r1, [r4, #20]
 8002476:	1d18      	adds	r0, r3, #4
 8002478:	6028      	str	r0, [r5, #0]
 800247a:	0635      	lsls	r5, r6, #24
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	d501      	bpl.n	8002484 <_printf_i+0x1cc>
 8002480:	6019      	str	r1, [r3, #0]
 8002482:	e002      	b.n	800248a <_printf_i+0x1d2>
 8002484:	0670      	lsls	r0, r6, #25
 8002486:	d5fb      	bpl.n	8002480 <_printf_i+0x1c8>
 8002488:	8019      	strh	r1, [r3, #0]
 800248a:	2300      	movs	r3, #0
 800248c:	6123      	str	r3, [r4, #16]
 800248e:	4615      	mov	r5, r2
 8002490:	e7ba      	b.n	8002408 <_printf_i+0x150>
 8002492:	682b      	ldr	r3, [r5, #0]
 8002494:	1d1a      	adds	r2, r3, #4
 8002496:	602a      	str	r2, [r5, #0]
 8002498:	681d      	ldr	r5, [r3, #0]
 800249a:	6862      	ldr	r2, [r4, #4]
 800249c:	2100      	movs	r1, #0
 800249e:	4628      	mov	r0, r5
 80024a0:	f7fd fe9e 	bl	80001e0 <memchr>
 80024a4:	b108      	cbz	r0, 80024aa <_printf_i+0x1f2>
 80024a6:	1b40      	subs	r0, r0, r5
 80024a8:	6060      	str	r0, [r4, #4]
 80024aa:	6863      	ldr	r3, [r4, #4]
 80024ac:	6123      	str	r3, [r4, #16]
 80024ae:	2300      	movs	r3, #0
 80024b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024b4:	e7a8      	b.n	8002408 <_printf_i+0x150>
 80024b6:	6923      	ldr	r3, [r4, #16]
 80024b8:	462a      	mov	r2, r5
 80024ba:	4649      	mov	r1, r9
 80024bc:	4640      	mov	r0, r8
 80024be:	47d0      	blx	sl
 80024c0:	3001      	adds	r0, #1
 80024c2:	d0ab      	beq.n	800241c <_printf_i+0x164>
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	079b      	lsls	r3, r3, #30
 80024c8:	d413      	bmi.n	80024f2 <_printf_i+0x23a>
 80024ca:	68e0      	ldr	r0, [r4, #12]
 80024cc:	9b03      	ldr	r3, [sp, #12]
 80024ce:	4298      	cmp	r0, r3
 80024d0:	bfb8      	it	lt
 80024d2:	4618      	movlt	r0, r3
 80024d4:	e7a4      	b.n	8002420 <_printf_i+0x168>
 80024d6:	2301      	movs	r3, #1
 80024d8:	4632      	mov	r2, r6
 80024da:	4649      	mov	r1, r9
 80024dc:	4640      	mov	r0, r8
 80024de:	47d0      	blx	sl
 80024e0:	3001      	adds	r0, #1
 80024e2:	d09b      	beq.n	800241c <_printf_i+0x164>
 80024e4:	3501      	adds	r5, #1
 80024e6:	68e3      	ldr	r3, [r4, #12]
 80024e8:	9903      	ldr	r1, [sp, #12]
 80024ea:	1a5b      	subs	r3, r3, r1
 80024ec:	42ab      	cmp	r3, r5
 80024ee:	dcf2      	bgt.n	80024d6 <_printf_i+0x21e>
 80024f0:	e7eb      	b.n	80024ca <_printf_i+0x212>
 80024f2:	2500      	movs	r5, #0
 80024f4:	f104 0619 	add.w	r6, r4, #25
 80024f8:	e7f5      	b.n	80024e6 <_printf_i+0x22e>
 80024fa:	bf00      	nop
 80024fc:	0800419d 	.word	0x0800419d
 8002500:	080041ae 	.word	0x080041ae

08002504 <memcpy>:
 8002504:	440a      	add	r2, r1
 8002506:	4291      	cmp	r1, r2
 8002508:	f100 33ff 	add.w	r3, r0, #4294967295
 800250c:	d100      	bne.n	8002510 <memcpy+0xc>
 800250e:	4770      	bx	lr
 8002510:	b510      	push	{r4, lr}
 8002512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800251a:	4291      	cmp	r1, r2
 800251c:	d1f9      	bne.n	8002512 <memcpy+0xe>
 800251e:	bd10      	pop	{r4, pc}

08002520 <memmove>:
 8002520:	4288      	cmp	r0, r1
 8002522:	b510      	push	{r4, lr}
 8002524:	eb01 0402 	add.w	r4, r1, r2
 8002528:	d902      	bls.n	8002530 <memmove+0x10>
 800252a:	4284      	cmp	r4, r0
 800252c:	4623      	mov	r3, r4
 800252e:	d807      	bhi.n	8002540 <memmove+0x20>
 8002530:	1e43      	subs	r3, r0, #1
 8002532:	42a1      	cmp	r1, r4
 8002534:	d008      	beq.n	8002548 <memmove+0x28>
 8002536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800253a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800253e:	e7f8      	b.n	8002532 <memmove+0x12>
 8002540:	4402      	add	r2, r0
 8002542:	4601      	mov	r1, r0
 8002544:	428a      	cmp	r2, r1
 8002546:	d100      	bne.n	800254a <memmove+0x2a>
 8002548:	bd10      	pop	{r4, pc}
 800254a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800254e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002552:	e7f7      	b.n	8002544 <memmove+0x24>

08002554 <_free_r>:
 8002554:	b538      	push	{r3, r4, r5, lr}
 8002556:	4605      	mov	r5, r0
 8002558:	2900      	cmp	r1, #0
 800255a:	d041      	beq.n	80025e0 <_free_r+0x8c>
 800255c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002560:	1f0c      	subs	r4, r1, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	bfb8      	it	lt
 8002566:	18e4      	addlt	r4, r4, r3
 8002568:	f000 f912 	bl	8002790 <__malloc_lock>
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <_free_r+0x90>)
 800256e:	6813      	ldr	r3, [r2, #0]
 8002570:	b933      	cbnz	r3, 8002580 <_free_r+0x2c>
 8002572:	6063      	str	r3, [r4, #4]
 8002574:	6014      	str	r4, [r2, #0]
 8002576:	4628      	mov	r0, r5
 8002578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800257c:	f000 b90e 	b.w	800279c <__malloc_unlock>
 8002580:	42a3      	cmp	r3, r4
 8002582:	d908      	bls.n	8002596 <_free_r+0x42>
 8002584:	6820      	ldr	r0, [r4, #0]
 8002586:	1821      	adds	r1, r4, r0
 8002588:	428b      	cmp	r3, r1
 800258a:	bf01      	itttt	eq
 800258c:	6819      	ldreq	r1, [r3, #0]
 800258e:	685b      	ldreq	r3, [r3, #4]
 8002590:	1809      	addeq	r1, r1, r0
 8002592:	6021      	streq	r1, [r4, #0]
 8002594:	e7ed      	b.n	8002572 <_free_r+0x1e>
 8002596:	461a      	mov	r2, r3
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	b10b      	cbz	r3, 80025a0 <_free_r+0x4c>
 800259c:	42a3      	cmp	r3, r4
 800259e:	d9fa      	bls.n	8002596 <_free_r+0x42>
 80025a0:	6811      	ldr	r1, [r2, #0]
 80025a2:	1850      	adds	r0, r2, r1
 80025a4:	42a0      	cmp	r0, r4
 80025a6:	d10b      	bne.n	80025c0 <_free_r+0x6c>
 80025a8:	6820      	ldr	r0, [r4, #0]
 80025aa:	4401      	add	r1, r0
 80025ac:	1850      	adds	r0, r2, r1
 80025ae:	4283      	cmp	r3, r0
 80025b0:	6011      	str	r1, [r2, #0]
 80025b2:	d1e0      	bne.n	8002576 <_free_r+0x22>
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	6053      	str	r3, [r2, #4]
 80025ba:	4401      	add	r1, r0
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	e7da      	b.n	8002576 <_free_r+0x22>
 80025c0:	d902      	bls.n	80025c8 <_free_r+0x74>
 80025c2:	230c      	movs	r3, #12
 80025c4:	602b      	str	r3, [r5, #0]
 80025c6:	e7d6      	b.n	8002576 <_free_r+0x22>
 80025c8:	6820      	ldr	r0, [r4, #0]
 80025ca:	1821      	adds	r1, r4, r0
 80025cc:	428b      	cmp	r3, r1
 80025ce:	bf04      	itt	eq
 80025d0:	6819      	ldreq	r1, [r3, #0]
 80025d2:	685b      	ldreq	r3, [r3, #4]
 80025d4:	6063      	str	r3, [r4, #4]
 80025d6:	bf04      	itt	eq
 80025d8:	1809      	addeq	r1, r1, r0
 80025da:	6021      	streq	r1, [r4, #0]
 80025dc:	6054      	str	r4, [r2, #4]
 80025de:	e7ca      	b.n	8002576 <_free_r+0x22>
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
 80025e2:	bf00      	nop
 80025e4:	20000d44 	.word	0x20000d44

080025e8 <sbrk_aligned>:
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	4e0e      	ldr	r6, [pc, #56]	; (8002624 <sbrk_aligned+0x3c>)
 80025ec:	460c      	mov	r4, r1
 80025ee:	6831      	ldr	r1, [r6, #0]
 80025f0:	4605      	mov	r5, r0
 80025f2:	b911      	cbnz	r1, 80025fa <sbrk_aligned+0x12>
 80025f4:	f000 f8bc 	bl	8002770 <_sbrk_r>
 80025f8:	6030      	str	r0, [r6, #0]
 80025fa:	4621      	mov	r1, r4
 80025fc:	4628      	mov	r0, r5
 80025fe:	f000 f8b7 	bl	8002770 <_sbrk_r>
 8002602:	1c43      	adds	r3, r0, #1
 8002604:	d00a      	beq.n	800261c <sbrk_aligned+0x34>
 8002606:	1cc4      	adds	r4, r0, #3
 8002608:	f024 0403 	bic.w	r4, r4, #3
 800260c:	42a0      	cmp	r0, r4
 800260e:	d007      	beq.n	8002620 <sbrk_aligned+0x38>
 8002610:	1a21      	subs	r1, r4, r0
 8002612:	4628      	mov	r0, r5
 8002614:	f000 f8ac 	bl	8002770 <_sbrk_r>
 8002618:	3001      	adds	r0, #1
 800261a:	d101      	bne.n	8002620 <sbrk_aligned+0x38>
 800261c:	f04f 34ff 	mov.w	r4, #4294967295
 8002620:	4620      	mov	r0, r4
 8002622:	bd70      	pop	{r4, r5, r6, pc}
 8002624:	20000d48 	.word	0x20000d48

08002628 <_malloc_r>:
 8002628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800262c:	1ccd      	adds	r5, r1, #3
 800262e:	f025 0503 	bic.w	r5, r5, #3
 8002632:	3508      	adds	r5, #8
 8002634:	2d0c      	cmp	r5, #12
 8002636:	bf38      	it	cc
 8002638:	250c      	movcc	r5, #12
 800263a:	2d00      	cmp	r5, #0
 800263c:	4607      	mov	r7, r0
 800263e:	db01      	blt.n	8002644 <_malloc_r+0x1c>
 8002640:	42a9      	cmp	r1, r5
 8002642:	d905      	bls.n	8002650 <_malloc_r+0x28>
 8002644:	230c      	movs	r3, #12
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	2600      	movs	r6, #0
 800264a:	4630      	mov	r0, r6
 800264c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002650:	4e2e      	ldr	r6, [pc, #184]	; (800270c <_malloc_r+0xe4>)
 8002652:	f000 f89d 	bl	8002790 <__malloc_lock>
 8002656:	6833      	ldr	r3, [r6, #0]
 8002658:	461c      	mov	r4, r3
 800265a:	bb34      	cbnz	r4, 80026aa <_malloc_r+0x82>
 800265c:	4629      	mov	r1, r5
 800265e:	4638      	mov	r0, r7
 8002660:	f7ff ffc2 	bl	80025e8 <sbrk_aligned>
 8002664:	1c43      	adds	r3, r0, #1
 8002666:	4604      	mov	r4, r0
 8002668:	d14d      	bne.n	8002706 <_malloc_r+0xde>
 800266a:	6834      	ldr	r4, [r6, #0]
 800266c:	4626      	mov	r6, r4
 800266e:	2e00      	cmp	r6, #0
 8002670:	d140      	bne.n	80026f4 <_malloc_r+0xcc>
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	4631      	mov	r1, r6
 8002676:	4638      	mov	r0, r7
 8002678:	eb04 0803 	add.w	r8, r4, r3
 800267c:	f000 f878 	bl	8002770 <_sbrk_r>
 8002680:	4580      	cmp	r8, r0
 8002682:	d13a      	bne.n	80026fa <_malloc_r+0xd2>
 8002684:	6821      	ldr	r1, [r4, #0]
 8002686:	3503      	adds	r5, #3
 8002688:	1a6d      	subs	r5, r5, r1
 800268a:	f025 0503 	bic.w	r5, r5, #3
 800268e:	3508      	adds	r5, #8
 8002690:	2d0c      	cmp	r5, #12
 8002692:	bf38      	it	cc
 8002694:	250c      	movcc	r5, #12
 8002696:	4629      	mov	r1, r5
 8002698:	4638      	mov	r0, r7
 800269a:	f7ff ffa5 	bl	80025e8 <sbrk_aligned>
 800269e:	3001      	adds	r0, #1
 80026a0:	d02b      	beq.n	80026fa <_malloc_r+0xd2>
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	442b      	add	r3, r5
 80026a6:	6023      	str	r3, [r4, #0]
 80026a8:	e00e      	b.n	80026c8 <_malloc_r+0xa0>
 80026aa:	6822      	ldr	r2, [r4, #0]
 80026ac:	1b52      	subs	r2, r2, r5
 80026ae:	d41e      	bmi.n	80026ee <_malloc_r+0xc6>
 80026b0:	2a0b      	cmp	r2, #11
 80026b2:	d916      	bls.n	80026e2 <_malloc_r+0xba>
 80026b4:	1961      	adds	r1, r4, r5
 80026b6:	42a3      	cmp	r3, r4
 80026b8:	6025      	str	r5, [r4, #0]
 80026ba:	bf18      	it	ne
 80026bc:	6059      	strne	r1, [r3, #4]
 80026be:	6863      	ldr	r3, [r4, #4]
 80026c0:	bf08      	it	eq
 80026c2:	6031      	streq	r1, [r6, #0]
 80026c4:	5162      	str	r2, [r4, r5]
 80026c6:	604b      	str	r3, [r1, #4]
 80026c8:	4638      	mov	r0, r7
 80026ca:	f104 060b 	add.w	r6, r4, #11
 80026ce:	f000 f865 	bl	800279c <__malloc_unlock>
 80026d2:	f026 0607 	bic.w	r6, r6, #7
 80026d6:	1d23      	adds	r3, r4, #4
 80026d8:	1af2      	subs	r2, r6, r3
 80026da:	d0b6      	beq.n	800264a <_malloc_r+0x22>
 80026dc:	1b9b      	subs	r3, r3, r6
 80026de:	50a3      	str	r3, [r4, r2]
 80026e0:	e7b3      	b.n	800264a <_malloc_r+0x22>
 80026e2:	6862      	ldr	r2, [r4, #4]
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	bf0c      	ite	eq
 80026e8:	6032      	streq	r2, [r6, #0]
 80026ea:	605a      	strne	r2, [r3, #4]
 80026ec:	e7ec      	b.n	80026c8 <_malloc_r+0xa0>
 80026ee:	4623      	mov	r3, r4
 80026f0:	6864      	ldr	r4, [r4, #4]
 80026f2:	e7b2      	b.n	800265a <_malloc_r+0x32>
 80026f4:	4634      	mov	r4, r6
 80026f6:	6876      	ldr	r6, [r6, #4]
 80026f8:	e7b9      	b.n	800266e <_malloc_r+0x46>
 80026fa:	230c      	movs	r3, #12
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	4638      	mov	r0, r7
 8002700:	f000 f84c 	bl	800279c <__malloc_unlock>
 8002704:	e7a1      	b.n	800264a <_malloc_r+0x22>
 8002706:	6025      	str	r5, [r4, #0]
 8002708:	e7de      	b.n	80026c8 <_malloc_r+0xa0>
 800270a:	bf00      	nop
 800270c:	20000d44 	.word	0x20000d44

08002710 <_realloc_r>:
 8002710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002714:	4680      	mov	r8, r0
 8002716:	4614      	mov	r4, r2
 8002718:	460e      	mov	r6, r1
 800271a:	b921      	cbnz	r1, 8002726 <_realloc_r+0x16>
 800271c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002720:	4611      	mov	r1, r2
 8002722:	f7ff bf81 	b.w	8002628 <_malloc_r>
 8002726:	b92a      	cbnz	r2, 8002734 <_realloc_r+0x24>
 8002728:	f7ff ff14 	bl	8002554 <_free_r>
 800272c:	4625      	mov	r5, r4
 800272e:	4628      	mov	r0, r5
 8002730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002734:	f000 f838 	bl	80027a8 <_malloc_usable_size_r>
 8002738:	4284      	cmp	r4, r0
 800273a:	4607      	mov	r7, r0
 800273c:	d802      	bhi.n	8002744 <_realloc_r+0x34>
 800273e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002742:	d812      	bhi.n	800276a <_realloc_r+0x5a>
 8002744:	4621      	mov	r1, r4
 8002746:	4640      	mov	r0, r8
 8002748:	f7ff ff6e 	bl	8002628 <_malloc_r>
 800274c:	4605      	mov	r5, r0
 800274e:	2800      	cmp	r0, #0
 8002750:	d0ed      	beq.n	800272e <_realloc_r+0x1e>
 8002752:	42bc      	cmp	r4, r7
 8002754:	4622      	mov	r2, r4
 8002756:	4631      	mov	r1, r6
 8002758:	bf28      	it	cs
 800275a:	463a      	movcs	r2, r7
 800275c:	f7ff fed2 	bl	8002504 <memcpy>
 8002760:	4631      	mov	r1, r6
 8002762:	4640      	mov	r0, r8
 8002764:	f7ff fef6 	bl	8002554 <_free_r>
 8002768:	e7e1      	b.n	800272e <_realloc_r+0x1e>
 800276a:	4635      	mov	r5, r6
 800276c:	e7df      	b.n	800272e <_realloc_r+0x1e>
	...

08002770 <_sbrk_r>:
 8002770:	b538      	push	{r3, r4, r5, lr}
 8002772:	4d06      	ldr	r5, [pc, #24]	; (800278c <_sbrk_r+0x1c>)
 8002774:	2300      	movs	r3, #0
 8002776:	4604      	mov	r4, r0
 8002778:	4608      	mov	r0, r1
 800277a:	602b      	str	r3, [r5, #0]
 800277c:	f000 f81e 	bl	80027bc <_sbrk>
 8002780:	1c43      	adds	r3, r0, #1
 8002782:	d102      	bne.n	800278a <_sbrk_r+0x1a>
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	b103      	cbz	r3, 800278a <_sbrk_r+0x1a>
 8002788:	6023      	str	r3, [r4, #0]
 800278a:	bd38      	pop	{r3, r4, r5, pc}
 800278c:	20000d4c 	.word	0x20000d4c

08002790 <__malloc_lock>:
 8002790:	4801      	ldr	r0, [pc, #4]	; (8002798 <__malloc_lock+0x8>)
 8002792:	f000 b811 	b.w	80027b8 <__retarget_lock_acquire_recursive>
 8002796:	bf00      	nop
 8002798:	20000d50 	.word	0x20000d50

0800279c <__malloc_unlock>:
 800279c:	4801      	ldr	r0, [pc, #4]	; (80027a4 <__malloc_unlock+0x8>)
 800279e:	f000 b80c 	b.w	80027ba <__retarget_lock_release_recursive>
 80027a2:	bf00      	nop
 80027a4:	20000d50 	.word	0x20000d50

080027a8 <_malloc_usable_size_r>:
 80027a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027ac:	1f18      	subs	r0, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bfbc      	itt	lt
 80027b2:	580b      	ldrlt	r3, [r1, r0]
 80027b4:	18c0      	addlt	r0, r0, r3
 80027b6:	4770      	bx	lr

080027b8 <__retarget_lock_acquire_recursive>:
 80027b8:	4770      	bx	lr

080027ba <__retarget_lock_release_recursive>:
 80027ba:	4770      	bx	lr

080027bc <_sbrk>:
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <_sbrk+0x14>)
 80027be:	6811      	ldr	r1, [r2, #0]
 80027c0:	4603      	mov	r3, r0
 80027c2:	b909      	cbnz	r1, 80027c8 <_sbrk+0xc>
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <_sbrk+0x18>)
 80027c6:	6011      	str	r1, [r2, #0]
 80027c8:	6810      	ldr	r0, [r2, #0]
 80027ca:	4403      	add	r3, r0
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4770      	bx	lr
 80027d0:	20000d54 	.word	0x20000d54
 80027d4:	20000d58 	.word	0x20000d58

080027d8 <_init>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	bf00      	nop
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr

080027e4 <_fini>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	bf00      	nop
 80027e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ea:	bc08      	pop	{r3}
 80027ec:	469e      	mov	lr, r3
 80027ee:	4770      	bx	lr
