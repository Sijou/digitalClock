
WiSe2223_GruppeK3_s_Projektaufgabe_Digitaluhr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001848  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cc8  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  080036ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          00000c54  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c78  20000c78  00020024  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   000027ce  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000b8d  00000000  00000000  0002281c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000200  00000000  00000000  000233b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000180  00000000  00000000  000235b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000188a0  00000000  00000000  00023730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000031ab  00000000  00000000  0003bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00086eb5  00000000  00000000  0003f17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c6030  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000634  00000000  00000000  000c6080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080019c4 	.word	0x080019c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080019c4 	.word	0x080019c4

080001d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	db0a      	blt.n	80001fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	490c      	ldr	r1, [pc, #48]	; (8000220 <__NVIC_SetPriority+0x4c>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	0112      	lsls	r2, r2, #4
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	440b      	add	r3, r1
 80001f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001fc:	e00a      	b.n	8000214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4908      	ldr	r1, [pc, #32]	; (8000224 <__NVIC_SetPriority+0x50>)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	3b04      	subs	r3, #4
 800020c:	0112      	lsls	r2, r2, #4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	440b      	add	r3, r1
 8000212:	761a      	strb	r2, [r3, #24]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <main>:
OLED_t lcd1 ;
OLED_t lcd2 ;
OLED_t lcd3 ;

int main()
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af04      	add	r7, sp, #16

	while ((RCC->CR & 2) == 0);  //wait until HSI is Ready
 800022e:	bf00      	nop
 8000230:	4b57      	ldr	r3, [pc, #348]	; (8000390 <main+0x168>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f003 0302 	and.w	r3, r3, #2
 8000238:	2b00      	cmp	r3, #0
 800023a:	d0f9      	beq.n	8000230 <main+0x8>

	systick_enable() ;
 800023c:	f000 f8be 	bl	80003bc <systick_enable>

	RCC->CFGR &= ~(1<<7)  ; //reset HPRE4 The AHB clock frequency == sys clk
 8000240:	4b53      	ldr	r3, [pc, #332]	; (8000390 <main+0x168>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a52      	ldr	r2, [pc, #328]	; (8000390 <main+0x168>)
 8000246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800024a:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<12) ; // APB1 clock no division
 800024c:	4b50      	ldr	r3, [pc, #320]	; (8000390 <main+0x168>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a4f      	ldr	r2, [pc, #316]	; (8000390 <main+0x168>)
 8000252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000256:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<15) ; // APB2 clock no division
 8000258:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <main+0x168>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	4a4c      	ldr	r2, [pc, #304]	; (8000390 <main+0x168>)
 800025e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000262:	6053      	str	r3, [r2, #4]

	gpio_clock_enable(GPIOA) ;
 8000264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000268:	f000 fdc2 	bl	8000df0 <gpio_clock_enable>

	gpio_config_pin(GPIOA,5,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 800026c:	2300      	movs	r3, #0
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	2300      	movs	r3, #0
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2300      	movs	r3, #0
 8000276:	2201      	movs	r2, #1
 8000278:	2105      	movs	r1, #5
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f000 fe3c 	bl	8000efa <gpio_config_pin>

	gpio_set_pinState(GPIOA , 5 , LOW) ;
 8000282:	2201      	movs	r2, #1
 8000284:	2105      	movs	r1, #5
 8000286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028a:	f000 fe6d 	bl	8000f68 <gpio_set_pinState>
//	 I2C_Read(I2C2 ,0x57 , buff , 2) ;

     //128*64
#endif

	 lcd1.dev = I2C1 ;
 800028e:	4b41      	ldr	r3, [pc, #260]	; (8000394 <main+0x16c>)
 8000290:	4a41      	ldr	r2, [pc, #260]	; (8000398 <main+0x170>)
 8000292:	601a      	str	r2, [r3, #0]
	 lcd2.dev = I2C2 ;
 8000294:	4b41      	ldr	r3, [pc, #260]	; (800039c <main+0x174>)
 8000296:	4a42      	ldr	r2, [pc, #264]	; (80003a0 <main+0x178>)
 8000298:	601a      	str	r2, [r3, #0]
	 lcd3.dev = I2C3 ;
 800029a:	4b42      	ldr	r3, [pc, #264]	; (80003a4 <main+0x17c>)
 800029c:	4a42      	ldr	r2, [pc, #264]	; (80003a8 <main+0x180>)
 800029e:	601a      	str	r2, [r3, #0]

	 I2C_Init(I2C1) ;
 80002a0:	483d      	ldr	r0, [pc, #244]	; (8000398 <main+0x170>)
 80002a2:	f000 fe85 	bl	8000fb0 <I2C_Init>
	 I2C_Init(I2C2) ;
 80002a6:	483e      	ldr	r0, [pc, #248]	; (80003a0 <main+0x178>)
 80002a8:	f000 fe82 	bl	8000fb0 <I2C_Init>
	 I2C_Init(I2C3) ;
 80002ac:	483e      	ldr	r0, [pc, #248]	; (80003a8 <main+0x180>)
 80002ae:	f000 fe7f 	bl	8000fb0 <I2C_Init>

	 rtc_init(I2C1) ;
 80002b2:	4839      	ldr	r0, [pc, #228]	; (8000398 <main+0x170>)
 80002b4:	f001 fa2c 	bl	8001710 <rtc_init>

	 rtc_I2C_TimeOffset() ;
 80002b8:	f001 fa38 	bl	800172c <rtc_I2C_TimeOffset>

	 Display_Init(&lcd3);	//Configure Display
 80002bc:	4839      	ldr	r0, [pc, #228]	; (80003a4 <main+0x17c>)
 80002be:	f000 f950 	bl	8000562 <Display_Init>
	 Display_Init(&lcd2);	//Configure Display
 80002c2:	4836      	ldr	r0, [pc, #216]	; (800039c <main+0x174>)
 80002c4:	f000 f94d 	bl	8000562 <Display_Init>
	 Display_Init(&lcd1);	//Configure Display
 80002c8:	4832      	ldr	r0, [pc, #200]	; (8000394 <main+0x16c>)
 80002ca:	f000 f94a 	bl	8000562 <Display_Init>
	 keypad_init(GPIOC , 0) ;
 80002ce:	2100      	movs	r1, #0
 80002d0:	4836      	ldr	r0, [pc, #216]	; (80003ac <main+0x184>)
 80002d2:	f001 f83b 	bl	800134c <keypad_init>
	 //Example: print a picture on screen
		Display_Fill(&lcd3, Display_COLOR_BLACK );	//the entire Display is white (written to RAM)
 80002d6:	2100      	movs	r1, #0
 80002d8:	4832      	ldr	r0, [pc, #200]	; (80003a4 <main+0x17c>)
 80002da:	f000 fa88 	bl	80007ee <Display_Fill>
		Display_DrawBitmap(&lcd3 ,0, 0, looping, 128, 64, Display_COLOR_WHITE);	//data of picture into RAM	(available pictures: helix & looping)
 80002de:	2301      	movs	r3, #1
 80002e0:	9302      	str	r3, [sp, #8]
 80002e2:	2340      	movs	r3, #64	; 0x40
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2380      	movs	r3, #128	; 0x80
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	4b31      	ldr	r3, [pc, #196]	; (80003b0 <main+0x188>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	2100      	movs	r1, #0
 80002f0:	482c      	ldr	r0, [pc, #176]	; (80003a4 <main+0x17c>)
 80002f2:	f000 f8d6 	bl	80004a2 <Display_DrawBitmap>
		Display_UpdateScreen(&lcd3);
 80002f6:	482b      	ldr	r0, [pc, #172]	; (80003a4 <main+0x17c>)
 80002f8:	f000 fa41 	bl	800077e <Display_UpdateScreen>
	Display_Fill(&lcd2, Display_COLOR_WHITE );	//the entire Display is white (written to RAM)
 80002fc:	2101      	movs	r1, #1
 80002fe:	4827      	ldr	r0, [pc, #156]	; (800039c <main+0x174>)
 8000300:	f000 fa75 	bl	80007ee <Display_Fill>
	Display_UpdateScreen(&lcd2);
 8000304:	4825      	ldr	r0, [pc, #148]	; (800039c <main+0x174>)
 8000306:	f000 fa3a 	bl	800077e <Display_UpdateScreen>
	Display_Fill(&lcd1, Display_COLOR_BLACK );	//the entire Display is white (written to RAM)
 800030a:	2100      	movs	r1, #0
 800030c:	4821      	ldr	r0, [pc, #132]	; (8000394 <main+0x16c>)
 800030e:	f000 fa6e 	bl	80007ee <Display_Fill>
	Display_DrawBitmap(&lcd1 ,0, 0, alarm_logo, 128, 64, Display_COLOR_WHITE);	//data of picture into RAM	(available pictures: helix & looping)
 8000312:	2301      	movs	r3, #1
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	2340      	movs	r3, #64	; 0x40
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <main+0x18c>)
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	481b      	ldr	r0, [pc, #108]	; (8000394 <main+0x16c>)
 8000326:	f000 f8bc 	bl	80004a2 <Display_DrawBitmap>
	Display_UpdateScreen(&lcd1);
 800032a:	481a      	ldr	r0, [pc, #104]	; (8000394 <main+0x16c>)
 800032c:	f000 fa27 	bl	800077e <Display_UpdateScreen>

	uint8_t in_buffer[20]  ;
	uint8_t out_buffer[20] ;


	rtc_I2c_ReadAll(in_buffer);
 8000330:	f107 0318 	add.w	r3, r7, #24
 8000334:	4618      	mov	r0, r3
 8000336:	f001 fa27 	bl	8001788 <rtc_I2c_ReadAll>
	rtc_I2C_Calculate(in_buffer , out_buffer);
 800033a:	1d3a      	adds	r2, r7, #4
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4611      	mov	r1, r2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fa52 	bl	80017ec <rtc_I2C_Calculate>
	Display_printTime(&lcd3 , out_buffer,&Font_7x10 );
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4a1b      	ldr	r2, [pc, #108]	; (80003b8 <main+0x190>)
 800034c:	4619      	mov	r1, r3
 800034e:	4815      	ldr	r0, [pc, #84]	; (80003a4 <main+0x17c>)
 8000350:	f000 fc4a 	bl	8000be8 <Display_printTime>
	Display_UpdateScreen(&lcd3);
 8000354:	4813      	ldr	r0, [pc, #76]	; (80003a4 <main+0x17c>)
 8000356:	f000 fa12 	bl	800077e <Display_UpdateScreen>
	while(1)
	{

		char c = keypad_get_pressedkey() ;
 800035a:	f001 f8e9 	bl	8001530 <keypad_get_pressedkey>
 800035e:	4603      	mov	r3, r0
 8000360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(c != 0)
 8000364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0f6      	beq.n	800035a <main+0x132>
		{
			gpio_set_pinState(GPIOA , 5 , HIGH) ;
 800036c:	2200      	movs	r2, #0
 800036e:	2105      	movs	r1, #5
 8000370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000374:	f000 fdf8 	bl	8000f68 <gpio_set_pinState>
			Display_Putc(&lcd2 , c , &Font_7x10 , Display_COLOR_BLACK) ;
 8000378:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800037c:	2300      	movs	r3, #0
 800037e:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <main+0x190>)
 8000380:	4806      	ldr	r0, [pc, #24]	; (800039c <main+0x174>)
 8000382:	f000 fac5 	bl	8000910 <Display_Putc>
			Display_UpdateScreen(&lcd2);
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <main+0x174>)
 8000388:	f000 f9f9 	bl	800077e <Display_UpdateScreen>
	{
 800038c:	e7e5      	b.n	800035a <main+0x132>
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	20000044 	.word	0x20000044
 8000398:	40005400 	.word	0x40005400
 800039c:	20000450 	.word	0x20000450
 80003a0:	40005800 	.word	0x40005800
 80003a4:	2000085c 	.word	0x2000085c
 80003a8:	40007800 	.word	0x40007800
 80003ac:	48000800 	.word	0x48000800
 80003b0:	080019dc 	.word	0x080019dc
 80003b4:	08001ddc 	.word	0x08001ddc
 80003b8:	20000004 	.word	0x20000004

080003bc <systick_enable>:
	}
}


void systick_enable()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	SysTick->LOAD  = (SystemCoreClock_/1000) - 1;                  /* set reload register */
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <systick_enable+0x30>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <systick_enable+0x34>)
 80003c6:	fba2 2303 	umull	r2, r3, r2, r3
 80003ca:	099b      	lsrs	r3, r3, #6
 80003cc:	4a09      	ldr	r2, [pc, #36]	; (80003f4 <systick_enable+0x38>)
 80003ce:	3b01      	subs	r3, #1
 80003d0:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80003d2:	210f      	movs	r1, #15
 80003d4:	f04f 30ff 	mov.w	r0, #4294967295
 80003d8:	f7ff fefc 	bl	80001d4 <__NVIC_SetPriority>
	SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <systick_enable+0x38>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e2:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <systick_enable+0x38>)
 80003e4:	2207      	movs	r2, #7
 80003e6:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_TICKINT_Msk   |
					 SysTick_CTRL_ENABLE_Msk;
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000000 	.word	0x20000000
 80003f0:	10624dd3 	.word	0x10624dd3
 80003f4:	e000e010 	.word	0xe000e010

080003f8 <SysTick_Handler>:


void SysTick_Handler()
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  mtick++;
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <SysTick_Handler+0x18>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a03      	ldr	r2, [pc, #12]	; (8000410 <SysTick_Handler+0x18>)
 8000404:	6013      	str	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	20000040 	.word	0x20000040

08000414 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  uint32_t st = get_mtick();
 800041c:	f000 f810 	bl	8000440 <get_mtick>
 8000420:	60f8      	str	r0, [r7, #12]

  while( get_mtick() - st <ms);
 8000422:	bf00      	nop
 8000424:	f000 f80c 	bl	8000440 <get_mtick>
 8000428:	4602      	mov	r2, r0
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	d8f7      	bhi.n	8000424 <delay_ms+0x10>
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
	...

08000440 <get_mtick>:

uint32_t get_mtick()
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  return mtick;
 8000444:	4b02      	ldr	r3, [pc, #8]	; (8000450 <get_mtick+0x10>)
 8000446:	681b      	ldr	r3, [r3, #0]
}
 8000448:	4618      	mov	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	20000040 	.word	0x20000040

08000454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000454:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000488 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000458:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800045a:	e003      	b.n	8000464 <LoopCopyDataInit>

0800045c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800045e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000460:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000462:	3104      	adds	r1, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000464:	480a      	ldr	r0, [pc, #40]	; (8000490 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000468:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800046a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800046c:	d3f6      	bcc.n	800045c <CopyDataInit>
	ldr	r2, =_sbss
 800046e:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000470:	e002      	b.n	8000478 <LoopFillZerobss>

08000472 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000472:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000474:	f842 3b04 	str.w	r3, [r2], #4

08000478 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <LoopForever+0x16>)
	cmp	r2, r3
 800047a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800047c:	d3f9      	bcc.n	8000472 <FillZerobss>

/* Call the clock system intitialization function.*/
    //bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 800047e:	f001 fa75 	bl	800196c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000482:	f7ff fed1 	bl	8000228 <main>

08000486 <LoopForever>:

LoopForever:
    b LoopForever
 8000486:	e7fe      	b.n	8000486 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000488:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800048c:	080036ac 	.word	0x080036ac
	ldr	r0, =_sdata
 8000490:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000494:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8000498:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 800049c:	20000c78 	.word	0x20000c78

080004a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004a0:	e7fe      	b.n	80004a0 <ADC1_2_IRQHandler>

080004a2 <Display_DrawBitmap>:




void Display_DrawBitmap(OLED_t *oled ,uint16_t x, uint16_t y, const unsigned char *bitmap, uint16_t w, uint16_t h, Display_COLOR_t color)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b086      	sub	sp, #24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	817b      	strh	r3, [r7, #10]
 80004b0:	4613      	mov	r3, r2
 80004b2:	813b      	strh	r3, [r7, #8]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80004b4:	8c3b      	ldrh	r3, [r7, #32]
 80004b6:	3307      	adds	r3, #7
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	da00      	bge.n	80004be <Display_DrawBitmap+0x1c>
 80004bc:	3307      	adds	r3, #7
 80004be:	10db      	asrs	r3, r3, #3
 80004c0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	82bb      	strh	r3, [r7, #20]
 80004ca:	e040      	b.n	800054e <Display_DrawBitmap+0xac>
    {
        for(int16_t i=0; i<w; i++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	827b      	strh	r3, [r7, #18]
 80004d0:	e02f      	b.n	8000532 <Display_DrawBitmap+0x90>
        {
            if(i & 7)
 80004d2:	8a7b      	ldrh	r3, [r7, #18]
 80004d4:	f003 0307 	and.w	r3, r3, #7
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d003      	beq.n	80004e4 <Display_DrawBitmap+0x42>
            {
               byte <<= 1;
 80004dc:	7dfb      	ldrb	r3, [r7, #23]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	75fb      	strb	r3, [r7, #23]
 80004e2:	e012      	b.n	800050a <Display_DrawBitmap+0x68>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80004e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80004e8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80004ec:	fb03 f202 	mul.w	r2, r3, r2
 80004f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	da00      	bge.n	80004fa <Display_DrawBitmap+0x58>
 80004f8:	3307      	adds	r3, #7
 80004fa:	10db      	asrs	r3, r3, #3
 80004fc:	b21b      	sxth	r3, r3
 80004fe:	4413      	add	r3, r2
 8000500:	461a      	mov	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80)
 800050a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800050e:	2b00      	cmp	r3, #0
 8000510:	da09      	bge.n	8000526 <Display_DrawBitmap+0x84>
            	Display_DrawPixel(oled ,x+i, y, color);
 8000512:	8a7a      	ldrh	r2, [r7, #18]
 8000514:	897b      	ldrh	r3, [r7, #10]
 8000516:	4413      	add	r3, r2
 8000518:	b299      	uxth	r1, r3
 800051a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800051e:	893a      	ldrh	r2, [r7, #8]
 8000520:	68f8      	ldr	r0, [r7, #12]
 8000522:	f000 f97b 	bl	800081c <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000526:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800052a:	b29b      	uxth	r3, r3
 800052c:	3301      	adds	r3, #1
 800052e:	b29b      	uxth	r3, r3
 8000530:	827b      	strh	r3, [r7, #18]
 8000532:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000536:	8c3b      	ldrh	r3, [r7, #32]
 8000538:	429a      	cmp	r2, r3
 800053a:	dbca      	blt.n	80004d2 <Display_DrawBitmap+0x30>
    for(int16_t j=0; j<h; j++, y++)
 800053c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000540:	b29b      	uxth	r3, r3
 8000542:	3301      	adds	r3, #1
 8000544:	b29b      	uxth	r3, r3
 8000546:	82bb      	strh	r3, [r7, #20]
 8000548:	893b      	ldrh	r3, [r7, #8]
 800054a:	3301      	adds	r3, #1
 800054c:	813b      	strh	r3, [r7, #8]
 800054e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000554:	429a      	cmp	r2, r3
 8000556:	dbb9      	blt.n	80004cc <Display_DrawBitmap+0x2a>
        }
    }
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <Display_Init>:




uint8_t Display_Init(OLED_t * oled) {
 8000562:	b580      	push	{r7, lr}
 8000564:	b086      	sub	sp, #24
 8000566:	af02      	add	r7, sp, #8
 8000568:	6078      	str	r0, [r7, #4]

	//delay
	uint32_t p = 2500;
 800056a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800056e:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000570:	e002      	b.n	8000578 <Display_Init+0x16>
		p--;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3b01      	subs	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f9      	bne.n	8000572 <Display_Init+0x10>

	Display_WriteCommand(oled , 0xAE); //display off
 800057e:	2302      	movs	r3, #2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	23ae      	movs	r3, #174	; 0xae
 8000584:	2200      	movs	r2, #0
 8000586:	213c      	movs	r1, #60	; 0x3c
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f000 fad5 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //Set Memory Addressing Mode
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2320      	movs	r3, #32
 8000594:	2200      	movs	r2, #0
 8000596:	213c      	movs	r1, #60	; 0x3c
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 facd 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800059e:	2302      	movs	r3, #2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2310      	movs	r3, #16
 80005a4:	2200      	movs	r2, #0
 80005a6:	213c      	movs	r1, #60	; 0x3c
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 fac5 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005ae:	2302      	movs	r3, #2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	23b0      	movs	r3, #176	; 0xb0
 80005b4:	2200      	movs	r2, #0
 80005b6:	213c      	movs	r1, #60	; 0x3c
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 fabd 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xC8); //Set COM Output Scan Direction
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	23c8      	movs	r3, #200	; 0xc8
 80005c4:	2200      	movs	r2, #0
 80005c6:	213c      	movs	r1, #60	; 0x3c
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 fab5 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //---set low column address
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	213c      	movs	r1, #60	; 0x3c
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 faad 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //---set high column address
 80005de:	2302      	movs	r3, #2
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2310      	movs	r3, #16
 80005e4:	2200      	movs	r2, #0
 80005e6:	213c      	movs	r1, #60	; 0x3c
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 faa5 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x40); //--set start line address
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2340      	movs	r3, #64	; 0x40
 80005f4:	2200      	movs	r2, #0
 80005f6:	213c      	movs	r1, #60	; 0x3c
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 fa9d 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x81); //--set contrast control register
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2381      	movs	r3, #129	; 0x81
 8000604:	2200      	movs	r2, #0
 8000606:	213c      	movs	r1, #60	; 0x3c
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 fa95 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xFF);
 800060e:	2302      	movs	r3, #2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	23ff      	movs	r3, #255	; 0xff
 8000614:	2200      	movs	r2, #0
 8000616:	213c      	movs	r1, #60	; 0x3c
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 fa8d 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA1); //--set segment re-map 0 to 127
 800061e:	2302      	movs	r3, #2
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	23a1      	movs	r3, #161	; 0xa1
 8000624:	2200      	movs	r2, #0
 8000626:	213c      	movs	r1, #60	; 0x3c
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 fa85 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA6); //--set normal display
 800062e:	2302      	movs	r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	23a6      	movs	r3, #166	; 0xa6
 8000634:	2200      	movs	r2, #0
 8000636:	213c      	movs	r1, #60	; 0x3c
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 fa7d 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA8); //--set multiplex ratio(1 to 64)
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	23a8      	movs	r3, #168	; 0xa8
 8000644:	2200      	movs	r2, #0
 8000646:	213c      	movs	r1, #60	; 0x3c
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 fa75 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x3F); //
 800064e:	2302      	movs	r3, #2
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	233f      	movs	r3, #63	; 0x3f
 8000654:	2200      	movs	r2, #0
 8000656:	213c      	movs	r1, #60	; 0x3c
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 fa6d 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800065e:	2302      	movs	r3, #2
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	23a4      	movs	r3, #164	; 0xa4
 8000664:	2200      	movs	r2, #0
 8000666:	213c      	movs	r1, #60	; 0x3c
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 fa65 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD3); //-set display offset
 800066e:	2302      	movs	r3, #2
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	23d3      	movs	r3, #211	; 0xd3
 8000674:	2200      	movs	r2, #0
 8000676:	213c      	movs	r1, #60	; 0x3c
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 fa5d 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //-not offset
 800067e:	2302      	movs	r3, #2
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2200      	movs	r2, #0
 8000686:	213c      	movs	r1, #60	; 0x3c
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 fa55 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD5); //--set display clock divide ratio/oscillator frequency
 800068e:	2302      	movs	r3, #2
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	23d5      	movs	r3, #213	; 0xd5
 8000694:	2200      	movs	r2, #0
 8000696:	213c      	movs	r1, #60	; 0x3c
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 fa4d 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xF0); //--set divide ratio
 800069e:	2302      	movs	r3, #2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	23f0      	movs	r3, #240	; 0xf0
 80006a4:	2200      	movs	r2, #0
 80006a6:	213c      	movs	r1, #60	; 0x3c
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 fa45 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD9); //--set pre-charge period
 80006ae:	2302      	movs	r3, #2
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	23d9      	movs	r3, #217	; 0xd9
 80006b4:	2200      	movs	r2, #0
 80006b6:	213c      	movs	r1, #60	; 0x3c
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 fa3d 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x22); //
 80006be:	2302      	movs	r3, #2
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2322      	movs	r3, #34	; 0x22
 80006c4:	2200      	movs	r2, #0
 80006c6:	213c      	movs	r1, #60	; 0x3c
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 fa35 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDA); //--set Com pins hardware configuration
 80006ce:	2302      	movs	r3, #2
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	23da      	movs	r3, #218	; 0xda
 80006d4:	2200      	movs	r2, #0
 80006d6:	213c      	movs	r1, #60	; 0x3c
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 fa2d 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x12);
 80006de:	2302      	movs	r3, #2
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2312      	movs	r3, #18
 80006e4:	2200      	movs	r2, #0
 80006e6:	213c      	movs	r1, #60	; 0x3c
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 fa25 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDB); //--set vcomh
 80006ee:	2302      	movs	r3, #2
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	23db      	movs	r3, #219	; 0xdb
 80006f4:	2200      	movs	r2, #0
 80006f6:	213c      	movs	r1, #60	; 0x3c
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f000 fa1d 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //0x20,0.77xVcc
 80006fe:	2302      	movs	r3, #2
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2320      	movs	r3, #32
 8000704:	2200      	movs	r2, #0
 8000706:	213c      	movs	r1, #60	; 0x3c
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 fa15 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x8D); //--set DC-DC enable
 800070e:	2302      	movs	r3, #2
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	238d      	movs	r3, #141	; 0x8d
 8000714:	2200      	movs	r2, #0
 8000716:	213c      	movs	r1, #60	; 0x3c
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 fa0d 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0x14); //
 800071e:	2302      	movs	r3, #2
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2314      	movs	r3, #20
 8000724:	2200      	movs	r2, #0
 8000726:	213c      	movs	r1, #60	; 0x3c
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 fa05 	bl	8000b38 <Display_I2C_Write>
	Display_WriteCommand(oled , 0xAF); //--turn on SSD1306 panel
 800072e:	2302      	movs	r3, #2
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	23af      	movs	r3, #175	; 0xaf
 8000734:	2200      	movs	r2, #0
 8000736:	213c      	movs	r1, #60	; 0x3c
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f9fd 	bl	8000b38 <Display_I2C_Write>


	Display_WriteCommand(oled ,Display_DEACTIVATE_SCROLL);
 800073e:	2302      	movs	r3, #2
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	232e      	movs	r3, #46	; 0x2e
 8000744:	2200      	movs	r2, #0
 8000746:	213c      	movs	r1, #60	; 0x3c
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f9f5 	bl	8000b38 <Display_I2C_Write>
	//Display_Fill(Display_COLOR_WHITE);	// Clear screen
	Display_Fill(oled ,Display_COLOR_BLACK);	// Clear screen
 800074e:	2100      	movs	r1, #0
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f84c 	bl	80007ee <Display_Fill>
	Display_UpdateScreen(oled);		// Update screen
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f811 	bl	800077e <Display_UpdateScreen>

	// Set default values
	oled->CurrentX = 0;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = 0;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

	// Initialized OK
	oled->Initialized = 1;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2201      	movs	r2, #1
 8000770:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409

	// Return OK
	return 1;
 8000774:	2301      	movs	r3, #1
}
 8000776:	4618      	mov	r0, r3
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <Display_UpdateScreen>:

void Display_UpdateScreen(OLED_t * oled) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af02      	add	r7, sp, #8
 8000784:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	e028      	b.n	80007de <Display_UpdateScreen+0x60>
		Display_WriteCommand(oled , 0xB0 + m);
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	3b50      	subs	r3, #80	; 0x50
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2202      	movs	r2, #2
 8000794:	9200      	str	r2, [sp, #0]
 8000796:	2200      	movs	r2, #0
 8000798:	213c      	movs	r1, #60	; 0x3c
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f9cc 	bl	8000b38 <Display_I2C_Write>
		Display_WriteCommand(oled , 0x00);
 80007a0:	2302      	movs	r3, #2
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2300      	movs	r3, #0
 80007a6:	2200      	movs	r2, #0
 80007a8:	213c      	movs	r1, #60	; 0x3c
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 f9c4 	bl	8000b38 <Display_I2C_Write>
		Display_WriteCommand(oled , 0x10);
 80007b0:	2302      	movs	r3, #2
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2310      	movs	r3, #16
 80007b6:	2200      	movs	r2, #0
 80007b8:	213c      	movs	r1, #60	; 0x3c
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f000 f9bc 	bl	8000b38 <Display_I2C_Write>

		Display_I2C_WriteMulti(oled , 0x3C, 0x40, &(oled->Display_Buffer[Display_WIDTH * m]), Display_WIDTH);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	01db      	lsls	r3, r3, #7
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4413      	add	r3, r2
 80007c8:	3304      	adds	r3, #4
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	9200      	str	r2, [sp, #0]
 80007ce:	2240      	movs	r2, #64	; 0x40
 80007d0:	213c      	movs	r1, #60	; 0x3c
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 f923 	bl	8000a1e <Display_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	3301      	adds	r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	d9d3      	bls.n	800078c <Display_UpdateScreen+0xe>

	}
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <Display_Fill>:


void Display_Fill(OLED_t * oled , Display_COLOR_t color) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	460b      	mov	r3, r1
 80007f8:	70fb      	strb	r3, [r7, #3]
	// Set memory, fill a block of memory with value
	memset(oled->Display_Buffer, (color == Display_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(oled->Display_Buffer));
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	1d18      	adds	r0, r3, #4
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <Display_Fill+0x1a>
 8000804:	2300      	movs	r3, #0
 8000806:	e000      	b.n	800080a <Display_Fill+0x1c>
 8000808:	23ff      	movs	r3, #255	; 0xff
 800080a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080e:	4619      	mov	r1, r3
 8000810:	f001 f8d0 	bl	80019b4 <memset>
  //memset(starting address, value to be filled, number of bytes to be filled)
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <Display_DrawPixel>:


void Display_DrawPixel(OLED_t * oled ,uint16_t x, uint16_t y, Display_COLOR_t color) {
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	4608      	mov	r0, r1
 8000826:	4611      	mov	r1, r2
 8000828:	461a      	mov	r2, r3
 800082a:	4603      	mov	r3, r0
 800082c:	817b      	strh	r3, [r7, #10]
 800082e:	460b      	mov	r3, r1
 8000830:	813b      	strh	r3, [r7, #8]
 8000832:	4613      	mov	r3, r2
 8000834:	71fb      	strb	r3, [r7, #7]

	if (x >= Display_WIDTH || y >= Display_HEIGHT)
 8000836:	897b      	ldrh	r3, [r7, #10]
 8000838:	2b7f      	cmp	r3, #127	; 0x7f
 800083a:	d84f      	bhi.n	80008dc <Display_DrawPixel+0xc0>
 800083c:	893b      	ldrh	r3, [r7, #8]
 800083e:	2b3f      	cmp	r3, #63	; 0x3f
 8000840:	d84c      	bhi.n	80008dc <Display_DrawPixel+0xc0>
		// Error
		return;
	}

	// Check if pixels are inverted
	if (oled->Inverted) {
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8000848:	2b00      	cmp	r3, #0
 800084a:	d006      	beq.n	800085a <Display_DrawPixel+0x3e>
		color = (Display_COLOR_t)!color;
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b00      	cmp	r3, #0
 8000850:	bf0c      	ite	eq
 8000852:	2301      	moveq	r3, #1
 8000854:	2300      	movne	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	71fb      	strb	r3, [r7, #7]
	}

	// Set color
	if (color == Display_COLOR_WHITE) {
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d11d      	bne.n	800089c <Display_DrawPixel+0x80>
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] |= 1 << (y % 8);
 8000860:	897a      	ldrh	r2, [r7, #10]
 8000862:	893b      	ldrh	r3, [r7, #8]
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	b298      	uxth	r0, r3
 8000868:	4603      	mov	r3, r0
 800086a:	01db      	lsls	r3, r3, #7
 800086c:	4413      	add	r3, r2
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	4413      	add	r3, r2
 8000872:	791b      	ldrb	r3, [r3, #4]
 8000874:	b25a      	sxtb	r2, r3
 8000876:	893b      	ldrh	r3, [r7, #8]
 8000878:	f003 0307 	and.w	r3, r3, #7
 800087c:	2101      	movs	r1, #1
 800087e:	fa01 f303 	lsl.w	r3, r1, r3
 8000882:	b25b      	sxtb	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	b259      	sxtb	r1, r3
 8000888:	897a      	ldrh	r2, [r7, #10]
 800088a:	4603      	mov	r3, r0
 800088c:	01db      	lsls	r3, r3, #7
 800088e:	4413      	add	r3, r2
 8000890:	b2c9      	uxtb	r1, r1
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	4413      	add	r3, r2
 8000896:	460a      	mov	r2, r1
 8000898:	711a      	strb	r2, [r3, #4]
 800089a:	e020      	b.n	80008de <Display_DrawPixel+0xc2>
	} else {
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] &= ~(1 << (y % 8));
 800089c:	897a      	ldrh	r2, [r7, #10]
 800089e:	893b      	ldrh	r3, [r7, #8]
 80008a0:	08db      	lsrs	r3, r3, #3
 80008a2:	b298      	uxth	r0, r3
 80008a4:	4603      	mov	r3, r0
 80008a6:	01db      	lsls	r3, r3, #7
 80008a8:	4413      	add	r3, r2
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4413      	add	r3, r2
 80008ae:	791b      	ldrb	r3, [r3, #4]
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	893b      	ldrh	r3, [r7, #8]
 80008b4:	f003 0307 	and.w	r3, r3, #7
 80008b8:	2101      	movs	r1, #1
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	4013      	ands	r3, r2
 80008c6:	b259      	sxtb	r1, r3
 80008c8:	897a      	ldrh	r2, [r7, #10]
 80008ca:	4603      	mov	r3, r0
 80008cc:	01db      	lsls	r3, r3, #7
 80008ce:	4413      	add	r3, r2
 80008d0:	b2c9      	uxtb	r1, r1
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	4413      	add	r3, r2
 80008d6:	460a      	mov	r2, r1
 80008d8:	711a      	strb	r2, [r3, #4]
 80008da:	e000      	b.n	80008de <Display_DrawPixel+0xc2>
		return;
 80008dc:	bf00      	nop
	}
}
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <Display_GotoXY>:


void Display_GotoXY(OLED_t * oled ,uint16_t x, uint16_t y) {
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	460b      	mov	r3, r1
 80008f0:	807b      	strh	r3, [r7, #2]
 80008f2:	4613      	mov	r3, r2
 80008f4:	803b      	strh	r3, [r7, #0]
	// Set write pointers
	oled->CurrentX = x;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	887a      	ldrh	r2, [r7, #2]
 80008fa:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = y;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	883a      	ldrh	r2, [r7, #0]
 8000902:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <Display_Putc>:


char Display_Putc(OLED_t * oled ,char ch, FontDef_t *Font, Display_COLOR_t color) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	461a      	mov	r2, r3
 800091c:	460b      	mov	r3, r1
 800091e:	72fb      	strb	r3, [r7, #11]
 8000920:	4613      	mov	r3, r2
 8000922:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	// Check available space in LCD
	if (
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4413      	add	r3, r2
	if (
 8000932:	2b7f      	cmp	r3, #127	; 0x7f
 8000934:	dc08      	bgt.n	8000948 <Display_Putc+0x38>
		Display_HEIGHT <= (oled->CurrentY + Font->FontHeight)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	785b      	ldrb	r3, [r3, #1]
 8000942:	4413      	add	r3, r2
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 8000944:	2b3f      	cmp	r3, #63	; 0x3f
 8000946:	dd01      	ble.n	800094c <Display_Putc+0x3c>
	) {
		// Error
		return 0;
 8000948:	2300      	movs	r3, #0
 800094a:	e064      	b.n	8000a16 <Display_Putc+0x106>
	}

	// Go through font
	for (i = 0; i < Font->FontHeight; i++) {
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	e04f      	b.n	80009f2 <Display_Putc+0xe2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	685a      	ldr	r2, [r3, #4]
 8000956:	7afb      	ldrb	r3, [r7, #11]
 8000958:	3b20      	subs	r3, #32
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	7849      	ldrb	r1, [r1, #1]
 800095e:	fb01 f303 	mul.w	r3, r1, r3
 8000962:	4619      	mov	r1, r3
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	440b      	add	r3, r1
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	4413      	add	r3, r2
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	e034      	b.n	80009e0 <Display_Putc+0xd0>
			if ((b << j) & 0x8000) {
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d012      	beq.n	80009ac <Display_Putc+0x9c>
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t) color);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	b29b      	uxth	r3, r3
 8000990:	4413      	add	r3, r2
 8000992:	b299      	uxth	r1, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	b29b      	uxth	r3, r3
 800099e:	4413      	add	r3, r2
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	7abb      	ldrb	r3, [r7, #10]
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f7ff ff39 	bl	800081c <Display_DrawPixel>
 80009aa:	e016      	b.n	80009da <Display_Putc+0xca>
			} else {
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t)!color);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	b299      	uxth	r1, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	4413      	add	r3, r2
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	7abb      	ldrb	r3, [r7, #10]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf0c      	ite	eq
 80009ce:	2301      	moveq	r3, #1
 80009d0:	2300      	movne	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f7ff ff21 	bl	800081c <Display_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	3301      	adds	r3, #1
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d3c4      	bcc.n	8000976 <Display_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	3301      	adds	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	785b      	ldrb	r3, [r3, #1]
 80009f6:	461a      	mov	r2, r3
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d3a9      	bcc.n	8000952 <Display_Putc+0x42>
			}
		}
	}

	// Increase pointer
	oled->CurrentX += Font->FontWidth;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

	// Return character written
	return ch;
 8000a14:	7afb      	ldrb	r3, [r7, #11]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <Display_I2C_WriteMulti>:




void Display_I2C_WriteMulti(OLED_t * oled,uint8_t address, uint8_t dataRegister, uint8_t *data , uint16_t numBytes)	//data is a pointer
{
 8000a1e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	72fb      	strb	r3, [r7, #11]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	72bb      	strb	r3, [r7, #10]
 8000a32:	466b      	mov	r3, sp
 8000a34:	4618      	mov	r0, r3
	uint8_t i;
	uint8_t j;
	uint8_t dt[numBytes];		//necessary for multi Write
 8000a36:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8000a38:	460b      	mov	r3, r1
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	b28b      	uxth	r3, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	4698      	mov	r8, r3
 8000a44:	4691      	mov	r9, r2
 8000a46:	f04f 0200 	mov.w	r2, #0
 8000a4a:	f04f 0300 	mov.w	r3, #0
 8000a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a5a:	b28b      	uxth	r3, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	461c      	mov	r4, r3
 8000a60:	4615      	mov	r5, r2
 8000a62:	f04f 0200 	mov.w	r2, #0
 8000a66:	f04f 0300 	mov.w	r3, #0
 8000a6a:	00eb      	lsls	r3, r5, #3
 8000a6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a70:	00e2      	lsls	r2, r4, #3
 8000a72:	460b      	mov	r3, r1
 8000a74:	3307      	adds	r3, #7
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a7e:	466b      	mov	r3, sp
 8000a80:	3300      	adds	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
	I2C_TypeDef *  i2c = oled->dev;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	613b      	str	r3, [r7, #16]
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8000a8a:	7afb      	ldrb	r3, [r7, #11]
 8000a8c:	005a      	lsls	r2, r3, #1
 8000a8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a90:	041b      	lsls	r3, r3, #16
 8000a92:	4313      	orrs	r3, r2
 8000a94:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000aa8:	e007      	b.n	8000aba <Display_I2C_WriteMulti+0x9c>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <Display_I2C_WriteMulti+0x9c>
 8000ab6:	4685      	mov	sp, r0
 8000ab8:	e039      	b.n	8000b2e <Display_I2C_WriteMulti+0x110>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f1      	beq.n	8000aaa <Display_I2C_WriteMulti+0x8c>
			return;}}

	dt[0] = dataRegister;
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	7aba      	ldrb	r2, [r7, #10]
 8000aca:	701a      	strb	r2, [r3, #0]
	for(i=0; i<numBytes; i++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	77bb      	strb	r3, [r7, #30]
 8000ad0:	e00a      	b.n	8000ae8 <Display_I2C_WriteMulti+0xca>
	{
	dt[i+1] = data[i];	//necessary for multi Write
 8000ad2:	7fbb      	ldrb	r3, [r7, #30]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	441a      	add	r2, r3
 8000ad8:	7fbb      	ldrb	r3, [r7, #30]
 8000ada:	3301      	adds	r3, #1
 8000adc:	7811      	ldrb	r1, [r2, #0]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<numBytes; i++)
 8000ae2:	7fbb      	ldrb	r3, [r7, #30]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	77bb      	strb	r3, [r7, #30]
 8000ae8:	7fbb      	ldrb	r3, [r7, #30]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d8ef      	bhi.n	8000ad2 <Display_I2C_WriteMulti+0xb4>
	}

	for(j=0; j <= (numBytes-1); j++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	77fb      	strb	r3, [r7, #31]
 8000af6:	e014      	b.n	8000b22 <Display_I2C_WriteMulti+0x104>
	{
		i2c->TXDR = dt[j];
 8000af8:	7ffb      	ldrb	r3, [r7, #31]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	5cd3      	ldrb	r3, [r2, r3]
 8000afe:	461a      	mov	r2, r3
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000b04:	7ffa      	ldrb	r2, [r7, #31]
 8000b06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	da06      	bge.n	8000b1c <Display_I2C_WriteMulti+0xfe>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}		//ggf TXIS mit TXE ergänzen
 8000b0e:	bf00      	nop
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f9      	beq.n	8000b10 <Display_I2C_WriteMulti+0xf2>
	for(j=0; j <= (numBytes-1); j++)
 8000b1c:	7ffb      	ldrb	r3, [r7, #31]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	77fb      	strb	r3, [r7, #31]
 8000b22:	7ffb      	ldrb	r3, [r7, #31]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8e5      	bhi.n	8000af8 <Display_I2C_WriteMulti+0xda>
 8000b2c:	4685      	mov	sp, r0
		}
	}
}
 8000b2e:	3724      	adds	r7, #36	; 0x24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000b36:	4770      	bx	lr

08000b38 <Display_I2C_Write>:


void Display_I2C_Write(OLED_t * oled, uint8_t address, uint8_t dataRegister, uint8_t data , uint8_t numBytes)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	4608      	mov	r0, r1
 8000b42:	4611      	mov	r1, r2
 8000b44:	461a      	mov	r2, r3
 8000b46:	4603      	mov	r3, r0
 8000b48:	70fb      	strb	r3, [r7, #3]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	70bb      	strb	r3, [r7, #2]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	707b      	strb	r3, [r7, #1]
	uint8_t j;
	uint8_t dt[2];
	I2C_TypeDef *  i2c = oled->dev;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	613b      	str	r3, [r7, #16]
	dt[0] = dataRegister;
 8000b58:	78bb      	ldrb	r3, [r7, #2]
 8000b5a:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b5c:	787b      	ldrb	r3, [r7, #1]
 8000b5e:	737b      	strb	r3, [r7, #13]

	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	005a      	lsls	r2, r3, #1
 8000b64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b68:	041b      	lsls	r3, r3, #16
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000b80:	e005      	b.n	8000b8e <Display_I2C_Write+0x56>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d126      	bne.n	8000bdc <Display_I2C_Write+0xa4>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f3      	beq.n	8000b82 <Display_I2C_Write+0x4a>
			return;}}

	for(j=0; j <= (numBytes-1); j++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	75fb      	strb	r3, [r7, #23]
 8000b9e:	e017      	b.n	8000bd0 <Display_I2C_Write+0x98>
	{
		i2c->TXDR = dt[j];
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	3318      	adds	r3, #24
 8000ba4:	443b      	add	r3, r7
 8000ba6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000baa:	461a      	mov	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000bb0:	7dfa      	ldrb	r2, [r7, #23]
 8000bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	da06      	bge.n	8000bca <Display_I2C_Write+0x92>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}
 8000bbc:	bf00      	nop
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f9      	beq.n	8000bbe <Display_I2C_Write+0x86>
	for(j=0; j <= (numBytes-1); j++)
 8000bca:	7dfb      	ldrb	r3, [r7, #23]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	75fb      	strb	r3, [r7, #23]
 8000bd0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d8e2      	bhi.n	8000ba0 <Display_I2C_Write+0x68>
 8000bda:	e000      	b.n	8000bde <Display_I2C_Write+0xa6>
			return;}}
 8000bdc:	bf00      	nop
		}
	}
}
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
	...

08000be8 <Display_printTime>:


void Display_printTime(OLED_t *oled ,uint8_t *rtc_bufferCalculated, FontDef_t *Font11x18)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	//seconds
	Display_GotoXY(oled ,0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fe74 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[5]+48) , &Font_11x18, 1);
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3305      	adds	r3, #5
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	3330      	adds	r3, #48	; 0x30
 8000c06:	b2d9      	uxtb	r1, r3
 8000c08:	2301      	movs	r3, #1
 8000c0a:	4a78      	ldr	r2, [pc, #480]	; (8000dec <Display_printTime+0x204>)
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f7ff fe7f 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,11, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	210b      	movs	r1, #11
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f7ff fe65 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[4]+48) , &Font_11x18, 1);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	3304      	adds	r3, #4
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	3330      	adds	r3, #48	; 0x30
 8000c24:	b2d9      	uxtb	r1, r3
 8000c26:	2301      	movs	r3, #1
 8000c28:	4a70      	ldr	r2, [pc, #448]	; (8000dec <Display_printTime+0x204>)
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff fe70 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,22, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2116      	movs	r1, #22
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff fe56 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,':' , &Font_11x18, 1);
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	4a6b      	ldr	r2, [pc, #428]	; (8000dec <Display_printTime+0x204>)
 8000c3e:	213a      	movs	r1, #58	; 0x3a
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff fe65 	bl	8000910 <Display_Putc>
	//minutes
	Display_GotoXY(oled ,33, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2121      	movs	r1, #33	; 0x21
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff fe4b 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[3]+48) , &Font_11x18, 1);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	3303      	adds	r3, #3
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2d9      	uxtb	r1, r3
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	4a63      	ldr	r2, [pc, #396]	; (8000dec <Display_printTime+0x204>)
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f7ff fe56 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,44, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	212c      	movs	r1, #44	; 0x2c
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f7ff fe3c 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[2]+48) , &Font_11x18, 1);
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	3302      	adds	r3, #2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	3330      	adds	r3, #48	; 0x30
 8000c76:	b2d9      	uxtb	r1, r3
 8000c78:	2301      	movs	r3, #1
 8000c7a:	4a5c      	ldr	r2, [pc, #368]	; (8000dec <Display_printTime+0x204>)
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f7ff fe47 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,55, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2137      	movs	r1, #55	; 0x37
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff fe2d 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,':' , &Font_11x18, 1);
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	4a57      	ldr	r2, [pc, #348]	; (8000dec <Display_printTime+0x204>)
 8000c90:	213a      	movs	r1, #58	; 0x3a
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff fe3c 	bl	8000910 <Display_Putc>
	//hours
	Display_GotoXY(oled ,66, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2142      	movs	r1, #66	; 0x42
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f7ff fe22 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[1]+48) , &Font_11x18, 1);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	3330      	adds	r3, #48	; 0x30
 8000caa:	b2d9      	uxtb	r1, r3
 8000cac:	2301      	movs	r3, #1
 8000cae:	4a4f      	ldr	r2, [pc, #316]	; (8000dec <Display_printTime+0x204>)
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff fe2d 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,77, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	214d      	movs	r1, #77	; 0x4d
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f7ff fe13 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[0]+48) , &Font_11x18, 1);
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	3330      	adds	r3, #48	; 0x30
 8000cc6:	b2d9      	uxtb	r1, r3
 8000cc8:	2301      	movs	r3, #1
 8000cca:	4a48      	ldr	r2, [pc, #288]	; (8000dec <Display_printTime+0x204>)
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f7ff fe1f 	bl	8000910 <Display_Putc>
	//date
	Display_GotoXY(oled ,0, 18);
 8000cd2:	2212      	movs	r2, #18
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff fe05 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[8]+48) , &Font_11x18, 1);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	3330      	adds	r3, #48	; 0x30
 8000ce4:	b2d9      	uxtb	r1, r3
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	4a40      	ldr	r2, [pc, #256]	; (8000dec <Display_printTime+0x204>)
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff fe10 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,11, 18);
 8000cf0:	2212      	movs	r2, #18
 8000cf2:	210b      	movs	r1, #11
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f7ff fdf6 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[7]+48) , &Font_11x18, 1);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3307      	adds	r3, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3330      	adds	r3, #48	; 0x30
 8000d02:	b2d9      	uxtb	r1, r3
 8000d04:	2301      	movs	r3, #1
 8000d06:	4a39      	ldr	r2, [pc, #228]	; (8000dec <Display_printTime+0x204>)
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fe01 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,22, 18);
 8000d0e:	2212      	movs	r2, #18
 8000d10:	2116      	movs	r1, #22
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f7ff fde7 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,'.' , &Font_11x18, 1);
 8000d18:	2301      	movs	r3, #1
 8000d1a:	4a34      	ldr	r2, [pc, #208]	; (8000dec <Display_printTime+0x204>)
 8000d1c:	212e      	movs	r1, #46	; 0x2e
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f7ff fdf6 	bl	8000910 <Display_Putc>
	//month
	Display_GotoXY(oled ,33, 18);
 8000d24:	2212      	movs	r2, #18
 8000d26:	2121      	movs	r1, #33	; 0x21
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f7ff fddc 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[10]+48) , &Font_11x18, 1);
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	330a      	adds	r3, #10
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	3330      	adds	r3, #48	; 0x30
 8000d36:	b2d9      	uxtb	r1, r3
 8000d38:	2301      	movs	r3, #1
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <Display_printTime+0x204>)
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff fde7 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,44, 18);
 8000d42:	2212      	movs	r2, #18
 8000d44:	212c      	movs	r1, #44	; 0x2c
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f7ff fdcd 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[9]+48) , &Font_11x18, 1);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	3309      	adds	r3, #9
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	3330      	adds	r3, #48	; 0x30
 8000d54:	b2d9      	uxtb	r1, r3
 8000d56:	2301      	movs	r3, #1
 8000d58:	4a24      	ldr	r2, [pc, #144]	; (8000dec <Display_printTime+0x204>)
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f7ff fdd8 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,55, 18);
 8000d60:	2212      	movs	r2, #18
 8000d62:	2137      	movs	r1, #55	; 0x37
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff fdbe 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,'.' , &Font_11x18, 1);
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <Display_printTime+0x204>)
 8000d6e:	212e      	movs	r1, #46	; 0x2e
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f7ff fdcd 	bl	8000910 <Display_Putc>
	//year (2000-2099)
	Display_GotoXY(oled ,66, 18);
 8000d76:	2212      	movs	r2, #18
 8000d78:	2142      	movs	r1, #66	; 0x42
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff fdb3 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,('2') , &Font_11x18, 1);
 8000d80:	2301      	movs	r3, #1
 8000d82:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <Display_printTime+0x204>)
 8000d84:	2132      	movs	r1, #50	; 0x32
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f7ff fdc2 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,77, 18);
 8000d8c:	2212      	movs	r2, #18
 8000d8e:	214d      	movs	r1, #77	; 0x4d
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f7ff fda8 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,('0') , &Font_11x18, 1);
 8000d96:	2301      	movs	r3, #1
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <Display_printTime+0x204>)
 8000d9a:	2130      	movs	r1, #48	; 0x30
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fdb7 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,88, 18);
 8000da2:	2212      	movs	r2, #18
 8000da4:	2158      	movs	r1, #88	; 0x58
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f7ff fd9d 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[12]+48) , &Font_11x18, 1);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	330c      	adds	r3, #12
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	3330      	adds	r3, #48	; 0x30
 8000db4:	b2d9      	uxtb	r1, r3
 8000db6:	2301      	movs	r3, #1
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <Display_printTime+0x204>)
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f7ff fda8 	bl	8000910 <Display_Putc>
	Display_GotoXY(oled ,99, 18);
 8000dc0:	2212      	movs	r2, #18
 8000dc2:	2163      	movs	r1, #99	; 0x63
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff fd8e 	bl	80008e6 <Display_GotoXY>
	Display_Putc(oled ,(rtc_bufferCalculated[11]+48) , &Font_11x18, 1);
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	330b      	adds	r3, #11
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	3330      	adds	r3, #48	; 0x30
 8000dd2:	b2d9      	uxtb	r1, r3
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <Display_printTime+0x204>)
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f7ff fd99 	bl	8000910 <Display_Putc>

	Display_UpdateScreen(oled );
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff fccd 	bl	800077e <Display_UpdateScreen>

}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	2000000c 	.word	0x2000000c

08000df0 <gpio_clock_enable>:
 * After each device reset, all peripheral clocks are disabled (except for the SRAM and FLITF).
Before using a peripheral user has to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.  s.50
 */
void gpio_clock_enable(GPIO_TypeDef * Port)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	if(Port == GPIOA)        //  Bit 17 IOPAEN: I/O port A clock enable
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dfe:	d106      	bne.n	8000e0e <gpio_clock_enable+0x1e>
	{
		RCC->AHBENR |= (1 << GPIOA_CLOCK_ENABLE_BIT) ;
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	4a2a      	ldr	r2, [pc, #168]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0a:	6153      	str	r3, [r2, #20]
	}
	*/
	else{

	}
}
 8000e0c:	e04b      	b.n	8000ea6 <gpio_clock_enable+0xb6>
	else if(Port == GPIOB)  //    Bit 18 IOPBEN: I/O port B  clock enable
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <gpio_clock_enable+0xc4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d106      	bne.n	8000e24 <gpio_clock_enable+0x34>
		RCC->AHBENR |= (1 << GPIOB_CLOCK_ENABLE_BIT) ;
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6153      	str	r3, [r2, #20]
}
 8000e22:	e040      	b.n	8000ea6 <gpio_clock_enable+0xb6>
	else if(Port == GPIOC)   //  Bit 19 IOPCEN: I/O port C clock enable
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a24      	ldr	r2, [pc, #144]	; (8000eb8 <gpio_clock_enable+0xc8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d106      	bne.n	8000e3a <gpio_clock_enable+0x4a>
		RCC->AHBENR |= (1 << GPIOC_CLOCK_ENABLE_BIT) ;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e36:	6153      	str	r3, [r2, #20]
}
 8000e38:	e035      	b.n	8000ea6 <gpio_clock_enable+0xb6>
	else if(Port == GPIOD)    //  Bit 20 IOPDEN: I/O port D clock enable
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a1f      	ldr	r2, [pc, #124]	; (8000ebc <gpio_clock_enable+0xcc>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d106      	bne.n	8000e50 <gpio_clock_enable+0x60>
		RCC->AHBENR |= (1 << GPIOD_CLOCK_ENABLE_BIT) ;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e4c:	6153      	str	r3, [r2, #20]
}
 8000e4e:	e02a      	b.n	8000ea6 <gpio_clock_enable+0xb6>
	else if(Port == GPIOE)    //  Bit 21 IOPEEN: I/O port E clock enable
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <gpio_clock_enable+0xd0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d106      	bne.n	8000e66 <gpio_clock_enable+0x76>
		RCC->AHBENR |= (1 << GPIOE_CLOCK_ENABLE_BIT) ;
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e62:	6153      	str	r3, [r2, #20]
}
 8000e64:	e01f      	b.n	8000ea6 <gpio_clock_enable+0xb6>
	else if(Port == GPIOF)   //  Bit 22 IOPFEN: I/O port F clock enable
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <gpio_clock_enable+0xd4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d106      	bne.n	8000e7c <gpio_clock_enable+0x8c>
		RCC->AHBENR |= (1 << GPIOF_CLOCK_ENABLE_BIT) ;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e78:	6153      	str	r3, [r2, #20]
}
 8000e7a:	e014      	b.n	8000ea6 <gpio_clock_enable+0xb6>
	else if(Port == GPIOG)    //  Bit 23 IOPGEN: I/O port G clock enable
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <gpio_clock_enable+0xd8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d106      	bne.n	8000e92 <gpio_clock_enable+0xa2>
		RCC->AHBENR |= (1 << GPIOG_CLOCK_ENABLE_BIT) ;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e8e:	6153      	str	r3, [r2, #20]
}
 8000e90:	e009      	b.n	8000ea6 <gpio_clock_enable+0xb6>
	else if(Port == GPIOH)    //  Bit 16 IOPHEN: I/O port H clock enable
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <gpio_clock_enable+0xdc>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d105      	bne.n	8000ea6 <gpio_clock_enable+0xb6>
		RCC->AHBENR |= (1 << GPIOH_CLOCK_ENABLE_BIT) ;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <gpio_clock_enable+0xc0>)
 8000ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea4:	6153      	str	r3, [r2, #20]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000400 	.word	0x48000400
 8000eb8:	48000800 	.word	0x48000800
 8000ebc:	48000c00 	.word	0x48000c00
 8000ec0:	48001000 	.word	0x48001000
 8000ec4:	48001400 	.word	0x48001400
 8000ec8:	48001800 	.word	0x48001800
 8000ecc:	48001c00 	.word	0x48001c00

08000ed0 <reset_io>:

void reset_io(GPIO_TypeDef * Port ) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	Port->MODER   = 0x00 ;             // set  pin Mode
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
	Port->OTYPER  = 0x00 ;             //set output type OD/PP
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR = 0x00 ;             //set output speed
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  = 0x00 ;             //set pin Pull
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <gpio_config_pin>:

void gpio_config_pin(GPIO_TypeDef * Port , int Pin , GPIO_Mode_t Mode ,
					   GPIO_Speed_t speed ,GPIO_Pull_t pull, GPIO_out_type_t otype)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b085      	sub	sp, #20
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	4611      	mov	r1, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	460b      	mov	r3, r1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	71bb      	strb	r3, [r7, #6]
	Port->MODER   |= (Mode  << 2 * Pin) ; // set  pin Mode
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	79f9      	ldrb	r1, [r7, #7]
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	0052      	lsls	r2, r2, #1
 8000f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	601a      	str	r2, [r3, #0]
	Port->OTYPER  |= (otype << Pin)     ; //set output type OD/PP
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	7f39      	ldrb	r1, [r7, #28]
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	431a      	orrs	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR |= (speed << 2 * Pin) ; //set output speed
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	79b9      	ldrb	r1, [r7, #6]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	0052      	lsls	r2, r2, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	431a      	orrs	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  |= (pull  << 2 * Pin) ; //set pin Pull
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	7e39      	ldrb	r1, [r7, #24]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	0052      	lsls	r2, r2, #1
 8000f54:	fa01 f202 	lsl.w	r2, r1, r2
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	60da      	str	r2, [r3, #12]
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <gpio_set_pinState>:

void gpio_set_pinState(GPIO_TypeDef * Port , int Pin , Pin_State State)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	4613      	mov	r3, r2
 8000f74:	71fb      	strb	r3, [r7, #7]
	//assert pin < 16
	if(State == HIGH)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <gpio_set_pinState+0x28>
	{
		Port->ODR |= (1 << Pin) ;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	2101      	movs	r1, #1
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	615a      	str	r2, [r3, #20]
	}
	else {
		Port->ODR &= ~(1 << Pin) ;
	}
}
 8000f8e:	e009      	b.n	8000fa4 <gpio_set_pinState+0x3c>
		Port->ODR &= ~(1 << Pin) ;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	2101      	movs	r1, #1
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	43d2      	mvns	r2, r2
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	615a      	str	r2, [r3, #20]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
	...

08000fb0 <I2C_Init>:

/*
 * TESTED
 */
void I2C_Init(I2C_TypeDef * i2c)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]


 	 if( i2c == I2C1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a6e      	ldr	r2, [pc, #440]	; (8001174 <I2C_Init+0x1c4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d118      	bne.n	8000ff2 <I2C_Init+0x42>
 	 {
 		// PB6  I2C1_SCL, PB7   I2C1_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000fc0:	4b6d      	ldr	r3, [pc, #436]	; (8001178 <I2C_Init+0x1c8>)
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	4a6c      	ldr	r2, [pc, #432]	; (8001178 <I2C_Init+0x1c8>)
 8000fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fca:	6153      	str	r3, [r2, #20]
 		GPIOB->MODER |= (0b10 << GPIO_MODER_MODER6_Pos) |
 8000fcc:	4b6b      	ldr	r3, [pc, #428]	; (800117c <I2C_Init+0x1cc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a6a      	ldr	r2, [pc, #424]	; (800117c <I2C_Init+0x1cc>)
 8000fd2:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000fd6:	6013      	str	r3, [r2, #0]
		   (0b10 << GPIO_MODER_MODER7_Pos); // PB6, PB7: Alternate function
		 GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFRL6_Pos) |
 8000fd8:	4b68      	ldr	r3, [pc, #416]	; (800117c <I2C_Init+0x1cc>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4a67      	ldr	r2, [pc, #412]	; (800117c <I2C_Init+0x1cc>)
 8000fde:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000fe2:	6213      	str	r3, [r2, #32]
		   (4 << GPIO_AFRL_AFRL7_Pos);         // 0100: AF4

		 RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //i2c clock enable
 8000fe4:	4b64      	ldr	r3, [pc, #400]	; (8001178 <I2C_Init+0x1c8>)
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	4a63      	ldr	r2, [pc, #396]	; (8001178 <I2C_Init+0x1c8>)
 8000fea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fee:	61d3      	str	r3, [r2, #28]
 8000ff0:	e0ac      	b.n	800114c <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C2 )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a62      	ldr	r2, [pc, #392]	; (8001180 <I2C_Init+0x1d0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d14c      	bne.n	8001094 <I2C_Init+0xe4>
 	 {
 		//PA9 I2C2_SCL , PA10 I2C2_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000ffa:	4b5f      	ldr	r3, [pc, #380]	; (8001178 <I2C_Init+0x1c8>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a5e      	ldr	r2, [pc, #376]	; (8001178 <I2C_Init+0x1c8>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	6153      	str	r3, [r2, #20]
 		GPIOA->MODER |= (2 << 18) ;// PA9 10: Alternate function mode
 8001006:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001014:	6013      	str	r3, [r2, #0]
 		GPIOA->MODER |= (2 << 20) ;//PA10 10: Alternate function mode
 8001016:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001024:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER |= (1 << 9 ) ;//PA9  GPIO port output type register 1: Output open-drain
 8001026:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001034:	6053      	str	r3, [r2, #4]
 		GPIOA->OTYPER |= (1 << 10) ;//PA10 Oepn Drain
 8001036:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001044:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 18) | (3 << 20) ; //PA9,PA10  GPIO port output speed register 11: High speed
 8001046:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001050:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8001054:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR  |= (1<<18) | (1<<20) ;//PA9 ,PA10 GPIO port pull-up/pull-down register 01: Pull-up
 8001056:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001060:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8001064:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1] |= ( 4 << 4 );   //select GPIO alternate function high register  PA9  0100: AF4
 8001066:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001074:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOA->AFR[1] |= (4 << 8);   //select GPIO alternate function high register  PA10   0100: AF4
 8001076:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001084:	6253      	str	r3, [r2, #36]	; 0x24

 		RCC->APB1ENR |=RCC_APB1ENR_I2C2EN ; //i2c clock enable
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <I2C_Init+0x1c8>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a3b      	ldr	r2, [pc, #236]	; (8001178 <I2C_Init+0x1c8>)
 800108c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	e05b      	b.n	800114c <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C3 )
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a3b      	ldr	r2, [pc, #236]	; (8001184 <I2C_Init+0x1d4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d157      	bne.n	800114c <I2C_Init+0x19c>
 	 {
 		//PA8 I2C3_SCL , PB5 I2C3_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <I2C_Init+0x1c8>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	4a35      	ldr	r2, [pc, #212]	; (8001178 <I2C_Init+0x1c8>)
 80010a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a6:	6153      	str	r3, [r2, #20]
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <I2C_Init+0x1c8>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	4a32      	ldr	r2, [pc, #200]	; (8001178 <I2C_Init+0x1c8>)
 80010ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b2:	6153      	str	r3, [r2, #20]

 		GPIOA->MODER   |= (2 << 16) ;// PA8 ALF
 80010b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c2:	6013      	str	r3, [r2, #0]
 		GPIOB->MODER   |= (2 << 10) ;//PB5 ALF
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <I2C_Init+0x1cc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a2c      	ldr	r2, [pc, #176]	; (800117c <I2C_Init+0x1cc>)
 80010ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ce:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER  |= (1 << 8 ) ;//PA8 Open Drain
 80010d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	6053      	str	r3, [r2, #4]
 		GPIOB->OTYPER  |= (1 << 5 ) ;//PB5 Oepn Drain
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <I2C_Init+0x1cc>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	4a25      	ldr	r2, [pc, #148]	; (800117c <I2C_Init+0x1cc>)
 80010e6:	f043 0320 	orr.w	r3, r3, #32
 80010ea:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 16) ;//PA8 High Speed
 80010ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010f6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80010fa:	6093      	str	r3, [r2, #8]
 		GPIOB->OSPEEDR |= (3 << 10) ; //PB5 High Speed
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <I2C_Init+0x1cc>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a1e      	ldr	r2, [pc, #120]	; (800117c <I2C_Init+0x1cc>)
 8001102:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001106:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR   |= (1 << 16) ;//PA8 PULL up
 8001108:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001116:	60d3      	str	r3, [r2, #12]
 		GPIOB->PUPDR   |= (1 << 10) ;//PB5 PULL up
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <I2C_Init+0x1cc>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <I2C_Init+0x1cc>)
 800111e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001122:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1]  |= ( 3 << 0 );//select Alf PA8    0011: AF3
 8001124:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800112e:	f043 0303 	orr.w	r3, r3, #3
 8001132:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOB->AFR[0]  |= (8 << 20) ;//select Alf PB5     1000: AF8
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <I2C_Init+0x1cc>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4a10      	ldr	r2, [pc, #64]	; (800117c <I2C_Init+0x1cc>)
 800113a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800113e:	6213      	str	r3, [r2, #32]

 		RCC->APB1ENR |=RCC_APB1ENR_I2C3EN ; //i2c clock enable
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <I2C_Init+0x1c8>)
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <I2C_Init+0x1c8>)
 8001146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800114a:	61d3      	str	r3, [r2, #28]
	 * Enabling and disabling the peripheral
	 * The I2C peripheral clock must be configured and enabled in the clock controller.
	 * Then the I2C can be enabled by setting the PE bit in the I2C_CR1 register.
	 * When the I2C is disabled (PE=0), the I2C performs a software reset.
	 */
	 i2c->CR1 &= ~I2C_CR1_PE;                // disable the i2c peripheral clock  (clear PE bit in I2C_CR1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 0201 	bic.w	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	601a      	str	r2, [r3, #0]
	/*
	 * I2C timings
	 * The timings must be configured in order to guarantee a correct data hold and setup time,
	 * used in master and slave modes. This is done by programming the PRESC,SCLDEL and SDADEL bits in the I2C_TIMINGR register.
	 */
	 i2c->TIMINGR = (1 << I2C_TIMINGR_PRESC_Pos) | // Standard mode 100 kHz @ 8 MHz (page 849/1141)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <I2C_Init+0x1d8>)
 800115c:	611a      	str	r2, [r3, #16]
	             (0x13 << I2C_TIMINGR_SCLL_Pos)  |
	             (0xF << I2C_TIMINGR_SCLH_Pos)   |
	             (0x2 << I2C_TIMINGR_SDADEL_Pos) |
	             (0x4 << I2C_TIMINGR_SCLDEL_Pos);

	 i2c->CR1 |= I2C_CR1_PE;// enable the i2c peripheral clock (set PE bit inI2C_CR1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f043 0201 	orr.w	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]

}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40005400 	.word	0x40005400
 8001178:	40021000 	.word	0x40021000
 800117c:	48000400 	.word	0x48000400
 8001180:	40005800 	.word	0x40005800
 8001184:	40007800 	.word	0x40007800
 8001188:	10420f13 	.word	0x10420f13

0800118c <I2C_Write>:
	return cnt ;
}


int I2C_Write(I2C_TypeDef * i2c , uint8_t address , uint8_t * data , int len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	460b      	mov	r3, r1
 800119a:	72fb      	strb	r3, [r7, #11]
	 uint32_t start_time = 0 ;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
	 //int ret = 0 ;
	 // Send start + slave address
	 i2c->CR2  = ((address << 1) << I2C_CR2_SADD_Pos) ;  // set the slave address
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	461a      	mov	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	605a      	str	r2, [r3, #4]
	 i2c->CR2 |=   (len << I2C_CR2_NBYTES_Pos);		   // set the number of bytes to transmitted
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	0412      	lsls	r2, r2, #16
 80011b2:	431a      	orrs	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	605a      	str	r2, [r3, #4]
	 i2c->CR2 |= I2C_CR2_START; 					   // generate the start condition
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	605a      	str	r2, [r3, #4]
	 while ((i2c->ISR & I2C_ISR_TXIS) == 0)  // wait for ASK
 80011c4:	e012      	b.n	80011ec <I2C_Write+0x60>
	 {
		  if (i2c->ISR & I2C_ISR_NACKF)	      // No ASK is received (error)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <I2C_Write+0x4c>
			  return ERROR_ADDRESS_NOT_FOUND ;//while(1) ;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e064      	b.n	80012a2 <I2C_Write+0x116>
		  if( get_mtick() - start_time > I2C_TIMOUT)
 80011d8:	f7ff f932 	bl	8000440 <get_mtick>
 80011dc:	4602      	mov	r2, r0
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b0a      	cmp	r3, #10
 80011e4:	d902      	bls.n	80011ec <I2C_Write+0x60>
		 {
			 return ERROR_TIMEOUT ;
 80011e6:	f06f 0301 	mvn.w	r3, #1
 80011ea:	e05a      	b.n	80012a2 <I2C_Write+0x116>
	 while ((i2c->ISR & I2C_ISR_TXIS) == 0)  // wait for ASK
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0e6      	beq.n	80011c6 <I2C_Write+0x3a>
		 }
	 }



	 for(int i = 0 ;i<len  ;i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	e046      	b.n	800128c <I2C_Write+0x100>
	 {
		 i2c->TXDR = *data;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
		 data++ ;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	607b      	str	r3, [r7, #4]

		 if(i == len -1)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d130      	bne.n	800127a <I2C_Write+0xee>
		 {
			 start_time = get_mtick() ;
 8001218:	f7ff f912 	bl	8000440 <get_mtick>
 800121c:	6178      	str	r0, [r7, #20]

			 while ((i2c->ISR & I2C_ISR_TC) == 0)
 800121e:	e012      	b.n	8001246 <I2C_Write+0xba>
			 {
				 if (i2c->ISR & I2C_ISR_NACKF)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <I2C_Write+0xa6>
					 return ERROR_NANK_RECEIVED ;//while(1) ;
 800122c:	f06f 0302 	mvn.w	r3, #2
 8001230:	e037      	b.n	80012a2 <I2C_Write+0x116>
				 if( get_mtick() - start_time > I2C_TIMOUT)
 8001232:	f7ff f905 	bl	8000440 <get_mtick>
 8001236:	4602      	mov	r2, r0
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b0a      	cmp	r3, #10
 800123e:	d902      	bls.n	8001246 <I2C_Write+0xba>
				 {
					 return ERROR_TIMEOUT ;
 8001240:	f06f 0301 	mvn.w	r3, #1
 8001244:	e02d      	b.n	80012a2 <I2C_Write+0x116>
			 while ((i2c->ISR & I2C_ISR_TC) == 0)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0e6      	beq.n	8001220 <I2C_Write+0x94>
 8001252:	e018      	b.n	8001286 <I2C_Write+0xfa>
			 }
		 }
		 else{
			 while ((i2c->ISR & I2C_ISR_TXIS) == 0)
			 {
				 if (i2c->ISR & I2C_ISR_NACKF)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <I2C_Write+0xda>
					 return ERROR_NANK_RECEIVED ;//while(1) ;
 8001260:	f06f 0302 	mvn.w	r3, #2
 8001264:	e01d      	b.n	80012a2 <I2C_Write+0x116>
				 if( get_mtick() - start_time > I2C_TIMOUT)
 8001266:	f7ff f8eb 	bl	8000440 <get_mtick>
 800126a:	4602      	mov	r2, r0
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b0a      	cmp	r3, #10
 8001272:	d902      	bls.n	800127a <I2C_Write+0xee>
				 {
					 return ERROR_TIMEOUT ;
 8001274:	f06f 0301 	mvn.w	r3, #1
 8001278:	e013      	b.n	80012a2 <I2C_Write+0x116>
			 while ((i2c->ISR & I2C_ISR_TXIS) == 0)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0e6      	beq.n	8001254 <I2C_Write+0xc8>
	 for(int i = 0 ;i<len  ;i++)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	3301      	adds	r3, #1
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbb4      	blt.n	80011fe <I2C_Write+0x72>
			 }
		 }
	 }


	 i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	605a      	str	r2, [r3, #4]

	 return ERROR_OK ;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <I2C_Read>:


void I2C_Read(I2C_TypeDef * i2c ,uint8_t address , uint8_t * buffer , int len)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b087      	sub	sp, #28
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	460b      	mov	r3, r1
 80012b8:	72fb      	strb	r3, [r7, #11]

	i2c->CR2  = (((address << 1)) << I2C_CR2_SADD_Pos) ;  // set the slave address
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	605a      	str	r2, [r3, #4]
	i2c->CR2 |=   (len << I2C_CR2_NBYTES_Pos);		   // set the number of bytes to be transmitted
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	0412      	lsls	r2, r2, #16
 80012cc:	431a      	orrs	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= (1<<10);                            	 // i2c read
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START; 					   	// generate the start condition
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	605a      	str	r2, [r3, #4]

	 for( int i = 0 ;i<len ;i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e01d      	b.n	800132c <I2C_Read+0x82>
	 {
		 while((i2c->ISR & I2C_ISR_RXNE) == 0) ; //wait for rx data
 80012f0:	bf00      	nop
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f9      	beq.n	80012f2 <I2C_Read+0x48>

		 *buffer = i2c->RXDR ;     //read rx
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	b2da      	uxtb	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	701a      	strb	r2, [r3, #0]

		 buffer++ ;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3301      	adds	r3, #1
 800130c:	607b      	str	r3, [r7, #4]

		 if(i == len - 1)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	3b01      	subs	r3, #1
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	d106      	bne.n	8001326 <I2C_Read+0x7c>
		 {
			 while((i2c->ISR & I2C_ISR_TC) == 0) ; //wait for TC Flag
 8001318:	bf00      	nop
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f9      	beq.n	800131a <I2C_Read+0x70>
	 for( int i = 0 ;i<len ;i++)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	dbdd      	blt.n	80012f0 <I2C_Read+0x46>
		 else{
			 //nope
		 }
	 }

	 i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
}
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
	...

0800134c <keypad_init>:
 * Let's assume your program switches all four columns to low and then switches the first row to high.
 * Then it reads the input states of each column and reads pin 1 high.
 * This means that a contact has been made between column 4 and row 1, so the 'A' key has been pressed.
 */
void keypad_init(GPIO_TypeDef * port , int s_pin)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	keypad_port = port   ;
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <keypad_init+0x2c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6013      	str	r3, [r2, #0]
	start_pin   = s_pin  ;
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <keypad_init+0x30>)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6013      	str	r3, [r2, #0]
	gpio_clock_enable(port) ;
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fd44 	bl	8000df0 <gpio_clock_enable>
	keypad_config_key_direction(port , s_pin) ;////set  the first 4 pins as output and the second 4 pins as input
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f808 	bl	8001380 <keypad_config_key_direction>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000c68 	.word	0x20000c68
 800137c:	20000c6c 	.word	0x20000c6c

08001380 <keypad_config_key_direction>:
 */



static void keypad_config_key_direction( GPIO_TypeDef * port , int s_pin)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af02      	add	r7, sp, #8
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fda0 	bl	8000ed0 <reset_io>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//c1  1
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	1c4b      	adds	r3, r1, #1
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	2300      	movs	r3, #0
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	2201      	movs	r2, #1
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fda9 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//c2  0
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	1c4b      	adds	r3, r1, #1
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	2300      	movs	r3, #0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2300      	movs	r3, #0
 80013b8:	2201      	movs	r2, #1
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fd9d 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//c3  0
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	1c4b      	adds	r3, r1, #1
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2300      	movs	r3, #0
 80013d0:	2201      	movs	r2, #1
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fd91 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//c4  0
 80013d8:	6839      	ldr	r1, [r7, #0]
 80013da:	1c4b      	adds	r3, r1, #1
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	2300      	movs	r3, #0
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	2201      	movs	r2, #1
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fd85 	bl	8000efa <gpio_config_pin>
	//configure the pins as Intput with pull-up
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //r1  1
 80013f0:	6839      	ldr	r1, [r7, #0]
 80013f2:	1c4b      	adds	r3, r1, #1
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	2301      	movs	r3, #1
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2300      	movs	r3, #0
 8001400:	2200      	movs	r2, #0
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fd79 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //r2  0
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	1c4b      	adds	r3, r1, #1
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	2300      	movs	r3, #0
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2301      	movs	r3, #1
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	2200      	movs	r2, #0
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fd6d 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //r3  1
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	1c4b      	adds	r3, r1, #1
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	2301      	movs	r3, #1
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	2200      	movs	r2, #0
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fd61 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C4  1
 8001438:	6839      	ldr	r1, [r7, #0]
 800143a:	1c4b      	adds	r3, r1, #1
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2301      	movs	r3, #1
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	2200      	movs	r2, #0
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fd55 	bl	8000efa <gpio_config_pin>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <keypad_inverse_pin_direction>:

static void keypad_inverse_pin_direction( GPIO_TypeDef * port , int s_pin)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af02      	add	r7, sp, #8
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fd34 	bl	8000ed0 <reset_io>
	//configure the pins as Intput with pull-down
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R1     0
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	1c4b      	adds	r3, r1, #1
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	2302      	movs	r3, #2
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fd3d 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R2     1
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	1c4b      	adds	r3, r1, #1
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	2300      	movs	r3, #0
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	2302      	movs	r3, #2
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	2200      	movs	r2, #0
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fd31 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R3     1
 8001498:	6839      	ldr	r1, [r7, #0]
 800149a:	1c4b      	adds	r3, r1, #1
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	2300      	movs	r3, #0
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	2302      	movs	r3, #2
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	2200      	movs	r2, #0
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fd25 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN  , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R4     1
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	1c4b      	adds	r3, r1, #1
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	2302      	movs	r3, #2
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2300      	movs	r3, #0
 80014c0:	2200      	movs	r2, #0
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fd19 	bl	8000efa <gpio_config_pin>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C1     0
 80014c8:	6839      	ldr	r1, [r7, #0]
 80014ca:	1c4b      	adds	r3, r1, #1
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	2300      	movs	r3, #0
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	2300      	movs	r3, #0
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2300      	movs	r3, #0
 80014d8:	2201      	movs	r2, #1
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fd0d 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C2     1
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	1c4b      	adds	r3, r1, #1
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	2300      	movs	r3, #0
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	2300      	movs	r3, #0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2300      	movs	r3, #0
 80014f0:	2201      	movs	r2, #1
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fd01 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C3     0
 80014f8:	6839      	ldr	r1, [r7, #0]
 80014fa:	1c4b      	adds	r3, r1, #1
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	2300      	movs	r3, #0
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	2300      	movs	r3, #0
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2300      	movs	r3, #0
 8001508:	2201      	movs	r2, #1
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fcf5 	bl	8000efa <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C4     0
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	1c4b      	adds	r3, r1, #1
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	2300      	movs	r3, #0
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	2300      	movs	r3, #0
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2300      	movs	r3, #0
 8001520:	2201      	movs	r2, #1
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fce9 	bl	8000efa <gpio_config_pin>

}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <keypad_get_pressedkey>:

/**
 * return the pressedkey other wise 0
 */
char keypad_get_pressedkey()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0

	uint16_t porte = 0;   // set porte to zero where the pins of the used GPIO port (C , Pins : 0-15) will be stored.
 8001536:	2300      	movs	r3, #0
 8001538:	817b      	strh	r3, [r7, #10]
	porte = GPIOC->IDR ; /* IDR is one of the GPIO registers that contains the input states of the pins of a GPIO port.
 800153a:	4b51      	ldr	r3, [pc, #324]	; (8001680 <keypad_get_pressedkey+0x150>)
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	817b      	strh	r3, [r7, #10]
	                      * We can read the whole pin status of a GPIO port with the IDR register.
	                      */
    uint8_t  eidr  = 0;  // set eidr to zero where only the 8 used pins will be stored.
 8001540:	2300      	movs	r3, #0
 8001542:	727b      	strb	r3, [r7, #9]
	uint8_t  ch    = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	723b      	strb	r3, [r7, #8]
	char ret = 0 ;
 8001548:	2300      	movs	r3, #0
 800154a:	75fb      	strb	r3, [r7, #23]

    switch(state)
 800154c:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <keypad_get_pressedkey+0x154>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	f000 8087 	beq.w	8001664 <keypad_get_pressedkey+0x134>
 8001556:	2b02      	cmp	r3, #2
 8001558:	f300 8088 	bgt.w	800166c <keypad_get_pressedkey+0x13c>
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <keypad_get_pressedkey+0x36>
 8001560:	2b01      	cmp	r3, #1
 8001562:	d072      	beq.n	800164a <keypad_get_pressedkey+0x11a>

				state = State_free ;
				break ;
			}
		default :
			break ;
 8001564:	e082      	b.n	800166c <keypad_get_pressedkey+0x13c>
				eidr = (porte >> start_pin) ;//  & 0xff ; // get the state od the keypad pins
 8001566:	897a      	ldrh	r2, [r7, #10]
 8001568:	4b47      	ldr	r3, [pc, #284]	; (8001688 <keypad_get_pressedkey+0x158>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fa42 f303 	asr.w	r3, r2, r3
 8001570:	727b      	strb	r3, [r7, #9]
				if(eidr != DEFAULT_KEYPAD_PORT_INP)       // if now the value is different than the DEFAULT_KEYPAD_PORT_INP 0xf0
 8001572:	7a7b      	ldrb	r3, [r7, #9]
 8001574:	2bf0      	cmp	r3, #240	; 0xf0
 8001576:	d07b      	beq.n	8001670 <keypad_get_pressedkey+0x140>
					ch = ~eidr;                           // set the inverse of eidr in ch
 8001578:	7a7b      	ldrb	r3, [r7, #9]
 800157a:	43db      	mvns	r3, r3
 800157c:	723b      	strb	r3, [r7, #8]
					ch = ch & DEFAULT_KEYPAD_PORT_INP;    // with the addition of 0xf0 we get 1 in the changed bit position
 800157e:	7a3b      	ldrb	r3, [r7, #8]
 8001580:	f023 030f 	bic.w	r3, r3, #15
 8001584:	723b      	strb	r3, [r7, #8]
					keypad_inverse_pin_direction(keypad_port ,start_pin ) ;
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <keypad_get_pressedkey+0x15c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a3f      	ldr	r2, [pc, #252]	; (8001688 <keypad_get_pressedkey+0x158>)
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff61 	bl	8001458 <keypad_inverse_pin_direction>
					uint16_t out = (ch << start_pin) ;  //
 8001596:	7a3a      	ldrb	r2, [r7, #8]
 8001598:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <keypad_get_pressedkey+0x158>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	80fb      	strh	r3, [r7, #6]
					keypad_port->ODR = out ;
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <keypad_get_pressedkey+0x15c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	88fa      	ldrh	r2, [r7, #6]
 80015a8:	615a      	str	r2, [r3, #20]
					delay_ms(1) ;
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7fe ff32 	bl	8000414 <delay_ms>
					porte = keypad_port->IDR ;//get the state of input port
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <keypad_get_pressedkey+0x15c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	817b      	strh	r3, [r7, #10]
					eidr = (porte >> start_pin) & 0xff ; //get the state of keypad pins
 80015b8:	897a      	ldrh	r2, [r7, #10]
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <keypad_get_pressedkey+0x158>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fa42 f303 	asr.w	r3, r2, r3
 80015c2:	727b      	strb	r3, [r7, #9]
					int col = 0 ;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
					for(col = 0 ; col <4 ; col++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	e00d      	b.n	80015ea <keypad_get_pressedkey+0xba>
						if(   (((eidr & 0xf0) >> 4) &  (1<<col)) != 0 )
 80015ce:	7a7b      	ldrb	r3, [r7, #9]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa42 f303 	asr.w	r3, r2, r3
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d106      	bne.n	80015f2 <keypad_get_pressedkey+0xc2>
					for(col = 0 ; col <4 ; col++)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	3301      	adds	r3, #1
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	ddee      	ble.n	80015ce <keypad_get_pressedkey+0x9e>
 80015f0:	e000      	b.n	80015f4 <keypad_get_pressedkey+0xc4>
							break ;
 80015f2:	bf00      	nop
					int row = 0 ;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
					for(row = 0 ; row <4 ; row++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e00c      	b.n	8001618 <keypad_get_pressedkey+0xe8>
						if( ((eidr & 0x0f) & (1<<row)) != 0)
 80015fe:	7a7b      	ldrb	r3, [r7, #9]
 8001600:	f003 020f 	and.w	r2, r3, #15
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	fa42 f303 	asr.w	r3, r2, r3
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <keypad_get_pressedkey+0xf0>
					for(row = 0 ; row <4 ; row++)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b03      	cmp	r3, #3
 800161c:	ddef      	ble.n	80015fe <keypad_get_pressedkey+0xce>
 800161e:	e000      	b.n	8001622 <keypad_get_pressedkey+0xf2>
							break ;
 8001620:	bf00      	nop
					ret = keys[row][col] ;
 8001622:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <keypad_get_pressedkey+0x160>)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	441a      	add	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4413      	add	r3, r2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	75fb      	strb	r3, [r7, #23]
					keypad_config_key_direction(keypad_port ,start_pin ) ;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <keypad_get_pressedkey+0x15c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <keypad_get_pressedkey+0x158>)
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fe9f 	bl	8001380 <keypad_config_key_direction>
					state = State_key_pressed ;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <keypad_get_pressedkey+0x154>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
				break ;
 8001648:	e012      	b.n	8001670 <keypad_get_pressedkey+0x140>
				eidr = (porte >> start_pin) & 0xff ;
 800164a:	897a      	ldrh	r2, [r7, #10]
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <keypad_get_pressedkey+0x158>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	fa42 f303 	asr.w	r3, r2, r3
 8001654:	727b      	strb	r3, [r7, #9]
				if(eidr == DEFAULT_KEYPAD_PORT_INP)
 8001656:	7a7b      	ldrb	r3, [r7, #9]
 8001658:	2bf0      	cmp	r3, #240	; 0xf0
 800165a:	d10b      	bne.n	8001674 <keypad_get_pressedkey+0x144>
					state = State_key_released ;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <keypad_get_pressedkey+0x154>)
 800165e:	2202      	movs	r2, #2
 8001660:	701a      	strb	r2, [r3, #0]
				break ;
 8001662:	e007      	b.n	8001674 <keypad_get_pressedkey+0x144>
				state = State_free ;
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <keypad_get_pressedkey+0x154>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
				break ;
 800166a:	e004      	b.n	8001676 <keypad_get_pressedkey+0x146>
			break ;
 800166c:	bf00      	nop
 800166e:	e002      	b.n	8001676 <keypad_get_pressedkey+0x146>
				break ;
 8001670:	bf00      	nop
 8001672:	e000      	b.n	8001676 <keypad_get_pressedkey+0x146>
				break ;
 8001674:	bf00      	nop

	}


	return ret ;
 8001676:	7dfb      	ldrb	r3, [r7, #23]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	48000800 	.word	0x48000800
 8001684:	20000c70 	.word	0x20000c70
 8001688:	20000c6c 	.word	0x20000c6c
 800168c:	20000c68 	.word	0x20000c68
 8001690:	20000014 	.word	0x20000014

08001694 <rtc_write_reg>:




static void rtc_write_reg(uint8_t address ,uint8_t reg , uint8_t  data , int len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	460b      	mov	r3, r1
 80016a2:	71bb      	strb	r3, [r7, #6]
 80016a4:	4613      	mov	r3, r2
 80016a6:	717b      	strb	r3, [r7, #5]
	uint8_t tmp[2] ;

	tmp[0]  = reg ;
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	733b      	strb	r3, [r7, #12]
	tmp[1]  = data ;
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	737b      	strb	r3, [r7, #13]

	I2C_Write(rtc_i2c , address , tmp ,2 ) ;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <rtc_write_reg+0x34>)
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	f107 020c 	add.w	r2, r7, #12
 80016b8:	79f9      	ldrb	r1, [r7, #7]
 80016ba:	2302      	movs	r3, #2
 80016bc:	f7ff fd66 	bl	800118c <I2C_Write>
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000c74 	.word	0x20000c74

080016cc <rtc_read_reg>:

static void rtc_read_reg(uint8_t address , uint8_t reg , uint8_t * data , int len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60ba      	str	r2, [r7, #8]
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	460b      	mov	r3, r1
 80016dc:	73bb      	strb	r3, [r7, #14]
	I2C_Write(rtc_i2c , address , &reg , 1 ) ;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <rtc_read_reg+0x40>)
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	f107 020e 	add.w	r2, r7, #14
 80016e6:	7bf9      	ldrb	r1, [r7, #15]
 80016e8:	2301      	movs	r3, #1
 80016ea:	f7ff fd4f 	bl	800118c <I2C_Write>
	I2C_Read(rtc_i2c , address , &data[reg] , 1) ;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <rtc_read_reg+0x40>)
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	441a      	add	r2, r3
 80016fa:	7bf9      	ldrb	r1, [r7, #15]
 80016fc:	2301      	movs	r3, #1
 80016fe:	f7ff fdd4 	bl	80012aa <I2C_Read>
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000c74 	.word	0x20000c74

08001710 <rtc_init>:

void rtc_init(I2C_TypeDef * dev)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	rtc_i2c = dev ;
 8001718:	4a03      	ldr	r2, [pc, #12]	; (8001728 <rtc_init+0x18>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	20000c74 	.word	0x20000c74

0800172c <rtc_I2C_TimeOffset>:

void rtc_I2C_TimeOffset(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	rtc_write_reg( RTC_I2C_ADDR , RTC_REG_HOUR ,0x00 , 1) ;
 8001730:	2301      	movs	r3, #1
 8001732:	2200      	movs	r2, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2068      	movs	r0, #104	; 0x68
 8001738:	f7ff ffac 	bl	8001694 <rtc_write_reg>

	//******Offset Real Time *****************
	rtc_write_reg(RTC_I2C_ADDR, RTC_REG_SECOND, 0x52, 1);	//second
 800173c:	2301      	movs	r3, #1
 800173e:	2252      	movs	r2, #82	; 0x52
 8001740:	2100      	movs	r1, #0
 8001742:	2068      	movs	r0, #104	; 0x68
 8001744:	f7ff ffa6 	bl	8001694 <rtc_write_reg>
	rtc_write_reg(RTC_I2C_ADDR, RTC_REG_MINUTE, 0x55, 1);	//minute
 8001748:	2301      	movs	r3, #1
 800174a:	2255      	movs	r2, #85	; 0x55
 800174c:	2101      	movs	r1, #1
 800174e:	2068      	movs	r0, #104	; 0x68
 8001750:	f7ff ffa0 	bl	8001694 <rtc_write_reg>
	rtc_write_reg(RTC_I2C_ADDR, RTC_REG_HOUR, 0x09, 1);		//hour
 8001754:	2301      	movs	r3, #1
 8001756:	2209      	movs	r2, #9
 8001758:	2102      	movs	r1, #2
 800175a:	2068      	movs	r0, #104	; 0x68
 800175c:	f7ff ff9a 	bl	8001694 <rtc_write_reg>
	rtc_write_reg(RTC_I2C_ADDR, RTC_REG_DATE, 0x17, 1);		//day
 8001760:	2301      	movs	r3, #1
 8001762:	2217      	movs	r2, #23
 8001764:	2104      	movs	r1, #4
 8001766:	2068      	movs	r0, #104	; 0x68
 8001768:	f7ff ff94 	bl	8001694 <rtc_write_reg>
	rtc_write_reg(RTC_I2C_ADDR, RTC_REG_MONTH, 0x12, 1);	//month
 800176c:	2301      	movs	r3, #1
 800176e:	2212      	movs	r2, #18
 8001770:	2105      	movs	r1, #5
 8001772:	2068      	movs	r0, #104	; 0x68
 8001774:	f7ff ff8e 	bl	8001694 <rtc_write_reg>
	rtc_write_reg(RTC_I2C_ADDR, RTC_REG_YEAR, 0x22, 1);		//year (changeable from 2000-2099)
 8001778:	2301      	movs	r3, #1
 800177a:	2222      	movs	r2, #34	; 0x22
 800177c:	2106      	movs	r1, #6
 800177e:	2068      	movs	r0, #104	; 0x68
 8001780:	f7ff ff88 	bl	8001694 <rtc_write_reg>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <rtc_I2c_ReadAll>:


void rtc_I2c_ReadAll(uint8_t *rtc_bufferReceive)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	rtc_read_reg(RTC_I2C_ADDR, RTC_REG_SECOND, rtc_bufferReceive, sizeof(rtc_bufferReceive));
 8001790:	2304      	movs	r3, #4
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	2100      	movs	r1, #0
 8001796:	2068      	movs	r0, #104	; 0x68
 8001798:	f7ff ff98 	bl	80016cc <rtc_read_reg>
	rtc_read_reg(RTC_I2C_ADDR, RTC_REG_MINUTE, rtc_bufferReceive, sizeof(rtc_bufferReceive));
 800179c:	2304      	movs	r3, #4
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	2101      	movs	r1, #1
 80017a2:	2068      	movs	r0, #104	; 0x68
 80017a4:	f7ff ff92 	bl	80016cc <rtc_read_reg>
	rtc_read_reg(RTC_I2C_ADDR, RTC_REG_HOUR, rtc_bufferReceive, sizeof(rtc_bufferReceive));
 80017a8:	2304      	movs	r3, #4
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	2102      	movs	r1, #2
 80017ae:	2068      	movs	r0, #104	; 0x68
 80017b0:	f7ff ff8c 	bl	80016cc <rtc_read_reg>
	rtc_read_reg(RTC_I2C_ADDR, RTC_REG_DOW, rtc_bufferReceive, sizeof(rtc_bufferReceive));
 80017b4:	2304      	movs	r3, #4
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	2103      	movs	r1, #3
 80017ba:	2068      	movs	r0, #104	; 0x68
 80017bc:	f7ff ff86 	bl	80016cc <rtc_read_reg>
	rtc_read_reg(RTC_I2C_ADDR, RTC_REG_DATE, rtc_bufferReceive, sizeof(rtc_bufferReceive));
 80017c0:	2304      	movs	r3, #4
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	2104      	movs	r1, #4
 80017c6:	2068      	movs	r0, #104	; 0x68
 80017c8:	f7ff ff80 	bl	80016cc <rtc_read_reg>
	rtc_read_reg(RTC_I2C_ADDR, RTC_REG_MONTH, rtc_bufferReceive, sizeof(rtc_bufferReceive));
 80017cc:	2304      	movs	r3, #4
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	2105      	movs	r1, #5
 80017d2:	2068      	movs	r0, #104	; 0x68
 80017d4:	f7ff ff7a 	bl	80016cc <rtc_read_reg>
	rtc_read_reg(RTC_I2C_ADDR, RTC_REG_YEAR, rtc_bufferReceive, sizeof(rtc_bufferReceive));
 80017d8:	2304      	movs	r3, #4
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	2106      	movs	r1, #6
 80017de:	2068      	movs	r0, #104	; 0x68
 80017e0:	f7ff ff74 	bl	80016cc <rtc_read_reg>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <rtc_I2C_Calculate>:


void rtc_I2C_Calculate(uint8_t *rtc_bufferReceive, uint8_t *rtc_bufferOut)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	//rtc_bufferOut[13];

	uint8_t sec_einer = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]
	uint8_t sec_zehner = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75bb      	strb	r3, [r7, #22]
	uint8_t min_einer = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	757b      	strb	r3, [r7, #21]
	uint8_t min_zehner = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	753b      	strb	r3, [r7, #20]
	uint8_t hour_einer = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	74fb      	strb	r3, [r7, #19]
	uint8_t hour_zehner = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	74bb      	strb	r3, [r7, #18]
	uint8_t day_einer = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	747b      	strb	r3, [r7, #17]
	uint8_t date_einer = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	743b      	strb	r3, [r7, #16]
	uint8_t date_zehner = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]
	uint8_t month_einer = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	73bb      	strb	r3, [r7, #14]
	uint8_t month_zehner = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	737b      	strb	r3, [r7, #13]
	uint8_t year_einer = 0; // ggf mit uint16_t schreiben
 8001822:	2300      	movs	r3, #0
 8001824:	733b      	strb	r3, [r7, #12]
	uint8_t year_zehner = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	72fb      	strb	r3, [r7, #11]


	sec_einer = rtc_bufferReceive[0];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	75fb      	strb	r3, [r7, #23]
	sec_zehner = rtc_bufferReceive[0];
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	75bb      	strb	r3, [r7, #22]
	min_einer = rtc_bufferReceive[1];
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	757b      	strb	r3, [r7, #21]
	min_zehner = rtc_bufferReceive[1];
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	753b      	strb	r3, [r7, #20]
	hour_einer = rtc_bufferReceive[2];
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	789b      	ldrb	r3, [r3, #2]
 8001846:	74fb      	strb	r3, [r7, #19]
	hour_zehner = rtc_bufferReceive[2];
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	789b      	ldrb	r3, [r3, #2]
 800184c:	74bb      	strb	r3, [r7, #18]

	day_einer = rtc_bufferReceive[3];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	78db      	ldrb	r3, [r3, #3]
 8001852:	747b      	strb	r3, [r7, #17]

	date_einer = rtc_bufferReceive[4];
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	791b      	ldrb	r3, [r3, #4]
 8001858:	743b      	strb	r3, [r7, #16]
	date_zehner = rtc_bufferReceive[4];
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	791b      	ldrb	r3, [r3, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
	month_einer = rtc_bufferReceive[5];
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	795b      	ldrb	r3, [r3, #5]
 8001864:	73bb      	strb	r3, [r7, #14]
	month_zehner = rtc_bufferReceive[5];
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	795b      	ldrb	r3, [r3, #5]
 800186a:	737b      	strb	r3, [r7, #13]
	year_einer = rtc_bufferReceive[6];
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	799b      	ldrb	r3, [r3, #6]
 8001870:	733b      	strb	r3, [r7, #12]
	year_zehner = rtc_bufferReceive[6];
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	799b      	ldrb	r3, [r3, #6]
 8001876:	72fb      	strb	r3, [r7, #11]


	sec_einer &= 15;	//Bits 4,5,6,7 löschen, ergibt Wert vom Einer der Sekunde
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	75fb      	strb	r3, [r7, #23]
	rtc_bufferOut[0] = sec_einer;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	7dfa      	ldrb	r2, [r7, #23]
 8001884:	701a      	strb	r2, [r3, #0]
	sec_zehner &= 240;	//Bits 0,1,2,3 löschen, ergibt Wert vom Zehner der Sekunde
 8001886:	7dbb      	ldrb	r3, [r7, #22]
 8001888:	f023 030f 	bic.w	r3, r3, #15
 800188c:	75bb      	strb	r3, [r7, #22]
	rtc_bufferOut[1] = sec_zehner/16;	//Wert vom Zehner wird mit dem Wert 16 skaliert
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	7dba      	ldrb	r2, [r7, #22]
 8001894:	0912      	lsrs	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

	min_einer &= 15;
 800189a:	7d7b      	ldrb	r3, [r7, #21]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	757b      	strb	r3, [r7, #21]
	rtc_bufferOut[2] = min_einer;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3302      	adds	r3, #2
 80018a6:	7d7a      	ldrb	r2, [r7, #21]
 80018a8:	701a      	strb	r2, [r3, #0]
	min_zehner &= 240;
 80018aa:	7d3b      	ldrb	r3, [r7, #20]
 80018ac:	f023 030f 	bic.w	r3, r3, #15
 80018b0:	753b      	strb	r3, [r7, #20]
	rtc_bufferOut[3] = min_zehner/16;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	3303      	adds	r3, #3
 80018b6:	7d3a      	ldrb	r2, [r7, #20]
 80018b8:	0912      	lsrs	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

	hour_einer &= 15;
 80018be:	7cfb      	ldrb	r3, [r7, #19]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	74fb      	strb	r3, [r7, #19]
	rtc_bufferOut[4] = hour_einer;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	3304      	adds	r3, #4
 80018ca:	7cfa      	ldrb	r2, [r7, #19]
 80018cc:	701a      	strb	r2, [r3, #0]
	hour_zehner &= 48;
 80018ce:	7cbb      	ldrb	r3, [r7, #18]
 80018d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80018d4:	74bb      	strb	r3, [r7, #18]
	rtc_bufferOut[5] = hour_zehner /= 16;	//anstatt 16 lieber 48?
 80018d6:	7cbb      	ldrb	r3, [r7, #18]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	74bb      	strb	r3, [r7, #18]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	3305      	adds	r3, #5
 80018e0:	7cba      	ldrb	r2, [r7, #18]
 80018e2:	701a      	strb	r2, [r3, #0]

	day_einer &= 7;
 80018e4:	7c7b      	ldrb	r3, [r7, #17]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	747b      	strb	r3, [r7, #17]
	rtc_bufferOut[6] = day_einer;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3306      	adds	r3, #6
 80018f0:	7c7a      	ldrb	r2, [r7, #17]
 80018f2:	701a      	strb	r2, [r3, #0]

	date_einer &= 15;
 80018f4:	7c3b      	ldrb	r3, [r7, #16]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	743b      	strb	r3, [r7, #16]
	rtc_bufferOut[7] = date_einer;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	3307      	adds	r3, #7
 8001900:	7c3a      	ldrb	r2, [r7, #16]
 8001902:	701a      	strb	r2, [r3, #0]
	date_zehner &= 48;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800190a:	73fb      	strb	r3, [r7, #15]
	rtc_bufferOut[8] = date_zehner/16;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	3308      	adds	r3, #8
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	0912      	lsrs	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]

	month_einer &= 15;
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	73bb      	strb	r3, [r7, #14]
	rtc_bufferOut[9] = month_einer;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	3309      	adds	r3, #9
 8001924:	7bba      	ldrb	r2, [r7, #14]
 8001926:	701a      	strb	r2, [r3, #0]
	month_zehner &= 16;
 8001928:	7b7b      	ldrb	r3, [r7, #13]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	737b      	strb	r3, [r7, #13]
	rtc_bufferOut[10] = month_zehner/16;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	330a      	adds	r3, #10
 8001934:	7b7a      	ldrb	r2, [r7, #13]
 8001936:	0912      	lsrs	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	701a      	strb	r2, [r3, #0]

	year_einer &= 15;
 800193c:	7b3b      	ldrb	r3, [r7, #12]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	733b      	strb	r3, [r7, #12]
	rtc_bufferOut[11] = year_einer;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	330b      	adds	r3, #11
 8001948:	7b3a      	ldrb	r2, [r7, #12]
 800194a:	701a      	strb	r2, [r3, #0]
	year_zehner &= 240;
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	f023 030f 	bic.w	r3, r3, #15
 8001952:	72fb      	strb	r3, [r7, #11]
	rtc_bufferOut[12]= year_zehner/16;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	330c      	adds	r3, #12
 8001958:	7afa      	ldrb	r2, [r7, #11]
 800195a:	0912      	lsrs	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	701a      	strb	r2, [r3, #0]

}
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
	...

0800196c <__libc_init_array>:
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	4d0d      	ldr	r5, [pc, #52]	; (80019a4 <__libc_init_array+0x38>)
 8001970:	4c0d      	ldr	r4, [pc, #52]	; (80019a8 <__libc_init_array+0x3c>)
 8001972:	1b64      	subs	r4, r4, r5
 8001974:	10a4      	asrs	r4, r4, #2
 8001976:	2600      	movs	r6, #0
 8001978:	42a6      	cmp	r6, r4
 800197a:	d109      	bne.n	8001990 <__libc_init_array+0x24>
 800197c:	4d0b      	ldr	r5, [pc, #44]	; (80019ac <__libc_init_array+0x40>)
 800197e:	4c0c      	ldr	r4, [pc, #48]	; (80019b0 <__libc_init_array+0x44>)
 8001980:	f000 f820 	bl	80019c4 <_init>
 8001984:	1b64      	subs	r4, r4, r5
 8001986:	10a4      	asrs	r4, r4, #2
 8001988:	2600      	movs	r6, #0
 800198a:	42a6      	cmp	r6, r4
 800198c:	d105      	bne.n	800199a <__libc_init_array+0x2e>
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	f855 3b04 	ldr.w	r3, [r5], #4
 8001994:	4798      	blx	r3
 8001996:	3601      	adds	r6, #1
 8001998:	e7ee      	b.n	8001978 <__libc_init_array+0xc>
 800199a:	f855 3b04 	ldr.w	r3, [r5], #4
 800199e:	4798      	blx	r3
 80019a0:	3601      	adds	r6, #1
 80019a2:	e7f2      	b.n	800198a <__libc_init_array+0x1e>
 80019a4:	080036a4 	.word	0x080036a4
 80019a8:	080036a4 	.word	0x080036a4
 80019ac:	080036a4 	.word	0x080036a4
 80019b0:	080036a8 	.word	0x080036a8

080019b4 <memset>:
 80019b4:	4402      	add	r2, r0
 80019b6:	4603      	mov	r3, r0
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d100      	bne.n	80019be <memset+0xa>
 80019bc:	4770      	bx	lr
 80019be:	f803 1b01 	strb.w	r1, [r3], #1
 80019c2:	e7f9      	b.n	80019b8 <memset+0x4>

080019c4 <_init>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr

080019d0 <_fini>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	bf00      	nop
 80019d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d6:	bc08      	pop	{r3}
 80019d8:	469e      	mov	lr, r3
 80019da:	4770      	bx	lr
