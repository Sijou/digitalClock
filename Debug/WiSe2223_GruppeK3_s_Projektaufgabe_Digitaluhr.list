
WiSe2223_GruppeK3_s_Projektaufgabe_Digitaluhr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001efc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  0800209c  0800209c  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08003068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          00000c6c  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000cec  20000cec  00020080  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002ae1  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000be2  00000000  00000000  00022b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000228  00000000  00000000  00023770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000001a8  00000000  00000000  00023998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00018f93  00000000  00000000  00023b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000345d  00000000  00000000  0003cad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00087fca  00000000  00000000  0003ff30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000c7efa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000b04  00000000  00000000  000c7f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002084 	.word	0x08002084

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08002084 	.word	0x08002084

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	db0a      	blt.n	80002aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	490c      	ldr	r1, [pc, #48]	; (80002cc <__NVIC_SetPriority+0x4c>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	0112      	lsls	r2, r2, #4
 80002a0:	b2d2      	uxtb	r2, r2
 80002a2:	440b      	add	r3, r1
 80002a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a8:	e00a      	b.n	80002c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4908      	ldr	r1, [pc, #32]	; (80002d0 <__NVIC_SetPriority+0x50>)
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	3b04      	subs	r3, #4
 80002b8:	0112      	lsls	r2, r2, #4
 80002ba:	b2d2      	uxtb	r2, r2
 80002bc:	440b      	add	r3, r1
 80002be:	761a      	strb	r2, [r3, #24]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e100 	.word	0xe000e100
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <main>:
OLED_t lcd1 ;
OLED_t lcd2 ;
OLED_t lcd3 ;

int main()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b09c      	sub	sp, #112	; 0x70
 80002d8:	af04      	add	r7, sp, #16

  	while ((RCC->CR & 2) == 0);  // RCC Clock control register (RCC_CR) , wait until HSI is Ready
 80002da:	bf00      	nop
 80002dc:	4b6c      	ldr	r3, [pc, #432]	; (8000490 <main+0x1bc>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f003 0302 	and.w	r3, r3, #2
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0f9      	beq.n	80002dc <main+0x8>

	systick_enable() ;
 80002e8:	f000 f8ec 	bl	80004c4 <systick_enable>
    //Clock configuration register (RCC_CFGR)
	RCC->CFGR &= ~(1<<7)  ; //reset HPRE4 The AHB clock frequency == sys clk
 80002ec:	4b68      	ldr	r3, [pc, #416]	; (8000490 <main+0x1bc>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	4a67      	ldr	r2, [pc, #412]	; (8000490 <main+0x1bc>)
 80002f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002f6:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<12) ; // APB1 clock no division
 80002f8:	4b65      	ldr	r3, [pc, #404]	; (8000490 <main+0x1bc>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a64      	ldr	r2, [pc, #400]	; (8000490 <main+0x1bc>)
 80002fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000302:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<15) ; // APB2 clock no division
 8000304:	4b62      	ldr	r3, [pc, #392]	; (8000490 <main+0x1bc>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4a61      	ldr	r2, [pc, #388]	; (8000490 <main+0x1bc>)
 800030a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800030e:	6053      	str	r3, [r2, #4]

	gpio_clock_enable(GPIOA) ;
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f000 fd10 	bl	8000d38 <gpio_clock_enable>

	gpio_config_pin(GPIOA,5,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 8000318:	2300      	movs	r3, #0
 800031a:	9301      	str	r3, [sp, #4]
 800031c:	2300      	movs	r3, #0
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	2300      	movs	r3, #0
 8000322:	2201      	movs	r2, #1
 8000324:	2105      	movs	r1, #5
 8000326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032a:	f000 fd8a 	bl	8000e42 <gpio_config_pin>

	gpio_set_pinState(GPIOA , 5 , LOW) ;
 800032e:	2201      	movs	r2, #1
 8000330:	2105      	movs	r1, #5
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f000 fdbb 	bl	8000eb0 <gpio_set_pinState>


	 lcd1.dev = I2C1 ;
 800033a:	4b56      	ldr	r3, [pc, #344]	; (8000494 <main+0x1c0>)
 800033c:	4a56      	ldr	r2, [pc, #344]	; (8000498 <main+0x1c4>)
 800033e:	601a      	str	r2, [r3, #0]
	 lcd2.dev = I2C2 ;
 8000340:	4b56      	ldr	r3, [pc, #344]	; (800049c <main+0x1c8>)
 8000342:	4a57      	ldr	r2, [pc, #348]	; (80004a0 <main+0x1cc>)
 8000344:	601a      	str	r2, [r3, #0]
	 lcd3.dev = I2C3 ;
 8000346:	4b57      	ldr	r3, [pc, #348]	; (80004a4 <main+0x1d0>)
 8000348:	4a57      	ldr	r2, [pc, #348]	; (80004a8 <main+0x1d4>)
 800034a:	601a      	str	r2, [r3, #0]

	 I2C_Init(I2C1) ;
 800034c:	4852      	ldr	r0, [pc, #328]	; (8000498 <main+0x1c4>)
 800034e:	f000 fdd3 	bl	8000ef8 <I2C_Init>
	 I2C_Init(I2C2) ;
 8000352:	4853      	ldr	r0, [pc, #332]	; (80004a0 <main+0x1cc>)
 8000354:	f000 fdd0 	bl	8000ef8 <I2C_Init>
	 I2C_Init(I2C3) ;
 8000358:	4853      	ldr	r0, [pc, #332]	; (80004a8 <main+0x1d4>)
 800035a:	f000 fdcd 	bl	8000ef8 <I2C_Init>

	 rtc_init(I2C1);
 800035e:	484e      	ldr	r0, [pc, #312]	; (8000498 <main+0x1c4>)
 8000360:	f001 f8f6 	bl	8001550 <rtc_init>

	 Display_Init(&lcd3);	//Configure Display
 8000364:	484f      	ldr	r0, [pc, #316]	; (80004a4 <main+0x1d0>)
 8000366:	f000 f980 	bl	800066a <Display_Init>
	 Display_Init(&lcd2);	//Configure Display
 800036a:	484c      	ldr	r0, [pc, #304]	; (800049c <main+0x1c8>)
 800036c:	f000 f97d 	bl	800066a <Display_Init>
	 Display_Init(&lcd1);	//Configure Display
 8000370:	4848      	ldr	r0, [pc, #288]	; (8000494 <main+0x1c0>)
 8000372:	f000 f97a 	bl	800066a <Display_Init>
	 keypad_init(GPIOC , 0) ;
 8000376:	2100      	movs	r1, #0
 8000378:	484c      	ldr	r0, [pc, #304]	; (80004ac <main+0x1d8>)
 800037a:	f000 ff45 	bl	8001208 <keypad_init>
	 //Example: print a picture on screen
	Display_Fill(&lcd1, Display_COLOR_BLACK );	//the entire Display is white (written to RAM)
 800037e:	2100      	movs	r1, #0
 8000380:	4844      	ldr	r0, [pc, #272]	; (8000494 <main+0x1c0>)
 8000382:	f000 fab8 	bl	80008f6 <Display_Fill>
	Display_DrawBitmap(&lcd1 ,0, 0, alarm_logo, 128, 64, Display_COLOR_WHITE);	//data of picture into RAM	(available pictures: helix & looping)
 8000386:	2301      	movs	r3, #1
 8000388:	9302      	str	r3, [sp, #8]
 800038a:	2340      	movs	r3, #64	; 0x40
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	4b47      	ldr	r3, [pc, #284]	; (80004b0 <main+0x1dc>)
 8000394:	2200      	movs	r2, #0
 8000396:	2100      	movs	r1, #0
 8000398:	483e      	ldr	r0, [pc, #248]	; (8000494 <main+0x1c0>)
 800039a:	f000 f906 	bl	80005aa <Display_DrawBitmap>
	Display_UpdateScreen(&lcd1);
 800039e:	483d      	ldr	r0, [pc, #244]	; (8000494 <main+0x1c0>)
 80003a0:	f000 fa71 	bl	8000886 <Display_UpdateScreen>

	Display_Fill(&lcd2, Display_COLOR_WHITE );	//the entire Display is white (written to RAM)
 80003a4:	2101      	movs	r1, #1
 80003a6:	483d      	ldr	r0, [pc, #244]	; (800049c <main+0x1c8>)
 80003a8:	f000 faa5 	bl	80008f6 <Display_Fill>
	Display_UpdateScreen(&lcd2);
 80003ac:	483b      	ldr	r0, [pc, #236]	; (800049c <main+0x1c8>)
 80003ae:	f000 fa6a 	bl	8000886 <Display_UpdateScreen>


	Display_Fill(&lcd3, Display_COLOR_BLACK);	//the entire Display is white (written to RAM)
 80003b2:	2100      	movs	r1, #0
 80003b4:	483b      	ldr	r0, [pc, #236]	; (80004a4 <main+0x1d0>)
 80003b6:	f000 fa9e 	bl	80008f6 <Display_Fill>
	Display_DrawBitmap(&lcd3 ,0, 0, horse_image, 128, 64, Display_COLOR_WHITE);	//data of picture into RAM	(available pictures: helix & looping)
 80003ba:	2301      	movs	r3, #1
 80003bc:	9302      	str	r3, [sp, #8]
 80003be:	2340      	movs	r3, #64	; 0x40
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2380      	movs	r3, #128	; 0x80
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	4b3b      	ldr	r3, [pc, #236]	; (80004b4 <main+0x1e0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	2100      	movs	r1, #0
 80003cc:	4835      	ldr	r0, [pc, #212]	; (80004a4 <main+0x1d0>)
 80003ce:	f000 f8ec 	bl	80005aa <Display_DrawBitmap>
	Display_UpdateScreen(&lcd3);
 80003d2:	4834      	ldr	r0, [pc, #208]	; (80004a4 <main+0x1d0>)
 80003d4:	f000 fa57 	bl	8000886 <Display_UpdateScreen>


	rtc_time_t t ;
	rtc_date_t d ;

	rtc_get_date(&d) ;
 80003d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 f95f 	bl	80016a0 <rtc_get_date>

	char my_date[60] ;

	while(1)
	{
		rtc_get_time(&t) ;
 80003e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 f8de 	bl	80015a8 <rtc_get_time>

		sprintf(my_time , "%.2d:%.2d:%.2d",t.hr , t.min , t.sec) ;
 80003ec:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80003f0:	461a      	mov	r2, r3
 80003f2:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80003f6:	4619      	mov	r1, r3
 80003f8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80003fc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	460b      	mov	r3, r1
 8000404:	492c      	ldr	r1, [pc, #176]	; (80004b8 <main+0x1e4>)
 8000406:	f001 f9c3 	bl	8001790 <siprintf>
		sprintf(my_date , " 20%.2d/%.2d/%.2d" , d.year , d.month ,d.day) ;
 800040a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800040e:	461a      	mov	r2, r3
 8000410:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000414:	4619      	mov	r1, r3
 8000416:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800041a:	1d38      	adds	r0, r7, #4
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	460b      	mov	r3, r1
 8000420:	4926      	ldr	r1, [pc, #152]	; (80004bc <main+0x1e8>)
 8000422:	f001 f9b5 	bl	8001790 <siprintf>

		Display_GotoXY(&lcd2 , 20,5);
 8000426:	2205      	movs	r2, #5
 8000428:	2114      	movs	r1, #20
 800042a:	481c      	ldr	r0, [pc, #112]	; (800049c <main+0x1c8>)
 800042c:	f000 fadf 	bl	80009ee <Display_GotoXY>

		Display_Puts(&lcd2 ,my_time ,& Font_7x10 , Display_COLOR_BLACK ) ;
 8000430:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000434:	2300      	movs	r3, #0
 8000436:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <main+0x1ec>)
 8000438:	4818      	ldr	r0, [pc, #96]	; (800049c <main+0x1c8>)
 800043a:	f000 fb74 	bl	8000b26 <Display_Puts>

		Display_GotoXY(&lcd2 , 20,20);
 800043e:	2214      	movs	r2, #20
 8000440:	2114      	movs	r1, #20
 8000442:	4816      	ldr	r0, [pc, #88]	; (800049c <main+0x1c8>)
 8000444:	f000 fad3 	bl	80009ee <Display_GotoXY>

		Display_Puts(&lcd2 ,my_date ,& Font_7x10 , Display_COLOR_BLACK ) ;
 8000448:	1d39      	adds	r1, r7, #4
 800044a:	2300      	movs	r3, #0
 800044c:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <main+0x1ec>)
 800044e:	4813      	ldr	r0, [pc, #76]	; (800049c <main+0x1c8>)
 8000450:	f000 fb69 	bl	8000b26 <Display_Puts>

		Display_UpdateScreen(&lcd2);
 8000454:	4811      	ldr	r0, [pc, #68]	; (800049c <main+0x1c8>)
 8000456:	f000 fa16 	bl	8000886 <Display_UpdateScreen>
		//delay_ms(10);
		char c = keypad_get_pressedkey() ;
 800045a:	f000 ffc7 	bl	80013ec <keypad_get_pressedkey>
 800045e:	4603      	mov	r3, r0
 8000460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if(c != 0)
 8000464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000468:	2b00      	cmp	r3, #0
 800046a:	d0ba      	beq.n	80003e2 <main+0x10e>
		{
			gpio_set_pinState(GPIOA , 5 , HIGH) ;
 800046c:	2200      	movs	r2, #0
 800046e:	2105      	movs	r1, #5
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f000 fd1c 	bl	8000eb0 <gpio_set_pinState>
			Display_Putc(&lcd2 , c , &Font_7x10 , Display_COLOR_BLACK) ;
 8000478:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 800047c:	2300      	movs	r3, #0
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <main+0x1ec>)
 8000480:	4806      	ldr	r0, [pc, #24]	; (800049c <main+0x1c8>)
 8000482:	f000 fac9 	bl	8000a18 <Display_Putc>
			Display_UpdateScreen(&lcd2);
 8000486:	4805      	ldr	r0, [pc, #20]	; (800049c <main+0x1c8>)
 8000488:	f000 f9fd 	bl	8000886 <Display_UpdateScreen>
	{
 800048c:	e7a9      	b.n	80003e2 <main+0x10e>
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000
 8000494:	200000a0 	.word	0x200000a0
 8000498:	40005400 	.word	0x40005400
 800049c:	200004ac 	.word	0x200004ac
 80004a0:	40005800 	.word	0x40005800
 80004a4:	200008b8 	.word	0x200008b8
 80004a8:	40007800 	.word	0x40007800
 80004ac:	48000800 	.word	0x48000800
 80004b0:	080020c0 	.word	0x080020c0
 80004b4:	080024c0 	.word	0x080024c0
 80004b8:	0800209c 	.word	0x0800209c
 80004bc:	080020ac 	.word	0x080020ac
 80004c0:	20000004 	.word	0x20000004

080004c4 <systick_enable>:
// core_cm4.h  Zeile 759 ->765
/**
  \brief  Structure type to access the System Timer (SysTick).
 */
void systick_enable()
{    //uint32_t SystemCoreClock_ = 8000000; //8 Mhz
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	SysTick->LOAD  = (SystemCoreClock_/1000) - 1;                  /* set reload register */
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <systick_enable+0x30>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <systick_enable+0x34>)
 80004ce:	fba2 2303 	umull	r2, r3, r2, r3
 80004d2:	099b      	lsrs	r3, r3, #6
 80004d4:	4a09      	ldr	r2, [pc, #36]	; (80004fc <systick_enable+0x38>)
 80004d6:	3b01      	subs	r3, #1
 80004d8:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80004da:	210f      	movs	r1, #15
 80004dc:	f04f 30ff 	mov.w	r0, #4294967295
 80004e0:	f7ff fece 	bl	8000280 <__NVIC_SetPriority>
	SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <systick_enable+0x38>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |  /*!< SysTick CTRL: CLKSOURCE Mask */
 80004ea:	4b04      	ldr	r3, [pc, #16]	; (80004fc <systick_enable+0x38>)
 80004ec:	2207      	movs	r2, #7
 80004ee:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_TICKINT_Msk   |
					 SysTick_CTRL_ENABLE_Msk;
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000000 	.word	0x20000000
 80004f8:	10624dd3 	.word	0x10624dd3
 80004fc:	e000e010 	.word	0xe000e010

08000500 <SysTick_Handler>:


void SysTick_Handler()
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  mtick++;
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <SysTick_Handler+0x18>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	4a03      	ldr	r2, [pc, #12]	; (8000518 <SysTick_Handler+0x18>)
 800050c:	6013      	str	r3, [r2, #0]
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	2000009c 	.word	0x2000009c

0800051c <delay_ms>:

void delay_ms(uint32_t ms)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t st = get_mtick();
 8000524:	f000 f810 	bl	8000548 <get_mtick>
 8000528:	60f8      	str	r0, [r7, #12]

  while( get_mtick() - st <ms);
 800052a:	bf00      	nop
 800052c:	f000 f80c 	bl	8000548 <get_mtick>
 8000530:	4602      	mov	r2, r0
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	429a      	cmp	r2, r3
 800053a:	d8f7      	bhi.n	800052c <delay_ms+0x10>
}
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <get_mtick>:

uint32_t get_mtick()
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return mtick;
 800054c:	4b02      	ldr	r3, [pc, #8]	; (8000558 <get_mtick+0x10>)
 800054e:	681b      	ldr	r3, [r3, #0]
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	2000009c 	.word	0x2000009c

0800055c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800055c:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000590 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000560:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000562:	e003      	b.n	800056c <LoopCopyDataInit>

08000564 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000566:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000568:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800056a:	3104      	adds	r1, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <LoopForever+0xa>)
	ldr	r3, =_edata
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000570:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000572:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000574:	d3f6      	bcc.n	8000564 <CopyDataInit>
	ldr	r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000578:	e002      	b.n	8000580 <LoopFillZerobss>

0800057a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800057a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800057c:	f842 3b04 	str.w	r3, [r2], #4

08000580 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <LoopForever+0x16>)
	cmp	r2, r3
 8000582:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000584:	d3f9      	bcc.n	800057a <FillZerobss>

/* Call the clock system intitialization function.*/
    //bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 8000586:	f001 f8d7 	bl	8001738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058a:	f7ff fea3 	bl	80002d4 <main>

0800058e <LoopForever>:

LoopForever:
    b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000590:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000594:	08003068 	.word	0x08003068
	ldr	r0, =_sdata
 8000598:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800059c:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80005a0:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80005a4:	20000cec 	.word	0x20000cec

080005a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_2_IRQHandler>

080005aa <Display_DrawBitmap>:




void Display_DrawBitmap(OLED_t *oled ,uint16_t x, uint16_t y, const unsigned char *bitmap, uint16_t w, uint16_t h, Display_COLOR_t color)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b086      	sub	sp, #24
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	817b      	strh	r3, [r7, #10]
 80005b8:	4613      	mov	r3, r2
 80005ba:	813b      	strh	r3, [r7, #8]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80005bc:	8c3b      	ldrh	r3, [r7, #32]
 80005be:	3307      	adds	r3, #7
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	da00      	bge.n	80005c6 <Display_DrawBitmap+0x1c>
 80005c4:	3307      	adds	r3, #7
 80005c6:	10db      	asrs	r3, r3, #3
 80005c8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	82bb      	strh	r3, [r7, #20]
 80005d2:	e040      	b.n	8000656 <Display_DrawBitmap+0xac>
    {
        for(int16_t i=0; i<w; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	827b      	strh	r3, [r7, #18]
 80005d8:	e02f      	b.n	800063a <Display_DrawBitmap+0x90>
        {
            if(i & 7)
 80005da:	8a7b      	ldrh	r3, [r7, #18]
 80005dc:	f003 0307 	and.w	r3, r3, #7
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <Display_DrawBitmap+0x42>
            {
               byte <<= 1;
 80005e4:	7dfb      	ldrb	r3, [r7, #23]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	75fb      	strb	r3, [r7, #23]
 80005ea:	e012      	b.n	8000612 <Display_DrawBitmap+0x68>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80005ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80005f0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80005f4:	fb03 f202 	mul.w	r2, r3, r2
 80005f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da00      	bge.n	8000602 <Display_DrawBitmap+0x58>
 8000600:	3307      	adds	r3, #7
 8000602:	10db      	asrs	r3, r3, #3
 8000604:	b21b      	sxth	r3, r3
 8000606:	4413      	add	r3, r2
 8000608:	461a      	mov	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80)
 8000612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000616:	2b00      	cmp	r3, #0
 8000618:	da09      	bge.n	800062e <Display_DrawBitmap+0x84>
            	Display_DrawPixel(oled ,x+i, y, color);
 800061a:	8a7a      	ldrh	r2, [r7, #18]
 800061c:	897b      	ldrh	r3, [r7, #10]
 800061e:	4413      	add	r3, r2
 8000620:	b299      	uxth	r1, r3
 8000622:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000626:	893a      	ldrh	r2, [r7, #8]
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	f000 f97b 	bl	8000924 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800062e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000632:	b29b      	uxth	r3, r3
 8000634:	3301      	adds	r3, #1
 8000636:	b29b      	uxth	r3, r3
 8000638:	827b      	strh	r3, [r7, #18]
 800063a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800063e:	8c3b      	ldrh	r3, [r7, #32]
 8000640:	429a      	cmp	r2, r3
 8000642:	dbca      	blt.n	80005da <Display_DrawBitmap+0x30>
    for(int16_t j=0; j<h; j++, y++)
 8000644:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000648:	b29b      	uxth	r3, r3
 800064a:	3301      	adds	r3, #1
 800064c:	b29b      	uxth	r3, r3
 800064e:	82bb      	strh	r3, [r7, #20]
 8000650:	893b      	ldrh	r3, [r7, #8]
 8000652:	3301      	adds	r3, #1
 8000654:	813b      	strh	r3, [r7, #8]
 8000656:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800065a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800065c:	429a      	cmp	r2, r3
 800065e:	dbb9      	blt.n	80005d4 <Display_DrawBitmap+0x2a>
        }
    }
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <Display_Init>:




uint8_t Display_Init(OLED_t * oled) {
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af02      	add	r7, sp, #8
 8000670:	6078      	str	r0, [r7, #4]

	//delay
	uint32_t p = 2500;
 8000672:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000676:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000678:	e002      	b.n	8000680 <Display_Init+0x16>
		p--;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3b01      	subs	r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
	while(p>0)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f9      	bne.n	800067a <Display_Init+0x10>

	Display_WriteCommand(oled , 0xAE); //display off
 8000686:	2302      	movs	r3, #2
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	23ae      	movs	r3, #174	; 0xae
 800068c:	2200      	movs	r2, #0
 800068e:	213c      	movs	r1, #60	; 0x3c
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 fafa 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //Set Memory Addressing Mode
 8000696:	2302      	movs	r3, #2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2320      	movs	r3, #32
 800069c:	2200      	movs	r2, #0
 800069e:	213c      	movs	r1, #60	; 0x3c
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 faf2 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80006a6:	2302      	movs	r3, #2
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2310      	movs	r3, #16
 80006ac:	2200      	movs	r2, #0
 80006ae:	213c      	movs	r1, #60	; 0x3c
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 faea 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006b6:	2302      	movs	r3, #2
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	23b0      	movs	r3, #176	; 0xb0
 80006bc:	2200      	movs	r2, #0
 80006be:	213c      	movs	r1, #60	; 0x3c
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 fae2 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xC8); //Set COM Output Scan Direction
 80006c6:	2302      	movs	r3, #2
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	23c8      	movs	r3, #200	; 0xc8
 80006cc:	2200      	movs	r2, #0
 80006ce:	213c      	movs	r1, #60	; 0x3c
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 fada 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //---set low column address
 80006d6:	2302      	movs	r3, #2
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2300      	movs	r3, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	213c      	movs	r1, #60	; 0x3c
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 fad2 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x10); //---set high column address
 80006e6:	2302      	movs	r3, #2
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2310      	movs	r3, #16
 80006ec:	2200      	movs	r2, #0
 80006ee:	213c      	movs	r1, #60	; 0x3c
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 faca 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x40); //--set start line address
 80006f6:	2302      	movs	r3, #2
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	2200      	movs	r2, #0
 80006fe:	213c      	movs	r1, #60	; 0x3c
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 fac2 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x81); //--set contrast control register
 8000706:	2302      	movs	r3, #2
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2381      	movs	r3, #129	; 0x81
 800070c:	2200      	movs	r2, #0
 800070e:	213c      	movs	r1, #60	; 0x3c
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 faba 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xFF);
 8000716:	2302      	movs	r3, #2
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	23ff      	movs	r3, #255	; 0xff
 800071c:	2200      	movs	r2, #0
 800071e:	213c      	movs	r1, #60	; 0x3c
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 fab2 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA1); //--set segment re-map 0 to 127
 8000726:	2302      	movs	r3, #2
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	23a1      	movs	r3, #161	; 0xa1
 800072c:	2200      	movs	r2, #0
 800072e:	213c      	movs	r1, #60	; 0x3c
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 faaa 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA6); //--set normal display
 8000736:	2302      	movs	r3, #2
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	23a6      	movs	r3, #166	; 0xa6
 800073c:	2200      	movs	r2, #0
 800073e:	213c      	movs	r1, #60	; 0x3c
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f000 faa2 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA8); //--set multiplex ratio(1 to 64)
 8000746:	2302      	movs	r3, #2
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	23a8      	movs	r3, #168	; 0xa8
 800074c:	2200      	movs	r2, #0
 800074e:	213c      	movs	r1, #60	; 0x3c
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 fa9a 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x3F); //
 8000756:	2302      	movs	r3, #2
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	233f      	movs	r3, #63	; 0x3f
 800075c:	2200      	movs	r2, #0
 800075e:	213c      	movs	r1, #60	; 0x3c
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 fa92 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000766:	2302      	movs	r3, #2
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	23a4      	movs	r3, #164	; 0xa4
 800076c:	2200      	movs	r2, #0
 800076e:	213c      	movs	r1, #60	; 0x3c
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 fa8a 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD3); //-set display offset
 8000776:	2302      	movs	r3, #2
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	23d3      	movs	r3, #211	; 0xd3
 800077c:	2200      	movs	r2, #0
 800077e:	213c      	movs	r1, #60	; 0x3c
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 fa82 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x00); //-not offset
 8000786:	2302      	movs	r3, #2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	2200      	movs	r2, #0
 800078e:	213c      	movs	r1, #60	; 0x3c
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 fa7a 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD5); //--set display clock divide ratio/oscillator frequency
 8000796:	2302      	movs	r3, #2
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	23d5      	movs	r3, #213	; 0xd5
 800079c:	2200      	movs	r2, #0
 800079e:	213c      	movs	r1, #60	; 0x3c
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 fa72 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xF0); //--set divide ratio
 80007a6:	2302      	movs	r3, #2
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	23f0      	movs	r3, #240	; 0xf0
 80007ac:	2200      	movs	r2, #0
 80007ae:	213c      	movs	r1, #60	; 0x3c
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 fa6a 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xD9); //--set pre-charge period
 80007b6:	2302      	movs	r3, #2
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	23d9      	movs	r3, #217	; 0xd9
 80007bc:	2200      	movs	r2, #0
 80007be:	213c      	movs	r1, #60	; 0x3c
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 fa62 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x22); //
 80007c6:	2302      	movs	r3, #2
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2322      	movs	r3, #34	; 0x22
 80007cc:	2200      	movs	r2, #0
 80007ce:	213c      	movs	r1, #60	; 0x3c
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 fa5a 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDA); //--set Com pins hardware configuration
 80007d6:	2302      	movs	r3, #2
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	23da      	movs	r3, #218	; 0xda
 80007dc:	2200      	movs	r2, #0
 80007de:	213c      	movs	r1, #60	; 0x3c
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 fa52 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x12);
 80007e6:	2302      	movs	r3, #2
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2312      	movs	r3, #18
 80007ec:	2200      	movs	r2, #0
 80007ee:	213c      	movs	r1, #60	; 0x3c
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 fa4a 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xDB); //--set vcomh
 80007f6:	2302      	movs	r3, #2
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	23db      	movs	r3, #219	; 0xdb
 80007fc:	2200      	movs	r2, #0
 80007fe:	213c      	movs	r1, #60	; 0x3c
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 fa42 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x20); //0x20,0.77xVcc
 8000806:	2302      	movs	r3, #2
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2320      	movs	r3, #32
 800080c:	2200      	movs	r2, #0
 800080e:	213c      	movs	r1, #60	; 0x3c
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 fa3a 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x8D); //--set DC-DC enable
 8000816:	2302      	movs	r3, #2
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	238d      	movs	r3, #141	; 0x8d
 800081c:	2200      	movs	r2, #0
 800081e:	213c      	movs	r1, #60	; 0x3c
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 fa32 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0x14); //
 8000826:	2302      	movs	r3, #2
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2314      	movs	r3, #20
 800082c:	2200      	movs	r2, #0
 800082e:	213c      	movs	r1, #60	; 0x3c
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 fa2a 	bl	8000c8a <Display_I2C_Write>
	Display_WriteCommand(oled , 0xAF); //--turn on SSD1306 panel
 8000836:	2302      	movs	r3, #2
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	23af      	movs	r3, #175	; 0xaf
 800083c:	2200      	movs	r2, #0
 800083e:	213c      	movs	r1, #60	; 0x3c
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 fa22 	bl	8000c8a <Display_I2C_Write>


	Display_WriteCommand(oled ,Display_DEACTIVATE_SCROLL);
 8000846:	2302      	movs	r3, #2
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	232e      	movs	r3, #46	; 0x2e
 800084c:	2200      	movs	r2, #0
 800084e:	213c      	movs	r1, #60	; 0x3c
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 fa1a 	bl	8000c8a <Display_I2C_Write>
	//Display_Fill(Display_COLOR_WHITE);	// Clear screen
	Display_Fill(oled ,Display_COLOR_BLACK);	// Clear screen
 8000856:	2100      	movs	r1, #0
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 f84c 	bl	80008f6 <Display_Fill>
	Display_UpdateScreen(oled);		// Update screen
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f811 	bl	8000886 <Display_UpdateScreen>

	// Set default values
	oled->CurrentX = 0;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = 0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406

	// Initialized OK
	oled->Initialized = 1;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2201      	movs	r2, #1
 8000878:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409

	// Return OK
	return 1;
 800087c:	2301      	movs	r3, #1
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <Display_UpdateScreen>:

void Display_UpdateScreen(OLED_t * oled) {
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af02      	add	r7, sp, #8
 800088c:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e028      	b.n	80008e6 <Display_UpdateScreen+0x60>
		Display_WriteCommand(oled , 0xB0 + m);
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	3b50      	subs	r3, #80	; 0x50
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2202      	movs	r2, #2
 800089c:	9200      	str	r2, [sp, #0]
 800089e:	2200      	movs	r2, #0
 80008a0:	213c      	movs	r1, #60	; 0x3c
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f9f1 	bl	8000c8a <Display_I2C_Write>
		Display_WriteCommand(oled , 0x00);
 80008a8:	2302      	movs	r3, #2
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2300      	movs	r3, #0
 80008ae:	2200      	movs	r2, #0
 80008b0:	213c      	movs	r1, #60	; 0x3c
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 f9e9 	bl	8000c8a <Display_I2C_Write>
		Display_WriteCommand(oled , 0x10);
 80008b8:	2302      	movs	r3, #2
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2310      	movs	r3, #16
 80008be:	2200      	movs	r2, #0
 80008c0:	213c      	movs	r1, #60	; 0x3c
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f000 f9e1 	bl	8000c8a <Display_I2C_Write>

		Display_I2C_WriteMulti(oled , 0x3C, 0x40, &(oled->Display_Buffer[Display_WIDTH * m]), Display_WIDTH);
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	01db      	lsls	r3, r3, #7
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4413      	add	r3, r2
 80008d0:	3304      	adds	r3, #4
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	9200      	str	r2, [sp, #0]
 80008d6:	2240      	movs	r2, #64	; 0x40
 80008d8:	213c      	movs	r1, #60	; 0x3c
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f948 	bl	8000b70 <Display_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	3301      	adds	r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	2b07      	cmp	r3, #7
 80008ea:	d9d3      	bls.n	8000894 <Display_UpdateScreen+0xe>

	}
}
 80008ec:	bf00      	nop
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <Display_Fill>:


void Display_Fill(OLED_t * oled , Display_COLOR_t color) {
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	70fb      	strb	r3, [r7, #3]
	// Set memory, fill a block of memory with value
	memset(oled->Display_Buffer, (color == Display_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(oled->Display_Buffer));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	1d18      	adds	r0, r3, #4
 8000906:	78fb      	ldrb	r3, [r7, #3]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d101      	bne.n	8000910 <Display_Fill+0x1a>
 800090c:	2300      	movs	r3, #0
 800090e:	e000      	b.n	8000912 <Display_Fill+0x1c>
 8000910:	23ff      	movs	r3, #255	; 0xff
 8000912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000916:	4619      	mov	r1, r3
 8000918:	f000 ff32 	bl	8001780 <memset>
  //memset(starting address, value to be filled, number of bytes to be filled)
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <Display_DrawPixel>:


void Display_DrawPixel(OLED_t * oled ,uint16_t x, uint16_t y, Display_COLOR_t color) {
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	4608      	mov	r0, r1
 800092e:	4611      	mov	r1, r2
 8000930:	461a      	mov	r2, r3
 8000932:	4603      	mov	r3, r0
 8000934:	817b      	strh	r3, [r7, #10]
 8000936:	460b      	mov	r3, r1
 8000938:	813b      	strh	r3, [r7, #8]
 800093a:	4613      	mov	r3, r2
 800093c:	71fb      	strb	r3, [r7, #7]

	if (x >= Display_WIDTH || y >= Display_HEIGHT)
 800093e:	897b      	ldrh	r3, [r7, #10]
 8000940:	2b7f      	cmp	r3, #127	; 0x7f
 8000942:	d84f      	bhi.n	80009e4 <Display_DrawPixel+0xc0>
 8000944:	893b      	ldrh	r3, [r7, #8]
 8000946:	2b3f      	cmp	r3, #63	; 0x3f
 8000948:	d84c      	bhi.n	80009e4 <Display_DrawPixel+0xc0>
		// Error
		return;
	}

	// Check if pixels are inverted
	if (oled->Inverted) {
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8000950:	2b00      	cmp	r3, #0
 8000952:	d006      	beq.n	8000962 <Display_DrawPixel+0x3e>
		color = (Display_COLOR_t)!color;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf0c      	ite	eq
 800095a:	2301      	moveq	r3, #1
 800095c:	2300      	movne	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	71fb      	strb	r3, [r7, #7]
	}

	// Set color
	if (color == Display_COLOR_WHITE) {
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d11d      	bne.n	80009a4 <Display_DrawPixel+0x80>
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] |= 1 << (y % 8);
 8000968:	897a      	ldrh	r2, [r7, #10]
 800096a:	893b      	ldrh	r3, [r7, #8]
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	b298      	uxth	r0, r3
 8000970:	4603      	mov	r3, r0
 8000972:	01db      	lsls	r3, r3, #7
 8000974:	4413      	add	r3, r2
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	4413      	add	r3, r2
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	b25a      	sxtb	r2, r3
 800097e:	893b      	ldrh	r3, [r7, #8]
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	2101      	movs	r1, #1
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	b25b      	sxtb	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b259      	sxtb	r1, r3
 8000990:	897a      	ldrh	r2, [r7, #10]
 8000992:	4603      	mov	r3, r0
 8000994:	01db      	lsls	r3, r3, #7
 8000996:	4413      	add	r3, r2
 8000998:	b2c9      	uxtb	r1, r1
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	4413      	add	r3, r2
 800099e:	460a      	mov	r2, r1
 80009a0:	711a      	strb	r2, [r3, #4]
 80009a2:	e020      	b.n	80009e6 <Display_DrawPixel+0xc2>
	} else {
		oled->Display_Buffer[x + (y / 8) * Display_WIDTH] &= ~(1 << (y % 8));
 80009a4:	897a      	ldrh	r2, [r7, #10]
 80009a6:	893b      	ldrh	r3, [r7, #8]
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	b298      	uxth	r0, r3
 80009ac:	4603      	mov	r3, r0
 80009ae:	01db      	lsls	r3, r3, #7
 80009b0:	4413      	add	r3, r2
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	b25a      	sxtb	r2, r3
 80009ba:	893b      	ldrh	r3, [r7, #8]
 80009bc:	f003 0307 	and.w	r3, r3, #7
 80009c0:	2101      	movs	r1, #1
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	b259      	sxtb	r1, r3
 80009d0:	897a      	ldrh	r2, [r7, #10]
 80009d2:	4603      	mov	r3, r0
 80009d4:	01db      	lsls	r3, r3, #7
 80009d6:	4413      	add	r3, r2
 80009d8:	b2c9      	uxtb	r1, r1
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	460a      	mov	r2, r1
 80009e0:	711a      	strb	r2, [r3, #4]
 80009e2:	e000      	b.n	80009e6 <Display_DrawPixel+0xc2>
		return;
 80009e4:	bf00      	nop
	}
}
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <Display_GotoXY>:


void Display_GotoXY(OLED_t * oled ,uint16_t x, uint16_t y) {
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	460b      	mov	r3, r1
 80009f8:	807b      	strh	r3, [r7, #2]
 80009fa:	4613      	mov	r3, r2
 80009fc:	803b      	strh	r3, [r7, #0]
	// Set write pointers
	oled->CurrentX = x;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	887a      	ldrh	r2, [r7, #2]
 8000a02:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	oled->CurrentY = y;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	883a      	ldrh	r2, [r7, #0]
 8000a0a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <Display_Putc>:


char Display_Putc(OLED_t * oled ,char ch, FontDef_t *Font, Display_COLOR_t color) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	461a      	mov	r2, r3
 8000a24:	460b      	mov	r3, r1
 8000a26:	72fb      	strb	r3, [r7, #11]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;

	// Check available space in LCD
	if (
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000a32:	461a      	mov	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4413      	add	r3, r2
	if (
 8000a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3c:	dc08      	bgt.n	8000a50 <Display_Putc+0x38>
		Display_HEIGHT <= (oled->CurrentY + Font->FontHeight)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000a44:	461a      	mov	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	785b      	ldrb	r3, [r3, #1]
 8000a4a:	4413      	add	r3, r2
		Display_WIDTH <= (oled->CurrentX + Font->FontWidth) ||
 8000a4c:	2b3f      	cmp	r3, #63	; 0x3f
 8000a4e:	dd01      	ble.n	8000a54 <Display_Putc+0x3c>
	) {
		// Error
		return 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	e064      	b.n	8000b1e <Display_Putc+0x106>
	}

	// Go through font
	for (i = 0; i < Font->FontHeight; i++) {
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
 8000a58:	e04f      	b.n	8000afa <Display_Putc+0xe2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	7afb      	ldrb	r3, [r7, #11]
 8000a60:	3b20      	subs	r3, #32
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	7849      	ldrb	r1, [r1, #1]
 8000a66:	fb01 f303 	mul.w	r3, r1, r3
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	440b      	add	r3, r1
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	e034      	b.n	8000ae8 <Display_Putc+0xd0>
			if ((b << j) & 0x8000) {
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d012      	beq.n	8000ab4 <Display_Putc+0x9c>
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t) color);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	b299      	uxth	r1, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	7abb      	ldrb	r3, [r7, #10]
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f7ff ff39 	bl	8000924 <Display_DrawPixel>
 8000ab2:	e016      	b.n	8000ae2 <Display_Putc+0xca>
			} else {
				Display_DrawPixel(oled ,oled->CurrentX + j, (oled->CurrentY + i), (Display_COLOR_t)!color);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	4413      	add	r3, r2
 8000ac0:	b299      	uxth	r1, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	4413      	add	r3, r2
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	7abb      	ldrb	r3, [r7, #10]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bf0c      	ite	eq
 8000ad6:	2301      	moveq	r3, #1
 8000ad8:	2300      	movne	r3, #0
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f7ff ff21 	bl	8000924 <Display_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d3c4      	bcc.n	8000a7e <Display_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	3301      	adds	r3, #1
 8000af8:	61fb      	str	r3, [r7, #28]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	785b      	ldrb	r3, [r3, #1]
 8000afe:	461a      	mov	r2, r3
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d3a9      	bcc.n	8000a5a <Display_Putc+0x42>
			}
		}
	}

	// Increase pointer
	oled->CurrentX += Font->FontWidth;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

	// Return character written
	return ch;
 8000b1c:	7afb      	ldrb	r3, [r7, #11]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <Display_Puts>:


char Display_Puts(OLED_t * oled ,char* str, FontDef_t* Font, Display_COLOR_t color) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	70fb      	strb	r3, [r7, #3]
	// Write characters
	while (*str) {
 8000b34:	e012      	b.n	8000b5c <Display_Puts+0x36>
		// Write character by character
		if (Display_Putc(oled ,*str, Font, color) != *str) {
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	7819      	ldrb	r1, [r3, #0]
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff ff6a 	bl	8000a18 <Display_Putc>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d002      	beq.n	8000b56 <Display_Puts+0x30>
			// Return error
			return *str;
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	e008      	b.n	8000b68 <Display_Puts+0x42>
		}

		// Increase string pointer
		str++;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1e8      	bne.n	8000b36 <Display_Puts+0x10>
	}

	// Everything OK, zero should be returned
	return *str;
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	781b      	ldrb	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <Display_I2C_WriteMulti>:




void Display_I2C_WriteMulti(OLED_t * oled,uint8_t address, uint8_t dataRegister, uint8_t *data , uint16_t numBytes)	//data is a pointer
{
 8000b70:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000b74:	b089      	sub	sp, #36	; 0x24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	72fb      	strb	r3, [r7, #11]
 8000b80:	4613      	mov	r3, r2
 8000b82:	72bb      	strb	r3, [r7, #10]
 8000b84:	466b      	mov	r3, sp
 8000b86:	4618      	mov	r0, r3
	uint8_t i;
	uint8_t j;
	uint8_t dt[numBytes];		//necessary for multi Write
 8000b88:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	b28b      	uxth	r3, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	4698      	mov	r8, r3
 8000b96:	4691      	mov	r9, r2
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ba4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ba8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bac:	b28b      	uxth	r3, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	461c      	mov	r4, r3
 8000bb2:	4615      	mov	r5, r2
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	00eb      	lsls	r3, r5, #3
 8000bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bc2:	00e2      	lsls	r2, r4, #3
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	3307      	adds	r3, #7
 8000bc8:	08db      	lsrs	r3, r3, #3
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	ebad 0d03 	sub.w	sp, sp, r3
 8000bd0:	466b      	mov	r3, sp
 8000bd2:	3300      	adds	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
	I2C_TypeDef *  i2c = oled->dev;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8000bdc:	7afb      	ldrb	r3, [r7, #11]
 8000bde:	005a      	lsls	r2, r3, #1
 8000be0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000be2:	041b      	lsls	r3, r3, #16
 8000be4:	4313      	orrs	r3, r2
 8000be6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000bfa:	e007      	b.n	8000c0c <Display_I2C_WriteMulti+0x9c>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0310 	and.w	r3, r3, #16
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <Display_I2C_WriteMulti+0x9c>
 8000c08:	4685      	mov	sp, r0
 8000c0a:	e039      	b.n	8000c80 <Display_I2C_WriteMulti+0x110>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f1      	beq.n	8000bfc <Display_I2C_WriteMulti+0x8c>
			return;}}

	dt[0] = dataRegister;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	7aba      	ldrb	r2, [r7, #10]
 8000c1c:	701a      	strb	r2, [r3, #0]
	for(i=0; i<numBytes; i++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	77bb      	strb	r3, [r7, #30]
 8000c22:	e00a      	b.n	8000c3a <Display_I2C_WriteMulti+0xca>
	{
	dt[i+1] = data[i];	//necessary for multi Write
 8000c24:	7fbb      	ldrb	r3, [r7, #30]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	441a      	add	r2, r3
 8000c2a:	7fbb      	ldrb	r3, [r7, #30]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	7811      	ldrb	r1, [r2, #0]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<numBytes; i++)
 8000c34:	7fbb      	ldrb	r3, [r7, #30]
 8000c36:	3301      	adds	r3, #1
 8000c38:	77bb      	strb	r3, [r7, #30]
 8000c3a:	7fbb      	ldrb	r3, [r7, #30]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8ef      	bhi.n	8000c24 <Display_I2C_WriteMulti+0xb4>
	}

	for(j=0; j <= (numBytes-1); j++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	77fb      	strb	r3, [r7, #31]
 8000c48:	e014      	b.n	8000c74 <Display_I2C_WriteMulti+0x104>
	{
		i2c->TXDR = dt[j];
 8000c4a:	7ffb      	ldrb	r3, [r7, #31]
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	5cd3      	ldrb	r3, [r2, r3]
 8000c50:	461a      	mov	r2, r3
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000c56:	7ffa      	ldrb	r2, [r7, #31]
 8000c58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	da06      	bge.n	8000c6e <Display_I2C_WriteMulti+0xfe>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}		//ggf TXIS mit TXE ergänzen
 8000c60:	bf00      	nop
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0f9      	beq.n	8000c62 <Display_I2C_WriteMulti+0xf2>
	for(j=0; j <= (numBytes-1); j++)
 8000c6e:	7ffb      	ldrb	r3, [r7, #31]
 8000c70:	3301      	adds	r3, #1
 8000c72:	77fb      	strb	r3, [r7, #31]
 8000c74:	7ffb      	ldrb	r3, [r7, #31]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d8e5      	bhi.n	8000c4a <Display_I2C_WriteMulti+0xda>
 8000c7e:	4685      	mov	sp, r0
		}
	}

}
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000c88:	4770      	bx	lr

08000c8a <Display_I2C_Write>:


void Display_I2C_Write(OLED_t * oled, uint8_t address, uint8_t dataRegister, uint8_t data , uint8_t numBytes)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b087      	sub	sp, #28
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	4608      	mov	r0, r1
 8000c94:	4611      	mov	r1, r2
 8000c96:	461a      	mov	r2, r3
 8000c98:	4603      	mov	r3, r0
 8000c9a:	70fb      	strb	r3, [r7, #3]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70bb      	strb	r3, [r7, #2]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	707b      	strb	r3, [r7, #1]


	uint8_t j;
	uint8_t dt[2];
	I2C_TypeDef *  i2c = oled->dev;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	613b      	str	r3, [r7, #16]
	dt[0] = dataRegister;
 8000caa:	78bb      	ldrb	r3, [r7, #2]
 8000cac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000cae:	787b      	ldrb	r3, [r7, #1]
 8000cb0:	737b      	strb	r3, [r7, #13]

	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (numBytes << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	005a      	lsls	r2, r3, #1
 8000cb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cba:	041b      	lsls	r3, r3, #16
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START;
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	605a      	str	r2, [r3, #4]
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000cd2:	e005      	b.n	8000ce0 <Display_I2C_Write+0x56>
		if ((i2c->ISR & I2C_ISR_NACKF)){
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d126      	bne.n	8000d2e <Display_I2C_Write+0xa4>
	while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f3      	beq.n	8000cd4 <Display_I2C_Write+0x4a>
			return;}}

	for(j=0; j <= (numBytes-1); j++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	75fb      	strb	r3, [r7, #23]
 8000cf0:	e017      	b.n	8000d22 <Display_I2C_Write+0x98>
	{
		i2c->TXDR = dt[j];
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]
 8000cf4:	3318      	adds	r3, #24
 8000cf6:	443b      	add	r3, r7
 8000cf8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
		if(j < (numBytes-1))
 8000d02:	7dfa      	ldrb	r2, [r7, #23]
 8000d04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	da06      	bge.n	8000d1c <Display_I2C_Write+0x92>
		{
			while((i2c->ISR & I2C_ISR_TXIS)==0){}
 8000d0e:	bf00      	nop
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f9      	beq.n	8000d10 <Display_I2C_Write+0x86>
	for(j=0; j <= (numBytes-1); j++)
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	75fb      	strb	r3, [r7, #23]
 8000d22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8e2      	bhi.n	8000cf2 <Display_I2C_Write+0x68>
 8000d2c:	e000      	b.n	8000d30 <Display_I2C_Write+0xa6>
			return;}}
 8000d2e:	bf00      	nop
		}
	}

}
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <gpio_clock_enable>:
 * After each device reset, all peripheral clocks are disabled (except for the SRAM and FLITF).
Before using a peripheral user has to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.  s.50
 */
void gpio_clock_enable(GPIO_TypeDef * Port)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	if(Port == GPIOA)        //  Bit 17 IOPAEN: I/O port A clock enable
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d46:	d106      	bne.n	8000d56 <gpio_clock_enable+0x1e>
	{
		RCC->AHBENR |= (1 << GPIOA_CLOCK_ENABLE_BIT) ; //(1<<17);
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	4a2a      	ldr	r2, [pc, #168]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d52:	6153      	str	r3, [r2, #20]
	}
	*/
	else{

	}
}
 8000d54:	e04b      	b.n	8000dee <gpio_clock_enable+0xb6>
	else if(Port == GPIOB)  //    Bit 18 IOPBEN: I/O port B  clock enable
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <gpio_clock_enable+0xc4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d106      	bne.n	8000d6c <gpio_clock_enable+0x34>
		RCC->AHBENR |= (1 << GPIOB_CLOCK_ENABLE_BIT) ;
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d68:	6153      	str	r3, [r2, #20]
}
 8000d6a:	e040      	b.n	8000dee <gpio_clock_enable+0xb6>
	else if(Port == GPIOC)   //  Bit 19 IOPCEN: I/O port C clock enable
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a24      	ldr	r2, [pc, #144]	; (8000e00 <gpio_clock_enable+0xc8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d106      	bne.n	8000d82 <gpio_clock_enable+0x4a>
		RCC->AHBENR |= (1 << GPIOC_CLOCK_ENABLE_BIT) ;
 8000d74:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d7e:	6153      	str	r3, [r2, #20]
}
 8000d80:	e035      	b.n	8000dee <gpio_clock_enable+0xb6>
	else if(Port == GPIOD)    //  Bit 20 IOPDEN: I/O port D clock enable
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <gpio_clock_enable+0xcc>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d106      	bne.n	8000d98 <gpio_clock_enable+0x60>
		RCC->AHBENR |= (1 << GPIOD_CLOCK_ENABLE_BIT) ;
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d94:	6153      	str	r3, [r2, #20]
}
 8000d96:	e02a      	b.n	8000dee <gpio_clock_enable+0xb6>
	else if(Port == GPIOE)    //  Bit 21 IOPEEN: I/O port E clock enable
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <gpio_clock_enable+0xd0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d106      	bne.n	8000dae <gpio_clock_enable+0x76>
		RCC->AHBENR |= (1 << GPIOE_CLOCK_ENABLE_BIT) ;
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000da6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000daa:	6153      	str	r3, [r2, #20]
}
 8000dac:	e01f      	b.n	8000dee <gpio_clock_enable+0xb6>
	else if(Port == GPIOF)   //  Bit 22 IOPFEN: I/O port F clock enable
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <gpio_clock_enable+0xd4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d106      	bne.n	8000dc4 <gpio_clock_enable+0x8c>
		RCC->AHBENR |= (1 << GPIOF_CLOCK_ENABLE_BIT) ;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000dbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc0:	6153      	str	r3, [r2, #20]
}
 8000dc2:	e014      	b.n	8000dee <gpio_clock_enable+0xb6>
	else if(Port == GPIOG)    //  Bit 23 IOPGEN: I/O port G clock enable
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <gpio_clock_enable+0xd8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d106      	bne.n	8000dda <gpio_clock_enable+0xa2>
		RCC->AHBENR |= (1 << GPIOG_CLOCK_ENABLE_BIT) ;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000dd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dd6:	6153      	str	r3, [r2, #20]
}
 8000dd8:	e009      	b.n	8000dee <gpio_clock_enable+0xb6>
	else if(Port == GPIOH)    //  Bit 16 IOPHEN: I/O port H clock enable
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <gpio_clock_enable+0xdc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d105      	bne.n	8000dee <gpio_clock_enable+0xb6>
		RCC->AHBENR |= (1 << GPIOH_CLOCK_ENABLE_BIT) ;
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <gpio_clock_enable+0xc0>)
 8000de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dec:	6153      	str	r3, [r2, #20]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	48000800 	.word	0x48000800
 8000e04:	48000c00 	.word	0x48000c00
 8000e08:	48001000 	.word	0x48001000
 8000e0c:	48001400 	.word	0x48001400
 8000e10:	48001800 	.word	0x48001800
 8000e14:	48001c00 	.word	0x48001c00

08000e18 <reset_io>:

void reset_io(GPIO_TypeDef * Port ) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	Port->MODER   = 0x00 ;             // set pin Mode
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
	Port->OTYPER  = 0x00 ;             //set output type OD/PP
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR = 0x00 ;             //set output speed
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  = 0x00 ;             //set pin Pull
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <gpio_config_pin>:

void gpio_config_pin(GPIO_TypeDef * Port , int Pin , GPIO_Mode_t Mode ,
					   GPIO_Speed_t speed ,GPIO_Pull_t pull, GPIO_out_type_t otype)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	461a      	mov	r2, r3
 8000e50:	460b      	mov	r3, r1
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	71bb      	strb	r3, [r7, #6]
	Port->MODER   |= (Mode  << 2 * Pin) ; // set  pin Mode
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	79f9      	ldrb	r1, [r7, #7]
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	0052      	lsls	r2, r2, #1
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	431a      	orrs	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	601a      	str	r2, [r3, #0]
	Port->OTYPER  |= (otype << Pin)     ; //set output type OD/PP
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	7f39      	ldrb	r1, [r7, #28]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR |= (speed << 2 * Pin) ; //set output speed
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	79b9      	ldrb	r1, [r7, #6]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	0052      	lsls	r2, r2, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  |= (pull  << 2 * Pin) ; //set pin Pull
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	7e39      	ldrb	r1, [r7, #24]
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	0052      	lsls	r2, r2, #1
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	60da      	str	r2, [r3, #12]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <gpio_set_pinState>:

void gpio_set_pinState(GPIO_TypeDef * Port , int Pin , Pin_State State)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	71fb      	strb	r3, [r7, #7]
	//assert pin < 16
	if(State == HIGH)
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d109      	bne.n	8000ed8 <gpio_set_pinState+0x28>
	{
		Port->ODR |= (1 << Pin) ;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	615a      	str	r2, [r3, #20]
	}
	else {
		Port->ODR &= ~(1 << Pin) ;
	}
}
 8000ed6:	e009      	b.n	8000eec <gpio_set_pinState+0x3c>
		Port->ODR &= ~(1 << Pin) ;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	2101      	movs	r1, #1
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee4:	43d2      	mvns	r2, r2
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	615a      	str	r2, [r3, #20]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
	...

08000ef8 <I2C_Init>:

/*
 * TESTED
 */
void I2C_Init(I2C_TypeDef * i2c)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]


 	 if( i2c == I2C1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a6e      	ldr	r2, [pc, #440]	; (80010bc <I2C_Init+0x1c4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d118      	bne.n	8000f3a <I2C_Init+0x42>
 	 {
 		// PB6  I2C1_SCL, PB7   I2C1_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000f08:	4b6d      	ldr	r3, [pc, #436]	; (80010c0 <I2C_Init+0x1c8>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	4a6c      	ldr	r2, [pc, #432]	; (80010c0 <I2C_Init+0x1c8>)
 8000f0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f12:	6153      	str	r3, [r2, #20]
 		GPIOB->MODER |= (0b10 << GPIO_MODER_MODER6_Pos) |
 8000f14:	4b6b      	ldr	r3, [pc, #428]	; (80010c4 <I2C_Init+0x1cc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a6a      	ldr	r2, [pc, #424]	; (80010c4 <I2C_Init+0x1cc>)
 8000f1a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000f1e:	6013      	str	r3, [r2, #0]
		   (0b10 << GPIO_MODER_MODER7_Pos); // PB6, PB7: Alternate function
		 GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFRL6_Pos) |
 8000f20:	4b68      	ldr	r3, [pc, #416]	; (80010c4 <I2C_Init+0x1cc>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	4a67      	ldr	r2, [pc, #412]	; (80010c4 <I2C_Init+0x1cc>)
 8000f26:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000f2a:	6213      	str	r3, [r2, #32]
		   (4 << GPIO_AFRL_AFRL7_Pos);         // 0100: AF4

		 RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //i2c clock enable
 8000f2c:	4b64      	ldr	r3, [pc, #400]	; (80010c0 <I2C_Init+0x1c8>)
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	4a63      	ldr	r2, [pc, #396]	; (80010c0 <I2C_Init+0x1c8>)
 8000f32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f36:	61d3      	str	r3, [r2, #28]
 8000f38:	e0ac      	b.n	8001094 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C2 )
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a62      	ldr	r2, [pc, #392]	; (80010c8 <I2C_Init+0x1d0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d14c      	bne.n	8000fdc <I2C_Init+0xe4>
 	 {
 		//PA9 I2C2_SCL , PA10 I2C2_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000f42:	4b5f      	ldr	r3, [pc, #380]	; (80010c0 <I2C_Init+0x1c8>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	4a5e      	ldr	r2, [pc, #376]	; (80010c0 <I2C_Init+0x1c8>)
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	6153      	str	r3, [r2, #20]
 		GPIOA->MODER |= (2 << 18) ;// PA9 10: Alternate function mode
 8000f4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f5c:	6013      	str	r3, [r2, #0]
 		GPIOA->MODER |= (2 << 20) ;//PA10 10: Alternate function mode
 8000f5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f6c:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER |= (1 << 9 ) ;//PA9  GPIO port output type register 1: Output open-drain
 8000f6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7c:	6053      	str	r3, [r2, #4]
 		GPIOA->OTYPER |= (1 << 10) ;//PA10 Oepn Drain
 8000f7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8c:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 18) | (3 << 20) ; //PA9,PA10  GPIO port output speed register 11: High speed
 8000f8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f98:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8000f9c:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR  |= (1<<18) | (1<<20) ;//PA9 ,PA10 GPIO port pull-up/pull-down register 01: Pull-up
 8000f9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fa8:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8000fac:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1] |= ( 4 << 4 );   //select GPIO alternate function high register  PA9  0100: AF4
 8000fae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fbc:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOA->AFR[1] |= (4 << 8);   //select GPIO alternate function high register  PA10   0100: AF4
 8000fbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fcc:	6253      	str	r3, [r2, #36]	; 0x24

 		RCC->APB1ENR |=RCC_APB1ENR_I2C2EN ; //i2c clock enable
 8000fce:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <I2C_Init+0x1c8>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a3b      	ldr	r2, [pc, #236]	; (80010c0 <I2C_Init+0x1c8>)
 8000fd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	e05b      	b.n	8001094 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C3 )
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a3b      	ldr	r2, [pc, #236]	; (80010cc <I2C_Init+0x1d4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d157      	bne.n	8001094 <I2C_Init+0x19c>
 	 {
 		//PA8 I2C3_SCL , PB5 I2C3_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <I2C_Init+0x1c8>)
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	4a35      	ldr	r2, [pc, #212]	; (80010c0 <I2C_Init+0x1c8>)
 8000fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fee:	6153      	str	r3, [r2, #20]
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <I2C_Init+0x1c8>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	4a32      	ldr	r2, [pc, #200]	; (80010c0 <I2C_Init+0x1c8>)
 8000ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffa:	6153      	str	r3, [r2, #20]

 		GPIOA->MODER   |= (2 << 16) ;// PA8 ALF
 8000ffc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100a:	6013      	str	r3, [r2, #0]
 		GPIOB->MODER   |= (2 << 10) ;//PB5 ALF
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <I2C_Init+0x1cc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2c      	ldr	r2, [pc, #176]	; (80010c4 <I2C_Init+0x1cc>)
 8001012:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001016:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER  |= (1 << 8 ) ;//PA8 Open Drain
 8001018:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001026:	6053      	str	r3, [r2, #4]
 		GPIOB->OTYPER  |= (1 << 5 ) ;//PB5 Oepn Drain
 8001028:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <I2C_Init+0x1cc>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <I2C_Init+0x1cc>)
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 16) ;//PA8 High Speed
 8001034:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800103e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001042:	6093      	str	r3, [r2, #8]
 		GPIOB->OSPEEDR |= (3 << 10) ; //PB5 High Speed
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <I2C_Init+0x1cc>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <I2C_Init+0x1cc>)
 800104a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800104e:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR   |= (1 << 16) ;//PA8 PULL up
 8001050:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800105a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105e:	60d3      	str	r3, [r2, #12]
 		GPIOB->PUPDR   |= (1 << 10) ;//PB5 PULL up
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <I2C_Init+0x1cc>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <I2C_Init+0x1cc>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1]  |= ( 3 << 0 );//select Alf PA8    0011: AF3
 800106c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001076:	f043 0303 	orr.w	r3, r3, #3
 800107a:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOB->AFR[0]  |= (8 << 20) ;//select Alf PB5     1000: AF8
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <I2C_Init+0x1cc>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <I2C_Init+0x1cc>)
 8001082:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001086:	6213      	str	r3, [r2, #32]

 		RCC->APB1ENR |=RCC_APB1ENR_I2C3EN ; //i2c clock enable
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <I2C_Init+0x1c8>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <I2C_Init+0x1c8>)
 800108e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001092:	61d3      	str	r3, [r2, #28]
	 * Enabling and disabling the peripheral
	 * The I2C peripheral clock must be configured and enabled in the clock controller.
	 * Then the I2C can be enabled by setting the PE bit in the I2C_CR1 register.
	 * When the I2C is disabled (PE=0), the I2C performs a software reset.
	 */
	 i2c->CR1 &= ~I2C_CR1_PE;                // disable the i2c peripheral clock  (clear PE bit in I2C_CR1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f023 0201 	bic.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	601a      	str	r2, [r3, #0]
	/*
	 * I2C timings
	 * The timings must be configured in order to guarantee a correct data hold and setup time,
	 * used in master and slave modes. This is done by programming the PRESC,SCLDEL and SDADEL bits in the I2C_TIMINGR register.
	 */
	 i2c->TIMINGR = (1 << I2C_TIMINGR_PRESC_Pos) | // Standard mode 100 kHz @ 8 MHz (page 849/1141)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <I2C_Init+0x1d8>)
 80010a4:	611a      	str	r2, [r3, #16]
	             (0x13 << I2C_TIMINGR_SCLL_Pos)  |
	             (0xF << I2C_TIMINGR_SCLH_Pos)   |
	             (0x2 << I2C_TIMINGR_SDADEL_Pos) |
	             (0x4 << I2C_TIMINGR_SCLDEL_Pos);

	 i2c->CR1 |= I2C_CR1_PE;// enable the i2c peripheral clock (set PE bit inI2C_CR1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f043 0201 	orr.w	r2, r3, #1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]

}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40005400 	.word	0x40005400
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48000400 	.word	0x48000400
 80010c8:	40005800 	.word	0x40005800
 80010cc:	40007800 	.word	0x40007800
 80010d0:	10420f13 	.word	0x10420f13

080010d4 <I2C_Write>:

	return cnt ;
}

void I2C_Write(I2C_TypeDef * i2c , uint8_t address , uint8_t * data , uint8_t len)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	461a      	mov	r2, r3
 80010e0:	460b      	mov	r3, r1
 80010e2:	72fb      	strb	r3, [r7, #11]
 80010e4:	4613      	mov	r3, r2
 80010e6:	72bb      	strb	r3, [r7, #10]
	i2c->CR2 = ((address << 1) << I2C_CR2_SADD_Pos) | (len << I2C_CR2_NBYTES_Pos) | (0 << I2C_CR2_RD_WRN_Pos | I2C_CR2_AUTOEND);	//send address + data of register + WRITE
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	005a      	lsls	r2, r3, #1
 80010ec:	7abb      	ldrb	r3, [r7, #10]
 80010ee:	041b      	lsls	r3, r3, #16
 80010f0:	4313      	orrs	r3, r2
 80010f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	605a      	str	r2, [r3, #4]
		i2c->CR2 |= I2C_CR2_START;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	605a      	str	r2, [r3, #4]
		while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8001106:	e005      	b.n	8001114 <I2C_Write+0x40>
			if ((i2c->ISR & I2C_ISR_NACKF)){
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	2b00      	cmp	r3, #0
 8001112:	d123      	bne.n	800115c <I2C_Write+0x88>
		while ((i2c->ISR & I2C_ISR_TXIS)==0) {	//TXDR is empty
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f3      	beq.n	8001108 <I2C_Write+0x34>
				return;}}

		for(uint8_t j=0; j <= (len-1); j++)
 8001120:	2300      	movs	r3, #0
 8001122:	75fb      	strb	r3, [r7, #23]
 8001124:	e015      	b.n	8001152 <I2C_Write+0x7e>
		{
			i2c->TXDR = data[j];
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
			if(j < (len-1))
 8001134:	7dfa      	ldrb	r2, [r7, #23]
 8001136:	7abb      	ldrb	r3, [r7, #10]
 8001138:	3b01      	subs	r3, #1
 800113a:	429a      	cmp	r2, r3
 800113c:	da06      	bge.n	800114c <I2C_Write+0x78>
			{
				while((i2c->ISR & I2C_ISR_TXIS)==0){}
 800113e:	bf00      	nop
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f9      	beq.n	8001140 <I2C_Write+0x6c>
		for(uint8_t j=0; j <= (len-1); j++)
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	3301      	adds	r3, #1
 8001150:	75fb      	strb	r3, [r7, #23]
 8001152:	7aba      	ldrb	r2, [r7, #10]
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	429a      	cmp	r2, r3
 8001158:	d8e5      	bhi.n	8001126 <I2C_Write+0x52>
 800115a:	e000      	b.n	800115e <I2C_Write+0x8a>
				return;}}
 800115c:	bf00      	nop
			}
		}
}
 800115e:	371c      	adds	r7, #28
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <I2C_Read>:




void I2C_Read(I2C_TypeDef * i2c ,uint8_t address , uint8_t * buffer , int len)
{
 8001166:	b480      	push	{r7}
 8001168:	b087      	sub	sp, #28
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	460b      	mov	r3, r1
 8001174:	72fb      	strb	r3, [r7, #11]

	i2c->CR2  = ((address << 1) << I2C_CR2_SADD_Pos) ;  // set the slave address
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
	i2c->CR2 |=   (len << I2C_CR2_NBYTES_Pos);		   // set the number of bytes to be transmitted
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	0412      	lsls	r2, r2, #16
 8001188:	431a      	orrs	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= (1<<I2C_CR2_RD_WRN_Pos);                            	 // i2c read
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START; 					   	// generate the start condition
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	605a      	str	r2, [r3, #4]


	 for( int i = 0 ;i<len ;i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e01d      	b.n	80011e8 <I2C_Read+0x82>
	 {
		 while((i2c->ISR & I2C_ISR_RXNE) == 0) ; //wait for rx data
 80011ac:	bf00      	nop
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f9      	beq.n	80011ae <I2C_Read+0x48>

		 *buffer = i2c->RXDR ;     //read rx
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	701a      	strb	r2, [r3, #0]

		 buffer++ ;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	607b      	str	r3, [r7, #4]

		 if(i == len - 1)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d106      	bne.n	80011e2 <I2C_Read+0x7c>
		 {
			 while((i2c->ISR & I2C_ISR_TC) == 0) ; //wait for TC Flag
 80011d4:	bf00      	nop
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f9      	beq.n	80011d6 <I2C_Read+0x70>
	 for( int i = 0 ;i<len ;i++)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbdd      	blt.n	80011ac <I2C_Read+0x46>
		 else{
			 //nope
		 }
	 }

	 i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	605a      	str	r2, [r3, #4]
}
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <keypad_init>:
 * Let's assume your program switches all four columns to low and then switches the first row to high.
 * Then it reads the input states of each column and reads pin 1 high.
 * This means that a contact has been made between column 4 and row 1, so the 'A' key has been pressed.
 */
void keypad_init(GPIO_TypeDef * port , int s_pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	keypad_port = port   ;
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <keypad_init+0x2c>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6013      	str	r3, [r2, #0]
	start_pin   = s_pin  ;
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <keypad_init+0x30>)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	6013      	str	r3, [r2, #0]
	gpio_clock_enable(port) ;
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fd8a 	bl	8000d38 <gpio_clock_enable>
	keypad_config_key_direction(port , s_pin) ;////set  the first 4 pins as output and the second 4 pins as input
 8001224:	6839      	ldr	r1, [r7, #0]
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f808 	bl	800123c <keypad_config_key_direction>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000cc4 	.word	0x20000cc4
 8001238:	20000cc8 	.word	0x20000cc8

0800123c <keypad_config_key_direction>:
 */



static void keypad_config_key_direction( GPIO_TypeDef * port , int s_pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af02      	add	r7, sp, #8
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fde6 	bl	8000e18 <reset_io>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r1  1
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	1c4b      	adds	r3, r1, #1
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	2300      	movs	r3, #0
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	2300      	movs	r3, #0
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2300      	movs	r3, #0
 800125c:	2201      	movs	r2, #1
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fdef 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r2  0
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	1c4b      	adds	r3, r1, #1
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	2300      	movs	r3, #0
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2300      	movs	r3, #0
 8001274:	2201      	movs	r2, #1
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fde3 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r3  0
 800127c:	6839      	ldr	r1, [r7, #0]
 800127e:	1c4b      	adds	r3, r1, #1
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	2300      	movs	r3, #0
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2300      	movs	r3, #0
 800128c:	2201      	movs	r2, #1
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fdd7 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//r4  0
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	1c4b      	adds	r3, r1, #1
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	2300      	movs	r3, #0
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2300      	movs	r3, #0
 80012a4:	2201      	movs	r2, #1
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fdcb 	bl	8000e42 <gpio_config_pin>
	//configure the pins as Intput with pull-up
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C1  1
 80012ac:	6839      	ldr	r1, [r7, #0]
 80012ae:	1c4b      	adds	r3, r1, #1
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2300      	movs	r3, #0
 80012bc:	2200      	movs	r2, #0
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fdbf 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C2  0
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	1c4b      	adds	r3, r1, #1
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2300      	movs	r3, #0
 80012d4:	2200      	movs	r2, #0
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fdb3 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C3  1
 80012dc:	6839      	ldr	r1, [r7, #0]
 80012de:	1c4b      	adds	r3, r1, #1
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	2200      	movs	r2, #0
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fda7 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C4  1
 80012f4:	6839      	ldr	r1, [r7, #0]
 80012f6:	1c4b      	adds	r3, r1, #1
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	2301      	movs	r3, #1
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2300      	movs	r3, #0
 8001304:	2200      	movs	r2, #0
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fd9b 	bl	8000e42 <gpio_config_pin>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <keypad_inverse_pin_direction>:

static void keypad_inverse_pin_direction( GPIO_TypeDef * port , int s_pin)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af02      	add	r7, sp, #8
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fd7a 	bl	8000e18 <reset_io>
	//configure the pins as Intput with pull-down
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R1     0
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	1c4b      	adds	r3, r1, #1
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	2302      	movs	r3, #2
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	2200      	movs	r2, #0
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fd83 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R2     1
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	1c4b      	adds	r3, r1, #1
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	2302      	movs	r3, #2
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	2200      	movs	r2, #0
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fd77 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R3     1
 8001354:	6839      	ldr	r1, [r7, #0]
 8001356:	1c4b      	adds	r3, r1, #1
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	2300      	movs	r3, #0
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	2302      	movs	r3, #2
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	2200      	movs	r2, #0
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fd6b 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN  , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R4     1
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	1c4b      	adds	r3, r1, #1
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	2300      	movs	r3, #0
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	2302      	movs	r3, #2
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2300      	movs	r3, #0
 800137c:	2200      	movs	r2, #0
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fd5f 	bl	8000e42 <gpio_config_pin>
	//configure the pins as Output with no pull
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C1     0
 8001384:	6839      	ldr	r1, [r7, #0]
 8001386:	1c4b      	adds	r3, r1, #1
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	2300      	movs	r3, #0
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2300      	movs	r3, #0
 8001394:	2201      	movs	r2, #1
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fd53 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C2     1
 800139c:	6839      	ldr	r1, [r7, #0]
 800139e:	1c4b      	adds	r3, r1, #1
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	2300      	movs	r3, #0
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	2300      	movs	r3, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	2201      	movs	r2, #1
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fd47 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C3     0
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	1c4b      	adds	r3, r1, #1
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2300      	movs	r3, #0
 80013c4:	2201      	movs	r2, #1
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fd3b 	bl	8000e42 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C4     0
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	1c4b      	adds	r3, r1, #1
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2300      	movs	r3, #0
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	2201      	movs	r2, #1
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fd2f 	bl	8000e42 <gpio_config_pin>

}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <keypad_get_pressedkey>:

/**
 * return the pressedkey other wise 0
 */
char keypad_get_pressedkey()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0

	uint16_t porte = 0;   // set porte to zero where the pins of the used GPIO port (C , Pins : 0-15) will be stored.
 80013f2:	2300      	movs	r3, #0
 80013f4:	817b      	strh	r3, [r7, #10]
	porte = GPIOC->IDR ; /* IDR is one of the GPIO registers that contains the input states of the pins of a GPIO port.
 80013f6:	4b51      	ldr	r3, [pc, #324]	; (800153c <keypad_get_pressedkey+0x150>)
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	817b      	strh	r3, [r7, #10]
	                      * We can read the whole pin status of a GPIO port with the IDR register.
	                      */
    uint8_t  eidr  = 0;  // set eidr to zero where only the 8 used pins will be stored.
 80013fc:	2300      	movs	r3, #0
 80013fe:	727b      	strb	r3, [r7, #9]
	uint8_t  ch    = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	723b      	strb	r3, [r7, #8]
	char ret = 0 ;
 8001404:	2300      	movs	r3, #0
 8001406:	75fb      	strb	r3, [r7, #23]

    switch(state)
 8001408:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <keypad_get_pressedkey+0x154>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b02      	cmp	r3, #2
 800140e:	f000 8087 	beq.w	8001520 <keypad_get_pressedkey+0x134>
 8001412:	2b02      	cmp	r3, #2
 8001414:	f300 8088 	bgt.w	8001528 <keypad_get_pressedkey+0x13c>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <keypad_get_pressedkey+0x36>
 800141c:	2b01      	cmp	r3, #1
 800141e:	d072      	beq.n	8001506 <keypad_get_pressedkey+0x11a>

				state = State_free ;
				break ;
			}
		default :
			break ;
 8001420:	e082      	b.n	8001528 <keypad_get_pressedkey+0x13c>
				eidr = (porte >> start_pin) ;//  & 0xff ; // get the state od the keypad pins
 8001422:	897a      	ldrh	r2, [r7, #10]
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <keypad_get_pressedkey+0x158>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fa42 f303 	asr.w	r3, r2, r3
 800142c:	727b      	strb	r3, [r7, #9]
				if(eidr != DEFAULT_KEYPAD_PORT_INP)       // if now the value is different than the DEFAULT_KEYPAD_PORT_INP 0xf0
 800142e:	7a7b      	ldrb	r3, [r7, #9]
 8001430:	2bf0      	cmp	r3, #240	; 0xf0
 8001432:	d07b      	beq.n	800152c <keypad_get_pressedkey+0x140>
					ch = ~eidr;                           // set the inverse of eidr in ch
 8001434:	7a7b      	ldrb	r3, [r7, #9]
 8001436:	43db      	mvns	r3, r3
 8001438:	723b      	strb	r3, [r7, #8]
					ch = ch & DEFAULT_KEYPAD_PORT_INP;    // with the addition of 0xf0 we get 1 in the changed bit position
 800143a:	7a3b      	ldrb	r3, [r7, #8]
 800143c:	f023 030f 	bic.w	r3, r3, #15
 8001440:	723b      	strb	r3, [r7, #8]
					keypad_inverse_pin_direction(keypad_port ,start_pin ) ;
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <keypad_get_pressedkey+0x15c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a3f      	ldr	r2, [pc, #252]	; (8001544 <keypad_get_pressedkey+0x158>)
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff61 	bl	8001314 <keypad_inverse_pin_direction>
					uint16_t out = (ch << start_pin) ;  //
 8001452:	7a3a      	ldrb	r2, [r7, #8]
 8001454:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <keypad_get_pressedkey+0x158>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	80fb      	strh	r3, [r7, #6]
					keypad_port->ODR = out ;
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <keypad_get_pressedkey+0x15c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	88fa      	ldrh	r2, [r7, #6]
 8001464:	615a      	str	r2, [r3, #20]
					delay_ms(1) ;
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff f858 	bl	800051c <delay_ms>
					porte = keypad_port->IDR ;//get the state of input port
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <keypad_get_pressedkey+0x15c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	817b      	strh	r3, [r7, #10]
					eidr = (porte >> start_pin) ;//& 0xff ; //get the state of keypad pins
 8001474:	897a      	ldrh	r2, [r7, #10]
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <keypad_get_pressedkey+0x158>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fa42 f303 	asr.w	r3, r2, r3
 800147e:	727b      	strb	r3, [r7, #9]
					int col = 0 ;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
					for(col = 0 ; col <4 ; col++)
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	e00d      	b.n	80014a6 <keypad_get_pressedkey+0xba>
						if(   (((eidr & 0xf0) >> 4) &  (1<<col)) != 0 )
 800148a:	7a7b      	ldrb	r3, [r7, #9]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fa42 f303 	asr.w	r3, r2, r3
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d106      	bne.n	80014ae <keypad_get_pressedkey+0xc2>
					for(col = 0 ; col <4 ; col++)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	3301      	adds	r3, #1
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	ddee      	ble.n	800148a <keypad_get_pressedkey+0x9e>
 80014ac:	e000      	b.n	80014b0 <keypad_get_pressedkey+0xc4>
							break ;
 80014ae:	bf00      	nop
					int row = 0 ;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
					for(row = 0 ; row <4 ; row++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e00c      	b.n	80014d4 <keypad_get_pressedkey+0xe8>
						if( ((eidr & 0x0f) & (1<<row)) != 0)
 80014ba:	7a7b      	ldrb	r3, [r7, #9]
 80014bc:	f003 020f 	and.w	r2, r3, #15
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	fa42 f303 	asr.w	r3, r2, r3
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d106      	bne.n	80014dc <keypad_get_pressedkey+0xf0>
					for(row = 0 ; row <4 ; row++)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3301      	adds	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	ddef      	ble.n	80014ba <keypad_get_pressedkey+0xce>
 80014da:	e000      	b.n	80014de <keypad_get_pressedkey+0xf2>
							break ;
 80014dc:	bf00      	nop
					ret = keys[row][col] ;
 80014de:	4a1b      	ldr	r2, [pc, #108]	; (800154c <keypad_get_pressedkey+0x160>)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	441a      	add	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	75fb      	strb	r3, [r7, #23]
					keypad_config_key_direction(keypad_port ,start_pin ) ;
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <keypad_get_pressedkey+0x15c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <keypad_get_pressedkey+0x158>)
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fe9f 	bl	800123c <keypad_config_key_direction>
					state = State_key_pressed ;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <keypad_get_pressedkey+0x154>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
				break ;
 8001504:	e012      	b.n	800152c <keypad_get_pressedkey+0x140>
				eidr = (porte >> start_pin) & 0xff ;
 8001506:	897a      	ldrh	r2, [r7, #10]
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <keypad_get_pressedkey+0x158>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	fa42 f303 	asr.w	r3, r2, r3
 8001510:	727b      	strb	r3, [r7, #9]
				if(eidr == DEFAULT_KEYPAD_PORT_INP)
 8001512:	7a7b      	ldrb	r3, [r7, #9]
 8001514:	2bf0      	cmp	r3, #240	; 0xf0
 8001516:	d10b      	bne.n	8001530 <keypad_get_pressedkey+0x144>
					state = State_key_released ;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <keypad_get_pressedkey+0x154>)
 800151a:	2202      	movs	r2, #2
 800151c:	701a      	strb	r2, [r3, #0]
				break ;
 800151e:	e007      	b.n	8001530 <keypad_get_pressedkey+0x144>
				state = State_free ;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <keypad_get_pressedkey+0x154>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
				break ;
 8001526:	e004      	b.n	8001532 <keypad_get_pressedkey+0x146>
			break ;
 8001528:	bf00      	nop
 800152a:	e002      	b.n	8001532 <keypad_get_pressedkey+0x146>
				break ;
 800152c:	bf00      	nop
 800152e:	e000      	b.n	8001532 <keypad_get_pressedkey+0x146>
				break ;
 8001530:	bf00      	nop

	}


	return ret ;
 8001532:	7dfb      	ldrb	r3, [r7, #23]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	48000800 	.word	0x48000800
 8001540:	20000ccc 	.word	0x20000ccc
 8001544:	20000cc8 	.word	0x20000cc8
 8001548:	20000cc4 	.word	0x20000cc4
 800154c:	2000000c 	.word	0x2000000c

08001550 <rtc_init>:
	I2C_Write(rtc_i2c , address , tmp ,2 ) ;
}


void rtc_init(I2C_TypeDef * dev)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	rtc_i2c = dev ;
 8001558:	4a03      	ldr	r2, [pc, #12]	; (8001568 <rtc_init+0x18>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000cd0 	.word	0x20000cd0

0800156c <rtc_get_reg>:



uint8_t rtc_get_reg(uint8_t reg)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	uint8_t val ;

	I2C_Write(rtc_i2c , RTC_I2C_ADDR , &reg  , 1) ;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <rtc_get_reg+0x38>)
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	1dfa      	adds	r2, r7, #7
 800157c:	2301      	movs	r3, #1
 800157e:	2168      	movs	r1, #104	; 0x68
 8001580:	f7ff fda8 	bl	80010d4 <I2C_Write>

	delay_ms(2);
 8001584:	2002      	movs	r0, #2
 8001586:	f7fe ffc9 	bl	800051c <delay_ms>

	I2C_Read(rtc_i2c  , RTC_I2C_ADDR , &val , 1) ;
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <rtc_get_reg+0x38>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	f107 020f 	add.w	r2, r7, #15
 8001592:	2301      	movs	r3, #1
 8001594:	2168      	movs	r1, #104	; 0x68
 8001596:	f7ff fde6 	bl	8001166 <I2C_Read>

	return val ;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000cd0 	.word	0x20000cd0

080015a8 <rtc_get_time>:

void rtc_get_time(rtc_time_t * rtc_time )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	uint8_t tmp = rtc_get_reg(RTC_REG_SECOND) ;
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ffdb 	bl	800156c <rtc_get_reg>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
	tm = tmp ;
 80015ba:	4a38      	ldr	r2, [pc, #224]	; (800169c <rtc_get_time+0xf4>)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	7013      	strb	r3, [r2, #0]
	//BCD --> DEC
	rtc_time->sec  = ((tmp >> 4) & 0x0f) * 10 + (tmp & 0x0f) ;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4413      	add	r3, r2
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	701a      	strb	r2, [r3, #0]

	tmp = rtc_get_reg(RTC_REG_MINUTE) ;
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff ffc3 	bl	800156c <rtc_get_reg>
 80015e6:	4603      	mov	r3, r0
 80015e8:	73fb      	strb	r3, [r7, #15]
	//BCD --> DEC
	rtc_time->min  = ((tmp >> 4) & 0x0f) * 10 + (tmp & 0x0f) ;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4413      	add	r3, r2
 8001604:	b2da      	uxtb	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	705a      	strb	r2, [r3, #1]

	tmp = rtc_get_reg(RTC_REG_HOUR) ;
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff ffae 	bl	800156c <rtc_get_reg>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]


	if( (tmp & RTC_BIT_MODE_MASK) != 0)
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	d022      	beq.n	8001664 <rtc_get_time+0xbc>
	{
		//12 hour mode
		rtc_time->mode = H_12 ;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	70da      	strb	r2, [r3, #3]
		if((tmp & RTC_AM_PM_BIT_MASK) != 0)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	f003 0320 	and.w	r3, r3, #32
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <rtc_get_time+0x8e>
		{
			rtc_time->am_pm = PM ;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	711a      	strb	r2, [r3, #4]
 8001634:	e002      	b.n	800163c <rtc_get_time+0x94>
		}
		else{
			rtc_time->am_pm = AM ;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	711a      	strb	r2, [r3, #4]
		}

		rtc_time->hr = ((tmp & 0x1f) >> 4) * 10 + (tmp & 0x0f) ;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	111b      	asrs	r3, r3, #4
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	4413      	add	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	b2da      	uxtb	r2, r3
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4413      	add	r3, r2
 800165c:	b2da      	uxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	709a      	strb	r2, [r3, #2]
		rtc_time->mode = H_24 ;
		tmp = RTC_24H_MASK & tmp ;
		rtc_time->hr = (tmp >> 4) * 10 + (tmp & 0x0f) ;
	}

}
 8001662:	e016      	b.n	8001692 <rtc_get_time+0xea>
		rtc_time->mode = H_24 ;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	70da      	strb	r2, [r3, #3]
		tmp = RTC_24H_MASK & tmp ;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001670:	73fb      	strb	r3, [r7, #15]
		rtc_time->hr = (tmp >> 4) * 10 + (tmp & 0x0f) ;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	b2db      	uxtb	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	4413      	add	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	b2da      	uxtb	r2, r3
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	b2db      	uxtb	r3, r3
 800168a:	4413      	add	r3, r2
 800168c:	b2da      	uxtb	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	709a      	strb	r2, [r3, #2]
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000cd4 	.word	0x20000cd4

080016a0 <rtc_get_date>:
	rtc_write_reg( RTC_I2C_ADDR , RTC_REG_YEAR ,tmp , 1) ;

}

void rtc_get_date(rtc_date_t * date)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	uint8_t tmp = rtc_get_reg(RTC_REG_DATE) ;
 80016a8:	2004      	movs	r0, #4
 80016aa:	f7ff ff5f 	bl	800156c <rtc_get_reg>
 80016ae:	4603      	mov	r3, r0
 80016b0:	73fb      	strb	r3, [r7, #15]

	date->day = (tmp >> 4)*10 + (tmp & 0x0f) ;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4413      	add	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	701a      	strb	r2, [r3, #0]

	tmp = rtc_get_reg(RTC_REG_MONTH) ;
 80016d2:	2005      	movs	r0, #5
 80016d4:	f7ff ff4a 	bl	800156c <rtc_get_reg>
 80016d8:	4603      	mov	r3, r0
 80016da:	73fb      	strb	r3, [r7, #15]

	tmp &= 0x7f ;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016e2:	73fb      	strb	r3, [r7, #15]

	date->month = (tmp >> 4) *10 +(tmp & 0x0f) ;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	705a      	strb	r2, [r3, #1]

	tmp = rtc_get_reg(RTC_REG_YEAR) ;
 8001704:	2006      	movs	r0, #6
 8001706:	f7ff ff31 	bl	800156c <rtc_get_reg>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]

	date->year = (tmp >> 4) *10 +(tmp & 0x0f) ;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4413      	add	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	b2db      	uxtb	r3, r3
 8001726:	4413      	add	r3, r2
 8001728:	b2da      	uxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	709a      	strb	r2, [r3, #2]
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <__libc_init_array>:
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	4d0d      	ldr	r5, [pc, #52]	; (8001770 <__libc_init_array+0x38>)
 800173c:	4c0d      	ldr	r4, [pc, #52]	; (8001774 <__libc_init_array+0x3c>)
 800173e:	1b64      	subs	r4, r4, r5
 8001740:	10a4      	asrs	r4, r4, #2
 8001742:	2600      	movs	r6, #0
 8001744:	42a6      	cmp	r6, r4
 8001746:	d109      	bne.n	800175c <__libc_init_array+0x24>
 8001748:	4d0b      	ldr	r5, [pc, #44]	; (8001778 <__libc_init_array+0x40>)
 800174a:	4c0c      	ldr	r4, [pc, #48]	; (800177c <__libc_init_array+0x44>)
 800174c:	f000 fc9a 	bl	8002084 <_init>
 8001750:	1b64      	subs	r4, r4, r5
 8001752:	10a4      	asrs	r4, r4, #2
 8001754:	2600      	movs	r6, #0
 8001756:	42a6      	cmp	r6, r4
 8001758:	d105      	bne.n	8001766 <__libc_init_array+0x2e>
 800175a:	bd70      	pop	{r4, r5, r6, pc}
 800175c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001760:	4798      	blx	r3
 8001762:	3601      	adds	r6, #1
 8001764:	e7ee      	b.n	8001744 <__libc_init_array+0xc>
 8001766:	f855 3b04 	ldr.w	r3, [r5], #4
 800176a:	4798      	blx	r3
 800176c:	3601      	adds	r6, #1
 800176e:	e7f2      	b.n	8001756 <__libc_init_array+0x1e>
 8001770:	08003060 	.word	0x08003060
 8001774:	08003060 	.word	0x08003060
 8001778:	08003060 	.word	0x08003060
 800177c:	08003064 	.word	0x08003064

08001780 <memset>:
 8001780:	4402      	add	r2, r0
 8001782:	4603      	mov	r3, r0
 8001784:	4293      	cmp	r3, r2
 8001786:	d100      	bne.n	800178a <memset+0xa>
 8001788:	4770      	bx	lr
 800178a:	f803 1b01 	strb.w	r1, [r3], #1
 800178e:	e7f9      	b.n	8001784 <memset+0x4>

08001790 <siprintf>:
 8001790:	b40e      	push	{r1, r2, r3}
 8001792:	b500      	push	{lr}
 8001794:	b09c      	sub	sp, #112	; 0x70
 8001796:	ab1d      	add	r3, sp, #116	; 0x74
 8001798:	9002      	str	r0, [sp, #8]
 800179a:	9006      	str	r0, [sp, #24]
 800179c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <siprintf+0x38>)
 80017a2:	9107      	str	r1, [sp, #28]
 80017a4:	9104      	str	r1, [sp, #16]
 80017a6:	4909      	ldr	r1, [pc, #36]	; (80017cc <siprintf+0x3c>)
 80017a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80017ac:	9105      	str	r1, [sp, #20]
 80017ae:	6800      	ldr	r0, [r0, #0]
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	a902      	add	r1, sp, #8
 80017b4:	f000 f868 	bl	8001888 <_svfiprintf_r>
 80017b8:	9b02      	ldr	r3, [sp, #8]
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	b01c      	add	sp, #112	; 0x70
 80017c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80017c4:	b003      	add	sp, #12
 80017c6:	4770      	bx	lr
 80017c8:	2000001c 	.word	0x2000001c
 80017cc:	ffff0208 	.word	0xffff0208

080017d0 <__ssputs_r>:
 80017d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017d4:	688e      	ldr	r6, [r1, #8]
 80017d6:	429e      	cmp	r6, r3
 80017d8:	4682      	mov	sl, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	4690      	mov	r8, r2
 80017de:	461f      	mov	r7, r3
 80017e0:	d838      	bhi.n	8001854 <__ssputs_r+0x84>
 80017e2:	898a      	ldrh	r2, [r1, #12]
 80017e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80017e8:	d032      	beq.n	8001850 <__ssputs_r+0x80>
 80017ea:	6825      	ldr	r5, [r4, #0]
 80017ec:	6909      	ldr	r1, [r1, #16]
 80017ee:	eba5 0901 	sub.w	r9, r5, r1
 80017f2:	6965      	ldr	r5, [r4, #20]
 80017f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80017f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80017fc:	3301      	adds	r3, #1
 80017fe:	444b      	add	r3, r9
 8001800:	106d      	asrs	r5, r5, #1
 8001802:	429d      	cmp	r5, r3
 8001804:	bf38      	it	cc
 8001806:	461d      	movcc	r5, r3
 8001808:	0553      	lsls	r3, r2, #21
 800180a:	d531      	bpl.n	8001870 <__ssputs_r+0xa0>
 800180c:	4629      	mov	r1, r5
 800180e:	f000 fb61 	bl	8001ed4 <_malloc_r>
 8001812:	4606      	mov	r6, r0
 8001814:	b950      	cbnz	r0, 800182c <__ssputs_r+0x5c>
 8001816:	230c      	movs	r3, #12
 8001818:	f8ca 3000 	str.w	r3, [sl]
 800181c:	89a3      	ldrh	r3, [r4, #12]
 800181e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001822:	81a3      	strh	r3, [r4, #12]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800182c:	6921      	ldr	r1, [r4, #16]
 800182e:	464a      	mov	r2, r9
 8001830:	f000 fabe 	bl	8001db0 <memcpy>
 8001834:	89a3      	ldrh	r3, [r4, #12]
 8001836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800183a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183e:	81a3      	strh	r3, [r4, #12]
 8001840:	6126      	str	r6, [r4, #16]
 8001842:	6165      	str	r5, [r4, #20]
 8001844:	444e      	add	r6, r9
 8001846:	eba5 0509 	sub.w	r5, r5, r9
 800184a:	6026      	str	r6, [r4, #0]
 800184c:	60a5      	str	r5, [r4, #8]
 800184e:	463e      	mov	r6, r7
 8001850:	42be      	cmp	r6, r7
 8001852:	d900      	bls.n	8001856 <__ssputs_r+0x86>
 8001854:	463e      	mov	r6, r7
 8001856:	6820      	ldr	r0, [r4, #0]
 8001858:	4632      	mov	r2, r6
 800185a:	4641      	mov	r1, r8
 800185c:	f000 fab6 	bl	8001dcc <memmove>
 8001860:	68a3      	ldr	r3, [r4, #8]
 8001862:	1b9b      	subs	r3, r3, r6
 8001864:	60a3      	str	r3, [r4, #8]
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	4433      	add	r3, r6
 800186a:	6023      	str	r3, [r4, #0]
 800186c:	2000      	movs	r0, #0
 800186e:	e7db      	b.n	8001828 <__ssputs_r+0x58>
 8001870:	462a      	mov	r2, r5
 8001872:	f000 fba3 	bl	8001fbc <_realloc_r>
 8001876:	4606      	mov	r6, r0
 8001878:	2800      	cmp	r0, #0
 800187a:	d1e1      	bne.n	8001840 <__ssputs_r+0x70>
 800187c:	6921      	ldr	r1, [r4, #16]
 800187e:	4650      	mov	r0, sl
 8001880:	f000 fabe 	bl	8001e00 <_free_r>
 8001884:	e7c7      	b.n	8001816 <__ssputs_r+0x46>
	...

08001888 <_svfiprintf_r>:
 8001888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800188c:	4698      	mov	r8, r3
 800188e:	898b      	ldrh	r3, [r1, #12]
 8001890:	061b      	lsls	r3, r3, #24
 8001892:	b09d      	sub	sp, #116	; 0x74
 8001894:	4607      	mov	r7, r0
 8001896:	460d      	mov	r5, r1
 8001898:	4614      	mov	r4, r2
 800189a:	d50e      	bpl.n	80018ba <_svfiprintf_r+0x32>
 800189c:	690b      	ldr	r3, [r1, #16]
 800189e:	b963      	cbnz	r3, 80018ba <_svfiprintf_r+0x32>
 80018a0:	2140      	movs	r1, #64	; 0x40
 80018a2:	f000 fb17 	bl	8001ed4 <_malloc_r>
 80018a6:	6028      	str	r0, [r5, #0]
 80018a8:	6128      	str	r0, [r5, #16]
 80018aa:	b920      	cbnz	r0, 80018b6 <_svfiprintf_r+0x2e>
 80018ac:	230c      	movs	r3, #12
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	e0d1      	b.n	8001a5a <_svfiprintf_r+0x1d2>
 80018b6:	2340      	movs	r3, #64	; 0x40
 80018b8:	616b      	str	r3, [r5, #20]
 80018ba:	2300      	movs	r3, #0
 80018bc:	9309      	str	r3, [sp, #36]	; 0x24
 80018be:	2320      	movs	r3, #32
 80018c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80018c8:	2330      	movs	r3, #48	; 0x30
 80018ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001a74 <_svfiprintf_r+0x1ec>
 80018ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018d2:	f04f 0901 	mov.w	r9, #1
 80018d6:	4623      	mov	r3, r4
 80018d8:	469a      	mov	sl, r3
 80018da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018de:	b10a      	cbz	r2, 80018e4 <_svfiprintf_r+0x5c>
 80018e0:	2a25      	cmp	r2, #37	; 0x25
 80018e2:	d1f9      	bne.n	80018d8 <_svfiprintf_r+0x50>
 80018e4:	ebba 0b04 	subs.w	fp, sl, r4
 80018e8:	d00b      	beq.n	8001902 <_svfiprintf_r+0x7a>
 80018ea:	465b      	mov	r3, fp
 80018ec:	4622      	mov	r2, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	4638      	mov	r0, r7
 80018f2:	f7ff ff6d 	bl	80017d0 <__ssputs_r>
 80018f6:	3001      	adds	r0, #1
 80018f8:	f000 80aa 	beq.w	8001a50 <_svfiprintf_r+0x1c8>
 80018fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018fe:	445a      	add	r2, fp
 8001900:	9209      	str	r2, [sp, #36]	; 0x24
 8001902:	f89a 3000 	ldrb.w	r3, [sl]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80a2 	beq.w	8001a50 <_svfiprintf_r+0x1c8>
 800190c:	2300      	movs	r3, #0
 800190e:	f04f 32ff 	mov.w	r2, #4294967295
 8001912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001916:	f10a 0a01 	add.w	sl, sl, #1
 800191a:	9304      	str	r3, [sp, #16]
 800191c:	9307      	str	r3, [sp, #28]
 800191e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001922:	931a      	str	r3, [sp, #104]	; 0x68
 8001924:	4654      	mov	r4, sl
 8001926:	2205      	movs	r2, #5
 8001928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800192c:	4851      	ldr	r0, [pc, #324]	; (8001a74 <_svfiprintf_r+0x1ec>)
 800192e:	f7fe fc57 	bl	80001e0 <memchr>
 8001932:	9a04      	ldr	r2, [sp, #16]
 8001934:	b9d8      	cbnz	r0, 800196e <_svfiprintf_r+0xe6>
 8001936:	06d0      	lsls	r0, r2, #27
 8001938:	bf44      	itt	mi
 800193a:	2320      	movmi	r3, #32
 800193c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001940:	0711      	lsls	r1, r2, #28
 8001942:	bf44      	itt	mi
 8001944:	232b      	movmi	r3, #43	; 0x2b
 8001946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800194a:	f89a 3000 	ldrb.w	r3, [sl]
 800194e:	2b2a      	cmp	r3, #42	; 0x2a
 8001950:	d015      	beq.n	800197e <_svfiprintf_r+0xf6>
 8001952:	9a07      	ldr	r2, [sp, #28]
 8001954:	4654      	mov	r4, sl
 8001956:	2000      	movs	r0, #0
 8001958:	f04f 0c0a 	mov.w	ip, #10
 800195c:	4621      	mov	r1, r4
 800195e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001962:	3b30      	subs	r3, #48	; 0x30
 8001964:	2b09      	cmp	r3, #9
 8001966:	d94e      	bls.n	8001a06 <_svfiprintf_r+0x17e>
 8001968:	b1b0      	cbz	r0, 8001998 <_svfiprintf_r+0x110>
 800196a:	9207      	str	r2, [sp, #28]
 800196c:	e014      	b.n	8001998 <_svfiprintf_r+0x110>
 800196e:	eba0 0308 	sub.w	r3, r0, r8
 8001972:	fa09 f303 	lsl.w	r3, r9, r3
 8001976:	4313      	orrs	r3, r2
 8001978:	9304      	str	r3, [sp, #16]
 800197a:	46a2      	mov	sl, r4
 800197c:	e7d2      	b.n	8001924 <_svfiprintf_r+0x9c>
 800197e:	9b03      	ldr	r3, [sp, #12]
 8001980:	1d19      	adds	r1, r3, #4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	9103      	str	r1, [sp, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	bfbb      	ittet	lt
 800198a:	425b      	neglt	r3, r3
 800198c:	f042 0202 	orrlt.w	r2, r2, #2
 8001990:	9307      	strge	r3, [sp, #28]
 8001992:	9307      	strlt	r3, [sp, #28]
 8001994:	bfb8      	it	lt
 8001996:	9204      	strlt	r2, [sp, #16]
 8001998:	7823      	ldrb	r3, [r4, #0]
 800199a:	2b2e      	cmp	r3, #46	; 0x2e
 800199c:	d10c      	bne.n	80019b8 <_svfiprintf_r+0x130>
 800199e:	7863      	ldrb	r3, [r4, #1]
 80019a0:	2b2a      	cmp	r3, #42	; 0x2a
 80019a2:	d135      	bne.n	8001a10 <_svfiprintf_r+0x188>
 80019a4:	9b03      	ldr	r3, [sp, #12]
 80019a6:	1d1a      	adds	r2, r3, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	9203      	str	r2, [sp, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bfb8      	it	lt
 80019b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80019b4:	3402      	adds	r4, #2
 80019b6:	9305      	str	r3, [sp, #20]
 80019b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001a78 <_svfiprintf_r+0x1f0>
 80019bc:	7821      	ldrb	r1, [r4, #0]
 80019be:	2203      	movs	r2, #3
 80019c0:	4650      	mov	r0, sl
 80019c2:	f7fe fc0d 	bl	80001e0 <memchr>
 80019c6:	b140      	cbz	r0, 80019da <_svfiprintf_r+0x152>
 80019c8:	2340      	movs	r3, #64	; 0x40
 80019ca:	eba0 000a 	sub.w	r0, r0, sl
 80019ce:	fa03 f000 	lsl.w	r0, r3, r0
 80019d2:	9b04      	ldr	r3, [sp, #16]
 80019d4:	4303      	orrs	r3, r0
 80019d6:	3401      	adds	r4, #1
 80019d8:	9304      	str	r3, [sp, #16]
 80019da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019de:	4827      	ldr	r0, [pc, #156]	; (8001a7c <_svfiprintf_r+0x1f4>)
 80019e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019e4:	2206      	movs	r2, #6
 80019e6:	f7fe fbfb 	bl	80001e0 <memchr>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d038      	beq.n	8001a60 <_svfiprintf_r+0x1d8>
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <_svfiprintf_r+0x1f8>)
 80019f0:	bb1b      	cbnz	r3, 8001a3a <_svfiprintf_r+0x1b2>
 80019f2:	9b03      	ldr	r3, [sp, #12]
 80019f4:	3307      	adds	r3, #7
 80019f6:	f023 0307 	bic.w	r3, r3, #7
 80019fa:	3308      	adds	r3, #8
 80019fc:	9303      	str	r3, [sp, #12]
 80019fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a00:	4433      	add	r3, r6
 8001a02:	9309      	str	r3, [sp, #36]	; 0x24
 8001a04:	e767      	b.n	80018d6 <_svfiprintf_r+0x4e>
 8001a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	e7a5      	b.n	800195c <_svfiprintf_r+0xd4>
 8001a10:	2300      	movs	r3, #0
 8001a12:	3401      	adds	r4, #1
 8001a14:	9305      	str	r3, [sp, #20]
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0c0a 	mov.w	ip, #10
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a22:	3a30      	subs	r2, #48	; 0x30
 8001a24:	2a09      	cmp	r2, #9
 8001a26:	d903      	bls.n	8001a30 <_svfiprintf_r+0x1a8>
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0c5      	beq.n	80019b8 <_svfiprintf_r+0x130>
 8001a2c:	9105      	str	r1, [sp, #20]
 8001a2e:	e7c3      	b.n	80019b8 <_svfiprintf_r+0x130>
 8001a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a34:	4604      	mov	r4, r0
 8001a36:	2301      	movs	r3, #1
 8001a38:	e7f0      	b.n	8001a1c <_svfiprintf_r+0x194>
 8001a3a:	ab03      	add	r3, sp, #12
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	462a      	mov	r2, r5
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <_svfiprintf_r+0x1fc>)
 8001a42:	a904      	add	r1, sp, #16
 8001a44:	4638      	mov	r0, r7
 8001a46:	f3af 8000 	nop.w
 8001a4a:	1c42      	adds	r2, r0, #1
 8001a4c:	4606      	mov	r6, r0
 8001a4e:	d1d6      	bne.n	80019fe <_svfiprintf_r+0x176>
 8001a50:	89ab      	ldrh	r3, [r5, #12]
 8001a52:	065b      	lsls	r3, r3, #25
 8001a54:	f53f af2c 	bmi.w	80018b0 <_svfiprintf_r+0x28>
 8001a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a5a:	b01d      	add	sp, #116	; 0x74
 8001a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a60:	ab03      	add	r3, sp, #12
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	462a      	mov	r2, r5
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <_svfiprintf_r+0x1fc>)
 8001a68:	a904      	add	r1, sp, #16
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	f000 f87a 	bl	8001b64 <_printf_i>
 8001a70:	e7eb      	b.n	8001a4a <_svfiprintf_r+0x1c2>
 8001a72:	bf00      	nop
 8001a74:	0800302c 	.word	0x0800302c
 8001a78:	08003032 	.word	0x08003032
 8001a7c:	08003036 	.word	0x08003036
 8001a80:	00000000 	.word	0x00000000
 8001a84:	080017d1 	.word	0x080017d1

08001a88 <_printf_common>:
 8001a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a8c:	4616      	mov	r6, r2
 8001a8e:	4699      	mov	r9, r3
 8001a90:	688a      	ldr	r2, [r1, #8]
 8001a92:	690b      	ldr	r3, [r1, #16]
 8001a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	bfb8      	it	lt
 8001a9c:	4613      	movlt	r3, r2
 8001a9e:	6033      	str	r3, [r6, #0]
 8001aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001aa4:	4607      	mov	r7, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	b10a      	cbz	r2, 8001aae <_printf_common+0x26>
 8001aaa:	3301      	adds	r3, #1
 8001aac:	6033      	str	r3, [r6, #0]
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	0699      	lsls	r1, r3, #26
 8001ab2:	bf42      	ittt	mi
 8001ab4:	6833      	ldrmi	r3, [r6, #0]
 8001ab6:	3302      	addmi	r3, #2
 8001ab8:	6033      	strmi	r3, [r6, #0]
 8001aba:	6825      	ldr	r5, [r4, #0]
 8001abc:	f015 0506 	ands.w	r5, r5, #6
 8001ac0:	d106      	bne.n	8001ad0 <_printf_common+0x48>
 8001ac2:	f104 0a19 	add.w	sl, r4, #25
 8001ac6:	68e3      	ldr	r3, [r4, #12]
 8001ac8:	6832      	ldr	r2, [r6, #0]
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	42ab      	cmp	r3, r5
 8001ace:	dc26      	bgt.n	8001b1e <_printf_common+0x96>
 8001ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ad4:	1e13      	subs	r3, r2, #0
 8001ad6:	6822      	ldr	r2, [r4, #0]
 8001ad8:	bf18      	it	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	0692      	lsls	r2, r2, #26
 8001ade:	d42b      	bmi.n	8001b38 <_printf_common+0xb0>
 8001ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ae4:	4649      	mov	r1, r9
 8001ae6:	4638      	mov	r0, r7
 8001ae8:	47c0      	blx	r8
 8001aea:	3001      	adds	r0, #1
 8001aec:	d01e      	beq.n	8001b2c <_printf_common+0xa4>
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	68e5      	ldr	r5, [r4, #12]
 8001af2:	6832      	ldr	r2, [r6, #0]
 8001af4:	f003 0306 	and.w	r3, r3, #6
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	bf08      	it	eq
 8001afc:	1aad      	subeq	r5, r5, r2
 8001afe:	68a3      	ldr	r3, [r4, #8]
 8001b00:	6922      	ldr	r2, [r4, #16]
 8001b02:	bf0c      	ite	eq
 8001b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b08:	2500      	movne	r5, #0
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	bfc4      	itt	gt
 8001b0e:	1a9b      	subgt	r3, r3, r2
 8001b10:	18ed      	addgt	r5, r5, r3
 8001b12:	2600      	movs	r6, #0
 8001b14:	341a      	adds	r4, #26
 8001b16:	42b5      	cmp	r5, r6
 8001b18:	d11a      	bne.n	8001b50 <_printf_common+0xc8>
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	e008      	b.n	8001b30 <_printf_common+0xa8>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4652      	mov	r2, sl
 8001b22:	4649      	mov	r1, r9
 8001b24:	4638      	mov	r0, r7
 8001b26:	47c0      	blx	r8
 8001b28:	3001      	adds	r0, #1
 8001b2a:	d103      	bne.n	8001b34 <_printf_common+0xac>
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b34:	3501      	adds	r5, #1
 8001b36:	e7c6      	b.n	8001ac6 <_printf_common+0x3e>
 8001b38:	18e1      	adds	r1, r4, r3
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	2030      	movs	r0, #48	; 0x30
 8001b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b42:	4422      	add	r2, r4
 8001b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	e7c7      	b.n	8001ae0 <_printf_common+0x58>
 8001b50:	2301      	movs	r3, #1
 8001b52:	4622      	mov	r2, r4
 8001b54:	4649      	mov	r1, r9
 8001b56:	4638      	mov	r0, r7
 8001b58:	47c0      	blx	r8
 8001b5a:	3001      	adds	r0, #1
 8001b5c:	d0e6      	beq.n	8001b2c <_printf_common+0xa4>
 8001b5e:	3601      	adds	r6, #1
 8001b60:	e7d9      	b.n	8001b16 <_printf_common+0x8e>
	...

08001b64 <_printf_i>:
 8001b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b68:	7e0f      	ldrb	r7, [r1, #24]
 8001b6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b6c:	2f78      	cmp	r7, #120	; 0x78
 8001b6e:	4691      	mov	r9, r2
 8001b70:	4680      	mov	r8, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	469a      	mov	sl, r3
 8001b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b7a:	d807      	bhi.n	8001b8c <_printf_i+0x28>
 8001b7c:	2f62      	cmp	r7, #98	; 0x62
 8001b7e:	d80a      	bhi.n	8001b96 <_printf_i+0x32>
 8001b80:	2f00      	cmp	r7, #0
 8001b82:	f000 80d8 	beq.w	8001d36 <_printf_i+0x1d2>
 8001b86:	2f58      	cmp	r7, #88	; 0x58
 8001b88:	f000 80a3 	beq.w	8001cd2 <_printf_i+0x16e>
 8001b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b94:	e03a      	b.n	8001c0c <_printf_i+0xa8>
 8001b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b9a:	2b15      	cmp	r3, #21
 8001b9c:	d8f6      	bhi.n	8001b8c <_printf_i+0x28>
 8001b9e:	a101      	add	r1, pc, #4	; (adr r1, 8001ba4 <_printf_i+0x40>)
 8001ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ba4:	08001bfd 	.word	0x08001bfd
 8001ba8:	08001c11 	.word	0x08001c11
 8001bac:	08001b8d 	.word	0x08001b8d
 8001bb0:	08001b8d 	.word	0x08001b8d
 8001bb4:	08001b8d 	.word	0x08001b8d
 8001bb8:	08001b8d 	.word	0x08001b8d
 8001bbc:	08001c11 	.word	0x08001c11
 8001bc0:	08001b8d 	.word	0x08001b8d
 8001bc4:	08001b8d 	.word	0x08001b8d
 8001bc8:	08001b8d 	.word	0x08001b8d
 8001bcc:	08001b8d 	.word	0x08001b8d
 8001bd0:	08001d1d 	.word	0x08001d1d
 8001bd4:	08001c41 	.word	0x08001c41
 8001bd8:	08001cff 	.word	0x08001cff
 8001bdc:	08001b8d 	.word	0x08001b8d
 8001be0:	08001b8d 	.word	0x08001b8d
 8001be4:	08001d3f 	.word	0x08001d3f
 8001be8:	08001b8d 	.word	0x08001b8d
 8001bec:	08001c41 	.word	0x08001c41
 8001bf0:	08001b8d 	.word	0x08001b8d
 8001bf4:	08001b8d 	.word	0x08001b8d
 8001bf8:	08001d07 	.word	0x08001d07
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	1d1a      	adds	r2, r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	602a      	str	r2, [r5, #0]
 8001c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0a3      	b.n	8001d58 <_printf_i+0x1f4>
 8001c10:	6820      	ldr	r0, [r4, #0]
 8001c12:	6829      	ldr	r1, [r5, #0]
 8001c14:	0606      	lsls	r6, r0, #24
 8001c16:	f101 0304 	add.w	r3, r1, #4
 8001c1a:	d50a      	bpl.n	8001c32 <_printf_i+0xce>
 8001c1c:	680e      	ldr	r6, [r1, #0]
 8001c1e:	602b      	str	r3, [r5, #0]
 8001c20:	2e00      	cmp	r6, #0
 8001c22:	da03      	bge.n	8001c2c <_printf_i+0xc8>
 8001c24:	232d      	movs	r3, #45	; 0x2d
 8001c26:	4276      	negs	r6, r6
 8001c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c2c:	485e      	ldr	r0, [pc, #376]	; (8001da8 <_printf_i+0x244>)
 8001c2e:	230a      	movs	r3, #10
 8001c30:	e019      	b.n	8001c66 <_printf_i+0x102>
 8001c32:	680e      	ldr	r6, [r1, #0]
 8001c34:	602b      	str	r3, [r5, #0]
 8001c36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c3a:	bf18      	it	ne
 8001c3c:	b236      	sxthne	r6, r6
 8001c3e:	e7ef      	b.n	8001c20 <_printf_i+0xbc>
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	6820      	ldr	r0, [r4, #0]
 8001c44:	1d19      	adds	r1, r3, #4
 8001c46:	6029      	str	r1, [r5, #0]
 8001c48:	0601      	lsls	r1, r0, #24
 8001c4a:	d501      	bpl.n	8001c50 <_printf_i+0xec>
 8001c4c:	681e      	ldr	r6, [r3, #0]
 8001c4e:	e002      	b.n	8001c56 <_printf_i+0xf2>
 8001c50:	0646      	lsls	r6, r0, #25
 8001c52:	d5fb      	bpl.n	8001c4c <_printf_i+0xe8>
 8001c54:	881e      	ldrh	r6, [r3, #0]
 8001c56:	4854      	ldr	r0, [pc, #336]	; (8001da8 <_printf_i+0x244>)
 8001c58:	2f6f      	cmp	r7, #111	; 0x6f
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2308      	moveq	r3, #8
 8001c5e:	230a      	movne	r3, #10
 8001c60:	2100      	movs	r1, #0
 8001c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c66:	6865      	ldr	r5, [r4, #4]
 8001c68:	60a5      	str	r5, [r4, #8]
 8001c6a:	2d00      	cmp	r5, #0
 8001c6c:	bfa2      	ittt	ge
 8001c6e:	6821      	ldrge	r1, [r4, #0]
 8001c70:	f021 0104 	bicge.w	r1, r1, #4
 8001c74:	6021      	strge	r1, [r4, #0]
 8001c76:	b90e      	cbnz	r6, 8001c7c <_printf_i+0x118>
 8001c78:	2d00      	cmp	r5, #0
 8001c7a:	d04d      	beq.n	8001d18 <_printf_i+0x1b4>
 8001c7c:	4615      	mov	r5, r2
 8001c7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c82:	fb03 6711 	mls	r7, r3, r1, r6
 8001c86:	5dc7      	ldrb	r7, [r0, r7]
 8001c88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c8c:	4637      	mov	r7, r6
 8001c8e:	42bb      	cmp	r3, r7
 8001c90:	460e      	mov	r6, r1
 8001c92:	d9f4      	bls.n	8001c7e <_printf_i+0x11a>
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d10b      	bne.n	8001cb0 <_printf_i+0x14c>
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	07de      	lsls	r6, r3, #31
 8001c9c:	d508      	bpl.n	8001cb0 <_printf_i+0x14c>
 8001c9e:	6923      	ldr	r3, [r4, #16]
 8001ca0:	6861      	ldr	r1, [r4, #4]
 8001ca2:	4299      	cmp	r1, r3
 8001ca4:	bfde      	ittt	le
 8001ca6:	2330      	movle	r3, #48	; 0x30
 8001ca8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001cb0:	1b52      	subs	r2, r2, r5
 8001cb2:	6122      	str	r2, [r4, #16]
 8001cb4:	f8cd a000 	str.w	sl, [sp]
 8001cb8:	464b      	mov	r3, r9
 8001cba:	aa03      	add	r2, sp, #12
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	4640      	mov	r0, r8
 8001cc0:	f7ff fee2 	bl	8001a88 <_printf_common>
 8001cc4:	3001      	adds	r0, #1
 8001cc6:	d14c      	bne.n	8001d62 <_printf_i+0x1fe>
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	b004      	add	sp, #16
 8001cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cd2:	4835      	ldr	r0, [pc, #212]	; (8001da8 <_printf_i+0x244>)
 8001cd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001cd8:	6829      	ldr	r1, [r5, #0]
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ce0:	6029      	str	r1, [r5, #0]
 8001ce2:	061d      	lsls	r5, r3, #24
 8001ce4:	d514      	bpl.n	8001d10 <_printf_i+0x1ac>
 8001ce6:	07df      	lsls	r7, r3, #31
 8001ce8:	bf44      	itt	mi
 8001cea:	f043 0320 	orrmi.w	r3, r3, #32
 8001cee:	6023      	strmi	r3, [r4, #0]
 8001cf0:	b91e      	cbnz	r6, 8001cfa <_printf_i+0x196>
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	f023 0320 	bic.w	r3, r3, #32
 8001cf8:	6023      	str	r3, [r4, #0]
 8001cfa:	2310      	movs	r3, #16
 8001cfc:	e7b0      	b.n	8001c60 <_printf_i+0xfc>
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	f043 0320 	orr.w	r3, r3, #32
 8001d04:	6023      	str	r3, [r4, #0]
 8001d06:	2378      	movs	r3, #120	; 0x78
 8001d08:	4828      	ldr	r0, [pc, #160]	; (8001dac <_printf_i+0x248>)
 8001d0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d0e:	e7e3      	b.n	8001cd8 <_printf_i+0x174>
 8001d10:	0659      	lsls	r1, r3, #25
 8001d12:	bf48      	it	mi
 8001d14:	b2b6      	uxthmi	r6, r6
 8001d16:	e7e6      	b.n	8001ce6 <_printf_i+0x182>
 8001d18:	4615      	mov	r5, r2
 8001d1a:	e7bb      	b.n	8001c94 <_printf_i+0x130>
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	6826      	ldr	r6, [r4, #0]
 8001d20:	6961      	ldr	r1, [r4, #20]
 8001d22:	1d18      	adds	r0, r3, #4
 8001d24:	6028      	str	r0, [r5, #0]
 8001d26:	0635      	lsls	r5, r6, #24
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	d501      	bpl.n	8001d30 <_printf_i+0x1cc>
 8001d2c:	6019      	str	r1, [r3, #0]
 8001d2e:	e002      	b.n	8001d36 <_printf_i+0x1d2>
 8001d30:	0670      	lsls	r0, r6, #25
 8001d32:	d5fb      	bpl.n	8001d2c <_printf_i+0x1c8>
 8001d34:	8019      	strh	r1, [r3, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	6123      	str	r3, [r4, #16]
 8001d3a:	4615      	mov	r5, r2
 8001d3c:	e7ba      	b.n	8001cb4 <_printf_i+0x150>
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	1d1a      	adds	r2, r3, #4
 8001d42:	602a      	str	r2, [r5, #0]
 8001d44:	681d      	ldr	r5, [r3, #0]
 8001d46:	6862      	ldr	r2, [r4, #4]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f7fe fa48 	bl	80001e0 <memchr>
 8001d50:	b108      	cbz	r0, 8001d56 <_printf_i+0x1f2>
 8001d52:	1b40      	subs	r0, r0, r5
 8001d54:	6060      	str	r0, [r4, #4]
 8001d56:	6863      	ldr	r3, [r4, #4]
 8001d58:	6123      	str	r3, [r4, #16]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d60:	e7a8      	b.n	8001cb4 <_printf_i+0x150>
 8001d62:	6923      	ldr	r3, [r4, #16]
 8001d64:	462a      	mov	r2, r5
 8001d66:	4649      	mov	r1, r9
 8001d68:	4640      	mov	r0, r8
 8001d6a:	47d0      	blx	sl
 8001d6c:	3001      	adds	r0, #1
 8001d6e:	d0ab      	beq.n	8001cc8 <_printf_i+0x164>
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	079b      	lsls	r3, r3, #30
 8001d74:	d413      	bmi.n	8001d9e <_printf_i+0x23a>
 8001d76:	68e0      	ldr	r0, [r4, #12]
 8001d78:	9b03      	ldr	r3, [sp, #12]
 8001d7a:	4298      	cmp	r0, r3
 8001d7c:	bfb8      	it	lt
 8001d7e:	4618      	movlt	r0, r3
 8001d80:	e7a4      	b.n	8001ccc <_printf_i+0x168>
 8001d82:	2301      	movs	r3, #1
 8001d84:	4632      	mov	r2, r6
 8001d86:	4649      	mov	r1, r9
 8001d88:	4640      	mov	r0, r8
 8001d8a:	47d0      	blx	sl
 8001d8c:	3001      	adds	r0, #1
 8001d8e:	d09b      	beq.n	8001cc8 <_printf_i+0x164>
 8001d90:	3501      	adds	r5, #1
 8001d92:	68e3      	ldr	r3, [r4, #12]
 8001d94:	9903      	ldr	r1, [sp, #12]
 8001d96:	1a5b      	subs	r3, r3, r1
 8001d98:	42ab      	cmp	r3, r5
 8001d9a:	dcf2      	bgt.n	8001d82 <_printf_i+0x21e>
 8001d9c:	e7eb      	b.n	8001d76 <_printf_i+0x212>
 8001d9e:	2500      	movs	r5, #0
 8001da0:	f104 0619 	add.w	r6, r4, #25
 8001da4:	e7f5      	b.n	8001d92 <_printf_i+0x22e>
 8001da6:	bf00      	nop
 8001da8:	0800303d 	.word	0x0800303d
 8001dac:	0800304e 	.word	0x0800304e

08001db0 <memcpy>:
 8001db0:	440a      	add	r2, r1
 8001db2:	4291      	cmp	r1, r2
 8001db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001db8:	d100      	bne.n	8001dbc <memcpy+0xc>
 8001dba:	4770      	bx	lr
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001dc6:	4291      	cmp	r1, r2
 8001dc8:	d1f9      	bne.n	8001dbe <memcpy+0xe>
 8001dca:	bd10      	pop	{r4, pc}

08001dcc <memmove>:
 8001dcc:	4288      	cmp	r0, r1
 8001dce:	b510      	push	{r4, lr}
 8001dd0:	eb01 0402 	add.w	r4, r1, r2
 8001dd4:	d902      	bls.n	8001ddc <memmove+0x10>
 8001dd6:	4284      	cmp	r4, r0
 8001dd8:	4623      	mov	r3, r4
 8001dda:	d807      	bhi.n	8001dec <memmove+0x20>
 8001ddc:	1e43      	subs	r3, r0, #1
 8001dde:	42a1      	cmp	r1, r4
 8001de0:	d008      	beq.n	8001df4 <memmove+0x28>
 8001de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001dea:	e7f8      	b.n	8001dde <memmove+0x12>
 8001dec:	4402      	add	r2, r0
 8001dee:	4601      	mov	r1, r0
 8001df0:	428a      	cmp	r2, r1
 8001df2:	d100      	bne.n	8001df6 <memmove+0x2a>
 8001df4:	bd10      	pop	{r4, pc}
 8001df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001dfe:	e7f7      	b.n	8001df0 <memmove+0x24>

08001e00 <_free_r>:
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	4605      	mov	r5, r0
 8001e04:	2900      	cmp	r1, #0
 8001e06:	d041      	beq.n	8001e8c <_free_r+0x8c>
 8001e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e0c:	1f0c      	subs	r4, r1, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bfb8      	it	lt
 8001e12:	18e4      	addlt	r4, r4, r3
 8001e14:	f000 f912 	bl	800203c <__malloc_lock>
 8001e18:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <_free_r+0x90>)
 8001e1a:	6813      	ldr	r3, [r2, #0]
 8001e1c:	b933      	cbnz	r3, 8001e2c <_free_r+0x2c>
 8001e1e:	6063      	str	r3, [r4, #4]
 8001e20:	6014      	str	r4, [r2, #0]
 8001e22:	4628      	mov	r0, r5
 8001e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e28:	f000 b90e 	b.w	8002048 <__malloc_unlock>
 8001e2c:	42a3      	cmp	r3, r4
 8001e2e:	d908      	bls.n	8001e42 <_free_r+0x42>
 8001e30:	6820      	ldr	r0, [r4, #0]
 8001e32:	1821      	adds	r1, r4, r0
 8001e34:	428b      	cmp	r3, r1
 8001e36:	bf01      	itttt	eq
 8001e38:	6819      	ldreq	r1, [r3, #0]
 8001e3a:	685b      	ldreq	r3, [r3, #4]
 8001e3c:	1809      	addeq	r1, r1, r0
 8001e3e:	6021      	streq	r1, [r4, #0]
 8001e40:	e7ed      	b.n	8001e1e <_free_r+0x1e>
 8001e42:	461a      	mov	r2, r3
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	b10b      	cbz	r3, 8001e4c <_free_r+0x4c>
 8001e48:	42a3      	cmp	r3, r4
 8001e4a:	d9fa      	bls.n	8001e42 <_free_r+0x42>
 8001e4c:	6811      	ldr	r1, [r2, #0]
 8001e4e:	1850      	adds	r0, r2, r1
 8001e50:	42a0      	cmp	r0, r4
 8001e52:	d10b      	bne.n	8001e6c <_free_r+0x6c>
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	4401      	add	r1, r0
 8001e58:	1850      	adds	r0, r2, r1
 8001e5a:	4283      	cmp	r3, r0
 8001e5c:	6011      	str	r1, [r2, #0]
 8001e5e:	d1e0      	bne.n	8001e22 <_free_r+0x22>
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	6053      	str	r3, [r2, #4]
 8001e66:	4401      	add	r1, r0
 8001e68:	6011      	str	r1, [r2, #0]
 8001e6a:	e7da      	b.n	8001e22 <_free_r+0x22>
 8001e6c:	d902      	bls.n	8001e74 <_free_r+0x74>
 8001e6e:	230c      	movs	r3, #12
 8001e70:	602b      	str	r3, [r5, #0]
 8001e72:	e7d6      	b.n	8001e22 <_free_r+0x22>
 8001e74:	6820      	ldr	r0, [r4, #0]
 8001e76:	1821      	adds	r1, r4, r0
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	bf04      	itt	eq
 8001e7c:	6819      	ldreq	r1, [r3, #0]
 8001e7e:	685b      	ldreq	r3, [r3, #4]
 8001e80:	6063      	str	r3, [r4, #4]
 8001e82:	bf04      	itt	eq
 8001e84:	1809      	addeq	r1, r1, r0
 8001e86:	6021      	streq	r1, [r4, #0]
 8001e88:	6054      	str	r4, [r2, #4]
 8001e8a:	e7ca      	b.n	8001e22 <_free_r+0x22>
 8001e8c:	bd38      	pop	{r3, r4, r5, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000cd8 	.word	0x20000cd8

08001e94 <sbrk_aligned>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	4e0e      	ldr	r6, [pc, #56]	; (8001ed0 <sbrk_aligned+0x3c>)
 8001e98:	460c      	mov	r4, r1
 8001e9a:	6831      	ldr	r1, [r6, #0]
 8001e9c:	4605      	mov	r5, r0
 8001e9e:	b911      	cbnz	r1, 8001ea6 <sbrk_aligned+0x12>
 8001ea0:	f000 f8bc 	bl	800201c <_sbrk_r>
 8001ea4:	6030      	str	r0, [r6, #0]
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f000 f8b7 	bl	800201c <_sbrk_r>
 8001eae:	1c43      	adds	r3, r0, #1
 8001eb0:	d00a      	beq.n	8001ec8 <sbrk_aligned+0x34>
 8001eb2:	1cc4      	adds	r4, r0, #3
 8001eb4:	f024 0403 	bic.w	r4, r4, #3
 8001eb8:	42a0      	cmp	r0, r4
 8001eba:	d007      	beq.n	8001ecc <sbrk_aligned+0x38>
 8001ebc:	1a21      	subs	r1, r4, r0
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f000 f8ac 	bl	800201c <_sbrk_r>
 8001ec4:	3001      	adds	r0, #1
 8001ec6:	d101      	bne.n	8001ecc <sbrk_aligned+0x38>
 8001ec8:	f04f 34ff 	mov.w	r4, #4294967295
 8001ecc:	4620      	mov	r0, r4
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
 8001ed0:	20000cdc 	.word	0x20000cdc

08001ed4 <_malloc_r>:
 8001ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed8:	1ccd      	adds	r5, r1, #3
 8001eda:	f025 0503 	bic.w	r5, r5, #3
 8001ede:	3508      	adds	r5, #8
 8001ee0:	2d0c      	cmp	r5, #12
 8001ee2:	bf38      	it	cc
 8001ee4:	250c      	movcc	r5, #12
 8001ee6:	2d00      	cmp	r5, #0
 8001ee8:	4607      	mov	r7, r0
 8001eea:	db01      	blt.n	8001ef0 <_malloc_r+0x1c>
 8001eec:	42a9      	cmp	r1, r5
 8001eee:	d905      	bls.n	8001efc <_malloc_r+0x28>
 8001ef0:	230c      	movs	r3, #12
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	2600      	movs	r6, #0
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001efc:	4e2e      	ldr	r6, [pc, #184]	; (8001fb8 <_malloc_r+0xe4>)
 8001efe:	f000 f89d 	bl	800203c <__malloc_lock>
 8001f02:	6833      	ldr	r3, [r6, #0]
 8001f04:	461c      	mov	r4, r3
 8001f06:	bb34      	cbnz	r4, 8001f56 <_malloc_r+0x82>
 8001f08:	4629      	mov	r1, r5
 8001f0a:	4638      	mov	r0, r7
 8001f0c:	f7ff ffc2 	bl	8001e94 <sbrk_aligned>
 8001f10:	1c43      	adds	r3, r0, #1
 8001f12:	4604      	mov	r4, r0
 8001f14:	d14d      	bne.n	8001fb2 <_malloc_r+0xde>
 8001f16:	6834      	ldr	r4, [r6, #0]
 8001f18:	4626      	mov	r6, r4
 8001f1a:	2e00      	cmp	r6, #0
 8001f1c:	d140      	bne.n	8001fa0 <_malloc_r+0xcc>
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	4631      	mov	r1, r6
 8001f22:	4638      	mov	r0, r7
 8001f24:	eb04 0803 	add.w	r8, r4, r3
 8001f28:	f000 f878 	bl	800201c <_sbrk_r>
 8001f2c:	4580      	cmp	r8, r0
 8001f2e:	d13a      	bne.n	8001fa6 <_malloc_r+0xd2>
 8001f30:	6821      	ldr	r1, [r4, #0]
 8001f32:	3503      	adds	r5, #3
 8001f34:	1a6d      	subs	r5, r5, r1
 8001f36:	f025 0503 	bic.w	r5, r5, #3
 8001f3a:	3508      	adds	r5, #8
 8001f3c:	2d0c      	cmp	r5, #12
 8001f3e:	bf38      	it	cc
 8001f40:	250c      	movcc	r5, #12
 8001f42:	4629      	mov	r1, r5
 8001f44:	4638      	mov	r0, r7
 8001f46:	f7ff ffa5 	bl	8001e94 <sbrk_aligned>
 8001f4a:	3001      	adds	r0, #1
 8001f4c:	d02b      	beq.n	8001fa6 <_malloc_r+0xd2>
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	442b      	add	r3, r5
 8001f52:	6023      	str	r3, [r4, #0]
 8001f54:	e00e      	b.n	8001f74 <_malloc_r+0xa0>
 8001f56:	6822      	ldr	r2, [r4, #0]
 8001f58:	1b52      	subs	r2, r2, r5
 8001f5a:	d41e      	bmi.n	8001f9a <_malloc_r+0xc6>
 8001f5c:	2a0b      	cmp	r2, #11
 8001f5e:	d916      	bls.n	8001f8e <_malloc_r+0xba>
 8001f60:	1961      	adds	r1, r4, r5
 8001f62:	42a3      	cmp	r3, r4
 8001f64:	6025      	str	r5, [r4, #0]
 8001f66:	bf18      	it	ne
 8001f68:	6059      	strne	r1, [r3, #4]
 8001f6a:	6863      	ldr	r3, [r4, #4]
 8001f6c:	bf08      	it	eq
 8001f6e:	6031      	streq	r1, [r6, #0]
 8001f70:	5162      	str	r2, [r4, r5]
 8001f72:	604b      	str	r3, [r1, #4]
 8001f74:	4638      	mov	r0, r7
 8001f76:	f104 060b 	add.w	r6, r4, #11
 8001f7a:	f000 f865 	bl	8002048 <__malloc_unlock>
 8001f7e:	f026 0607 	bic.w	r6, r6, #7
 8001f82:	1d23      	adds	r3, r4, #4
 8001f84:	1af2      	subs	r2, r6, r3
 8001f86:	d0b6      	beq.n	8001ef6 <_malloc_r+0x22>
 8001f88:	1b9b      	subs	r3, r3, r6
 8001f8a:	50a3      	str	r3, [r4, r2]
 8001f8c:	e7b3      	b.n	8001ef6 <_malloc_r+0x22>
 8001f8e:	6862      	ldr	r2, [r4, #4]
 8001f90:	42a3      	cmp	r3, r4
 8001f92:	bf0c      	ite	eq
 8001f94:	6032      	streq	r2, [r6, #0]
 8001f96:	605a      	strne	r2, [r3, #4]
 8001f98:	e7ec      	b.n	8001f74 <_malloc_r+0xa0>
 8001f9a:	4623      	mov	r3, r4
 8001f9c:	6864      	ldr	r4, [r4, #4]
 8001f9e:	e7b2      	b.n	8001f06 <_malloc_r+0x32>
 8001fa0:	4634      	mov	r4, r6
 8001fa2:	6876      	ldr	r6, [r6, #4]
 8001fa4:	e7b9      	b.n	8001f1a <_malloc_r+0x46>
 8001fa6:	230c      	movs	r3, #12
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	4638      	mov	r0, r7
 8001fac:	f000 f84c 	bl	8002048 <__malloc_unlock>
 8001fb0:	e7a1      	b.n	8001ef6 <_malloc_r+0x22>
 8001fb2:	6025      	str	r5, [r4, #0]
 8001fb4:	e7de      	b.n	8001f74 <_malloc_r+0xa0>
 8001fb6:	bf00      	nop
 8001fb8:	20000cd8 	.word	0x20000cd8

08001fbc <_realloc_r>:
 8001fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fc0:	4680      	mov	r8, r0
 8001fc2:	4614      	mov	r4, r2
 8001fc4:	460e      	mov	r6, r1
 8001fc6:	b921      	cbnz	r1, 8001fd2 <_realloc_r+0x16>
 8001fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fcc:	4611      	mov	r1, r2
 8001fce:	f7ff bf81 	b.w	8001ed4 <_malloc_r>
 8001fd2:	b92a      	cbnz	r2, 8001fe0 <_realloc_r+0x24>
 8001fd4:	f7ff ff14 	bl	8001e00 <_free_r>
 8001fd8:	4625      	mov	r5, r4
 8001fda:	4628      	mov	r0, r5
 8001fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fe0:	f000 f838 	bl	8002054 <_malloc_usable_size_r>
 8001fe4:	4284      	cmp	r4, r0
 8001fe6:	4607      	mov	r7, r0
 8001fe8:	d802      	bhi.n	8001ff0 <_realloc_r+0x34>
 8001fea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001fee:	d812      	bhi.n	8002016 <_realloc_r+0x5a>
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	4640      	mov	r0, r8
 8001ff4:	f7ff ff6e 	bl	8001ed4 <_malloc_r>
 8001ff8:	4605      	mov	r5, r0
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d0ed      	beq.n	8001fda <_realloc_r+0x1e>
 8001ffe:	42bc      	cmp	r4, r7
 8002000:	4622      	mov	r2, r4
 8002002:	4631      	mov	r1, r6
 8002004:	bf28      	it	cs
 8002006:	463a      	movcs	r2, r7
 8002008:	f7ff fed2 	bl	8001db0 <memcpy>
 800200c:	4631      	mov	r1, r6
 800200e:	4640      	mov	r0, r8
 8002010:	f7ff fef6 	bl	8001e00 <_free_r>
 8002014:	e7e1      	b.n	8001fda <_realloc_r+0x1e>
 8002016:	4635      	mov	r5, r6
 8002018:	e7df      	b.n	8001fda <_realloc_r+0x1e>
	...

0800201c <_sbrk_r>:
 800201c:	b538      	push	{r3, r4, r5, lr}
 800201e:	4d06      	ldr	r5, [pc, #24]	; (8002038 <_sbrk_r+0x1c>)
 8002020:	2300      	movs	r3, #0
 8002022:	4604      	mov	r4, r0
 8002024:	4608      	mov	r0, r1
 8002026:	602b      	str	r3, [r5, #0]
 8002028:	f000 f81e 	bl	8002068 <_sbrk>
 800202c:	1c43      	adds	r3, r0, #1
 800202e:	d102      	bne.n	8002036 <_sbrk_r+0x1a>
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	b103      	cbz	r3, 8002036 <_sbrk_r+0x1a>
 8002034:	6023      	str	r3, [r4, #0]
 8002036:	bd38      	pop	{r3, r4, r5, pc}
 8002038:	20000ce0 	.word	0x20000ce0

0800203c <__malloc_lock>:
 800203c:	4801      	ldr	r0, [pc, #4]	; (8002044 <__malloc_lock+0x8>)
 800203e:	f000 b811 	b.w	8002064 <__retarget_lock_acquire_recursive>
 8002042:	bf00      	nop
 8002044:	20000ce4 	.word	0x20000ce4

08002048 <__malloc_unlock>:
 8002048:	4801      	ldr	r0, [pc, #4]	; (8002050 <__malloc_unlock+0x8>)
 800204a:	f000 b80c 	b.w	8002066 <__retarget_lock_release_recursive>
 800204e:	bf00      	nop
 8002050:	20000ce4 	.word	0x20000ce4

08002054 <_malloc_usable_size_r>:
 8002054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002058:	1f18      	subs	r0, r3, #4
 800205a:	2b00      	cmp	r3, #0
 800205c:	bfbc      	itt	lt
 800205e:	580b      	ldrlt	r3, [r1, r0]
 8002060:	18c0      	addlt	r0, r0, r3
 8002062:	4770      	bx	lr

08002064 <__retarget_lock_acquire_recursive>:
 8002064:	4770      	bx	lr

08002066 <__retarget_lock_release_recursive>:
 8002066:	4770      	bx	lr

08002068 <_sbrk>:
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <_sbrk+0x14>)
 800206a:	6811      	ldr	r1, [r2, #0]
 800206c:	4603      	mov	r3, r0
 800206e:	b909      	cbnz	r1, 8002074 <_sbrk+0xc>
 8002070:	4903      	ldr	r1, [pc, #12]	; (8002080 <_sbrk+0x18>)
 8002072:	6011      	str	r1, [r2, #0]
 8002074:	6810      	ldr	r0, [r2, #0]
 8002076:	4403      	add	r3, r0
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4770      	bx	lr
 800207c:	20000ce8 	.word	0x20000ce8
 8002080:	20000cf0 	.word	0x20000cf0

08002084 <_init>:
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	bf00      	nop
 8002088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208a:	bc08      	pop	{r3}
 800208c:	469e      	mov	lr, r3
 800208e:	4770      	bx	lr

08002090 <_fini>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	bf00      	nop
 8002094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002096:	bc08      	pop	{r3}
 8002098:	469e      	mov	lr, r3
 800209a:	4770      	bx	lr
