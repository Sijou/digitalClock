
WiSe2223_GruppeK3_s_Projektaufgabe_Digitalihr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b28  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cbc  08000cbc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000cbc  08000cbc  00010cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000cc0  08000cc0  00010cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000030  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000040  20000040  00020010  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000183c  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000662  00000000  00000000  00021876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000118  00000000  00000000  00021ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000000d0  00000000  00000000  00021ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00017946  00000000  00000000  000220c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00001900  00000000  00000000  00039a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000835f2  00000000  00000000  0003b306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  000be8f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000304  00000000  00000000  000be948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ca4 	.word	0x08000ca4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08000ca4 	.word	0x08000ca4

080001d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	db0a      	blt.n	80001fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	490c      	ldr	r1, [pc, #48]	; (8000220 <__NVIC_SetPriority+0x4c>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	0112      	lsls	r2, r2, #4
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	440b      	add	r3, r1
 80001f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001fc:	e00a      	b.n	8000214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4908      	ldr	r1, [pc, #32]	; (8000224 <__NVIC_SetPriority+0x50>)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	3b04      	subs	r3, #4
 800020c:	0112      	lsls	r2, r2, #4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	440b      	add	r3, r1
 8000212:	761a      	strb	r2, [r3, #24]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <main>:
uint8_t data = 0 ;
uint8_t i = 0 ;
int error ;

int main()
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af02      	add	r7, sp, #8

	while ((RCC->CR & 2) == 0); //wait until HSI is Ready
 800022e:	bf00      	nop
 8000230:	4b2c      	ldr	r3, [pc, #176]	; (80002e4 <main+0xbc>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f003 0302 	and.w	r3, r3, #2
 8000238:	2b00      	cmp	r3, #0
 800023a:	d0f9      	beq.n	8000230 <main+0x8>

	systick_enable() ;
 800023c:	f000 f85a 	bl	80002f4 <systick_enable>

	RCC->CFGR &= ~(1<<7)  ; //reset HPRE4 The AHB clock frequency == sys clk
 8000240:	4b28      	ldr	r3, [pc, #160]	; (80002e4 <main+0xbc>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <main+0xbc>)
 8000246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800024a:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<12) ; // APB1 clock no division
 800024c:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <main+0xbc>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a24      	ldr	r2, [pc, #144]	; (80002e4 <main+0xbc>)
 8000252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000256:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(1<<15) ; // APB2 clock no division
 8000258:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <main+0xbc>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	4a21      	ldr	r2, [pc, #132]	; (80002e4 <main+0xbc>)
 800025e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000262:	6053      	str	r3, [r2, #4]

	gpio_clock_enable(GPIOA) ;
 8000264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000268:	f000 f8b8 	bl	80003dc <gpio_clock_enable>

	gpio_config_pin(GPIOA,5,GPIO_OUT,GPIO_SPEED_LOW,GPIO_NO_PULL ,GPIO_PUSHPULL);
 800026c:	2300      	movs	r3, #0
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	2300      	movs	r3, #0
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2300      	movs	r3, #0
 8000276:	2201      	movs	r2, #1
 8000278:	2105      	movs	r1, #5
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f000 f932 	bl	80004e6 <gpio_config_pin>

	gpio_set_pinState(GPIOA , 5 , LOW) ;
 8000282:	2201      	movs	r2, #1
 8000284:	2105      	movs	r1, #5
 8000286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028a:	f000 f963 	bl	8000554 <gpio_set_pinState>

	//SYSCFG->CFGR1 |= (1<<16) |(1<<17) ;// set PB6 and PB7 I2C mode
    #ifdef I2C_WRITE_READ_BM

	 I2C_Init(I2C2) ;
 800028e:	4816      	ldr	r0, [pc, #88]	; (80002e8 <main+0xc0>)
 8000290:	f000 f984 	bl	800059c <I2C_Init>


	// data = search_address(I2C2) ;

	 uint8_t buff[2] ;
	 buff[0] = 0x09 ;
 8000294:	2309      	movs	r3, #9
 8000296:	713b      	strb	r3, [r7, #4]
	 buff[1] = 0x0a ;
 8000298:	230a      	movs	r3, #10
 800029a:	717b      	strb	r3, [r7, #5]

	 error = I2C_Write(I2C2 , 0x57 ,buff , 1 ) ;
 800029c:	1d3a      	adds	r2, r7, #4
 800029e:	2301      	movs	r3, #1
 80002a0:	2157      	movs	r1, #87	; 0x57
 80002a2:	4811      	ldr	r0, [pc, #68]	; (80002e8 <main+0xc0>)
 80002a4:	f000 fa68 	bl	8000778 <I2C_Write>
 80002a8:	4603      	mov	r3, r0
 80002aa:	4a10      	ldr	r2, [pc, #64]	; (80002ec <main+0xc4>)
 80002ac:	6013      	str	r3, [r2, #0]

	 delay_ms(2);
 80002ae:	2002      	movs	r0, #2
 80002b0:	f000 f84c 	bl	800034c <delay_ms>

	 I2C_Read(I2C2 ,0x57 , buff , 2) ;
 80002b4:	1d3a      	adds	r2, r7, #4
 80002b6:	2302      	movs	r3, #2
 80002b8:	2157      	movs	r1, #87	; 0x57
 80002ba:	480b      	ldr	r0, [pc, #44]	; (80002e8 <main+0xc0>)
 80002bc:	f000 faeb 	bl	8000896 <I2C_Read>


     //128*64
#endif

	 keypad_init(GPIOC , 0) ;
 80002c0:	2100      	movs	r1, #0
 80002c2:	480b      	ldr	r0, [pc, #44]	; (80002f0 <main+0xc8>)
 80002c4:	f000 fb38 	bl	8000938 <keypad_init>
//	 eidr = (porte >> 0) & 0x7f ;

	while(1)
	{

		char c = keypad_get_pressedkey() ;
 80002c8:	f000 fc10 	bl	8000aec <keypad_get_pressedkey>
 80002cc:	4603      	mov	r3, r0
 80002ce:	71fb      	strb	r3, [r7, #7]


//		uint16_t key = (GPIOC->IDR )&0x007f ;
//		key = (key >> 4 ) & 0x07;
//		if(key != 7)
		if(c != 0)
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f8      	beq.n	80002c8 <main+0xa0>
		{
			gpio_set_pinState(GPIOA , 5 , HIGH) ;
 80002d6:	2200      	movs	r2, #0
 80002d8:	2105      	movs	r1, #5
 80002da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002de:	f000 f939 	bl	8000554 <gpio_set_pinState>
	{
 80002e2:	e7f1      	b.n	80002c8 <main+0xa0>
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40005800 	.word	0x40005800
 80002ec:	20000030 	.word	0x20000030
 80002f0:	48000800 	.word	0x48000800

080002f4 <systick_enable>:
	}
}


void systick_enable()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	SysTick->LOAD  = (SystemCoreClock_/1000) - 1;                  /* set reload register */
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <systick_enable+0x30>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <systick_enable+0x34>)
 80002fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000302:	099b      	lsrs	r3, r3, #6
 8000304:	4a09      	ldr	r2, [pc, #36]	; (800032c <systick_enable+0x38>)
 8000306:	3b01      	subs	r3, #1
 8000308:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800030a:	210f      	movs	r1, #15
 800030c:	f04f 30ff 	mov.w	r0, #4294967295
 8000310:	f7ff ff60 	bl	80001d4 <__NVIC_SetPriority>
	SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <systick_enable+0x38>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800031a:	4b04      	ldr	r3, [pc, #16]	; (800032c <systick_enable+0x38>)
 800031c:	2207      	movs	r2, #7
 800031e:	601a      	str	r2, [r3, #0]
					 SysTick_CTRL_TICKINT_Msk   |
					 SysTick_CTRL_ENABLE_Msk;
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000000 	.word	0x20000000
 8000328:	10624dd3 	.word	0x10624dd3
 800032c:	e000e010 	.word	0xe000e010

08000330 <SysTick_Handler>:


void SysTick_Handler()
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  mtick++;
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Handler+0x18>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	4a03      	ldr	r2, [pc, #12]	; (8000348 <SysTick_Handler+0x18>)
 800033c:	6013      	str	r3, [r2, #0]
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	2000002c 	.word	0x2000002c

0800034c <delay_ms>:

void delay_ms(uint32_t ms)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t st = get_mtick();
 8000354:	f000 f810 	bl	8000378 <get_mtick>
 8000358:	60f8      	str	r0, [r7, #12]

  while( get_mtick() - st <ms);
 800035a:	bf00      	nop
 800035c:	f000 f80c 	bl	8000378 <get_mtick>
 8000360:	4602      	mov	r2, r0
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	1ad3      	subs	r3, r2, r3
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	429a      	cmp	r2, r3
 800036a:	d8f7      	bhi.n	800035c <delay_ms+0x10>
}
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <get_mtick>:

uint32_t get_mtick()
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  return mtick;
 800037c:	4b02      	ldr	r3, [pc, #8]	; (8000388 <get_mtick+0x10>)
 800037e:	681b      	ldr	r3, [r3, #0]
}
 8000380:	4618      	mov	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	2000002c 	.word	0x2000002c

0800038c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800038c:	f8df d030 	ldr.w	sp, [pc, #48]	; 80003c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000390:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000392:	e003      	b.n	800039c <LoopCopyDataInit>

08000394 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000394:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000396:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000398:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800039a:	3104      	adds	r1, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800039c:	480a      	ldr	r0, [pc, #40]	; (80003c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <LoopForever+0xe>)
	adds	r2, r0, r1
 80003a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003a4:	d3f6      	bcc.n	8000394 <CopyDataInit>
	ldr	r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80003a8:	e002      	b.n	80003b0 <LoopFillZerobss>

080003aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003ac:	f842 3b04 	str.w	r3, [r2], #4

080003b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <LoopForever+0x16>)
	cmp	r2, r3
 80003b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003b4:	d3f9      	bcc.n	80003aa <FillZerobss>

/* Call the clock system intitialization function.*/
    //bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 80003b6:	f000 fc51 	bl	8000c5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003ba:	f7ff ff35 	bl	8000228 <main>

080003be <LoopForever>:

LoopForever:
    b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003c0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80003c4:	08000cc4 	.word	0x08000cc4
	ldr	r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003cc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80003d0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80003d4:	20000040 	.word	0x20000040

080003d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_2_IRQHandler>
	...

080003dc <gpio_clock_enable>:
 * After each device reset, all peripheral clocks are disabled (except for the SRAM and FLITF).
Before using a peripheral user has to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.  s.50
 */
void gpio_clock_enable(GPIO_TypeDef * Port)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	if(Port == GPIOA)        //  Bit 17 IOPAEN: I/O port A clock enable
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003ea:	d106      	bne.n	80003fa <gpio_clock_enable+0x1e>
	{
		RCC->AHBENR |= (1 << GPIOA_CLOCK_ENABLE_BIT) ;
 80003ec:	4b2b      	ldr	r3, [pc, #172]	; (800049c <gpio_clock_enable+0xc0>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a2a      	ldr	r2, [pc, #168]	; (800049c <gpio_clock_enable+0xc0>)
 80003f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f6:	6153      	str	r3, [r2, #20]
	}
	*/
	else{

	}
}
 80003f8:	e04b      	b.n	8000492 <gpio_clock_enable+0xb6>
	else if(Port == GPIOB)  //    Bit 18 IOPBEN: I/O port B  clock enable
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a28      	ldr	r2, [pc, #160]	; (80004a0 <gpio_clock_enable+0xc4>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <gpio_clock_enable+0x34>
		RCC->AHBENR |= (1 << GPIOB_CLOCK_ENABLE_BIT) ;
 8000402:	4b26      	ldr	r3, [pc, #152]	; (800049c <gpio_clock_enable+0xc0>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a25      	ldr	r2, [pc, #148]	; (800049c <gpio_clock_enable+0xc0>)
 8000408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800040c:	6153      	str	r3, [r2, #20]
}
 800040e:	e040      	b.n	8000492 <gpio_clock_enable+0xb6>
	else if(Port == GPIOC)   //  Bit 19 IOPCEN: I/O port C clock enable
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a24      	ldr	r2, [pc, #144]	; (80004a4 <gpio_clock_enable+0xc8>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <gpio_clock_enable+0x4a>
		RCC->AHBENR |= (1 << GPIOC_CLOCK_ENABLE_BIT) ;
 8000418:	4b20      	ldr	r3, [pc, #128]	; (800049c <gpio_clock_enable+0xc0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a1f      	ldr	r2, [pc, #124]	; (800049c <gpio_clock_enable+0xc0>)
 800041e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000422:	6153      	str	r3, [r2, #20]
}
 8000424:	e035      	b.n	8000492 <gpio_clock_enable+0xb6>
	else if(Port == GPIOD)    //  Bit 20 IOPDEN: I/O port D clock enable
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a1f      	ldr	r2, [pc, #124]	; (80004a8 <gpio_clock_enable+0xcc>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <gpio_clock_enable+0x60>
		RCC->AHBENR |= (1 << GPIOD_CLOCK_ENABLE_BIT) ;
 800042e:	4b1b      	ldr	r3, [pc, #108]	; (800049c <gpio_clock_enable+0xc0>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a1a      	ldr	r2, [pc, #104]	; (800049c <gpio_clock_enable+0xc0>)
 8000434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000438:	6153      	str	r3, [r2, #20]
}
 800043a:	e02a      	b.n	8000492 <gpio_clock_enable+0xb6>
	else if(Port == GPIOE)    //  Bit 21 IOPEEN: I/O port E clock enable
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <gpio_clock_enable+0xd0>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <gpio_clock_enable+0x76>
		RCC->AHBENR |= (1 << GPIOE_CLOCK_ENABLE_BIT) ;
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <gpio_clock_enable+0xc0>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a14      	ldr	r2, [pc, #80]	; (800049c <gpio_clock_enable+0xc0>)
 800044a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800044e:	6153      	str	r3, [r2, #20]
}
 8000450:	e01f      	b.n	8000492 <gpio_clock_enable+0xb6>
	else if(Port == GPIOF)   //  Bit 22 IOPFEN: I/O port F clock enable
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <gpio_clock_enable+0xd4>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <gpio_clock_enable+0x8c>
		RCC->AHBENR |= (1 << GPIOF_CLOCK_ENABLE_BIT) ;
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <gpio_clock_enable+0xc0>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a0f      	ldr	r2, [pc, #60]	; (800049c <gpio_clock_enable+0xc0>)
 8000460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000464:	6153      	str	r3, [r2, #20]
}
 8000466:	e014      	b.n	8000492 <gpio_clock_enable+0xb6>
	else if(Port == GPIOG)    //  Bit 23 IOPGEN: I/O port G clock enable
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <gpio_clock_enable+0xd8>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <gpio_clock_enable+0xa2>
		RCC->AHBENR |= (1 << GPIOG_CLOCK_ENABLE_BIT) ;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <gpio_clock_enable+0xc0>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a09      	ldr	r2, [pc, #36]	; (800049c <gpio_clock_enable+0xc0>)
 8000476:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800047a:	6153      	str	r3, [r2, #20]
}
 800047c:	e009      	b.n	8000492 <gpio_clock_enable+0xb6>
	else if(Port == GPIOH)    //  Bit 16 IOPHEN: I/O port H clock enable
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <gpio_clock_enable+0xdc>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d105      	bne.n	8000492 <gpio_clock_enable+0xb6>
		RCC->AHBENR |= (1 << GPIOH_CLOCK_ENABLE_BIT) ;
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <gpio_clock_enable+0xc0>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a04      	ldr	r2, [pc, #16]	; (800049c <gpio_clock_enable+0xc0>)
 800048c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000490:	6153      	str	r3, [r2, #20]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	48000400 	.word	0x48000400
 80004a4:	48000800 	.word	0x48000800
 80004a8:	48000c00 	.word	0x48000c00
 80004ac:	48001000 	.word	0x48001000
 80004b0:	48001400 	.word	0x48001400
 80004b4:	48001800 	.word	0x48001800
 80004b8:	48001c00 	.word	0x48001c00

080004bc <reset_io>:

void reset_io(GPIO_TypeDef * Port ) {
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	Port->MODER   = 0x00 ;             // set  pin Mode
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
	Port->OTYPER  = 0x00 ;             //set output type OD/PP
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2200      	movs	r2, #0
 80004ce:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR = 0x00 ;             //set output speed
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  = 0x00 ;             //set pin Pull
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <gpio_config_pin>:

void gpio_config_pin(GPIO_TypeDef * Port , int Pin , GPIO_Mode_t Mode ,
					   GPIO_Speed_t speed ,GPIO_Pull_t pull, GPIO_out_type_t otype)
{
 80004e6:	b480      	push	{r7}
 80004e8:	b085      	sub	sp, #20
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	60f8      	str	r0, [r7, #12]
 80004ee:	60b9      	str	r1, [r7, #8]
 80004f0:	4611      	mov	r1, r2
 80004f2:	461a      	mov	r2, r3
 80004f4:	460b      	mov	r3, r1
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	4613      	mov	r3, r2
 80004fa:	71bb      	strb	r3, [r7, #6]
	Port->MODER   |= (Mode  << 2 * Pin) ; // set  pin Mode
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	79f9      	ldrb	r1, [r7, #7]
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	0052      	lsls	r2, r2, #1
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	431a      	orrs	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	601a      	str	r2, [r3, #0]
	Port->OTYPER  |= (otype << Pin)     ; //set output type OD/PP
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	7f39      	ldrb	r1, [r7, #28]
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	431a      	orrs	r2, r3
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	605a      	str	r2, [r3, #4]
	Port->OSPEEDR |= (speed << 2 * Pin) ; //set output speed
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	79b9      	ldrb	r1, [r7, #6]
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	0052      	lsls	r2, r2, #1
 800052c:	fa01 f202 	lsl.w	r2, r1, r2
 8000530:	431a      	orrs	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	609a      	str	r2, [r3, #8]
	Port->PUPDR	  |= (pull  << 2 * Pin) ; //set pin Pull
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	7e39      	ldrb	r1, [r7, #24]
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	fa01 f202 	lsl.w	r2, r1, r2
 8000544:	431a      	orrs	r2, r3
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	60da      	str	r2, [r3, #12]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <gpio_set_pinState>:

void gpio_set_pinState(GPIO_TypeDef * Port , int Pin , Pin_State State)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	4613      	mov	r3, r2
 8000560:	71fb      	strb	r3, [r7, #7]
	//assert pin < 16
	if(State == HIGH)
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d109      	bne.n	800057c <gpio_set_pinState+0x28>
	{
		Port->ODR |= (1 << Pin) ;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	2101      	movs	r1, #1
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	fa01 f202 	lsl.w	r2, r1, r2
 8000574:	431a      	orrs	r2, r3
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	615a      	str	r2, [r3, #20]
	}
	else {
		Port->ODR &= ~(1 << Pin) ;
	}
}
 800057a:	e009      	b.n	8000590 <gpio_set_pinState+0x3c>
		Port->ODR &= ~(1 << Pin) ;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	2101      	movs	r1, #1
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	fa01 f202 	lsl.w	r2, r1, r2
 8000588:	43d2      	mvns	r2, r2
 800058a:	401a      	ands	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	615a      	str	r2, [r3, #20]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
	...

0800059c <I2C_Init>:

/*
 * TESTED
 */
void I2C_Init(I2C_TypeDef * i2c)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]


 	 if( i2c == I2C1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a6e      	ldr	r2, [pc, #440]	; (8000760 <I2C_Init+0x1c4>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d118      	bne.n	80005de <I2C_Init+0x42>
 	 {
 		// PB6  I2C1_SCL, PB7   I2C1_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80005ac:	4b6d      	ldr	r3, [pc, #436]	; (8000764 <I2C_Init+0x1c8>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a6c      	ldr	r2, [pc, #432]	; (8000764 <I2C_Init+0x1c8>)
 80005b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b6:	6153      	str	r3, [r2, #20]
 		GPIOB->MODER |= (0b10 << GPIO_MODER_MODER6_Pos) |
 80005b8:	4b6b      	ldr	r3, [pc, #428]	; (8000768 <I2C_Init+0x1cc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a6a      	ldr	r2, [pc, #424]	; (8000768 <I2C_Init+0x1cc>)
 80005be:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80005c2:	6013      	str	r3, [r2, #0]
		   (0b10 << GPIO_MODER_MODER7_Pos); // PB6, PB7: Alternate function
		 GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFRL6_Pos) |
 80005c4:	4b68      	ldr	r3, [pc, #416]	; (8000768 <I2C_Init+0x1cc>)
 80005c6:	6a1b      	ldr	r3, [r3, #32]
 80005c8:	4a67      	ldr	r2, [pc, #412]	; (8000768 <I2C_Init+0x1cc>)
 80005ca:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 80005ce:	6213      	str	r3, [r2, #32]
		   (4 << GPIO_AFRL_AFRL7_Pos);         // 0100: AF4

		 RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //i2c clock enable
 80005d0:	4b64      	ldr	r3, [pc, #400]	; (8000764 <I2C_Init+0x1c8>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	4a63      	ldr	r2, [pc, #396]	; (8000764 <I2C_Init+0x1c8>)
 80005d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005da:	61d3      	str	r3, [r2, #28]
 80005dc:	e0ac      	b.n	8000738 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C2 )
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a62      	ldr	r2, [pc, #392]	; (800076c <I2C_Init+0x1d0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d14c      	bne.n	8000680 <I2C_Init+0xe4>
 	 {
 		//PA9 I2C2_SCL , PA10 I2C2_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80005e6:	4b5f      	ldr	r3, [pc, #380]	; (8000764 <I2C_Init+0x1c8>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a5e      	ldr	r2, [pc, #376]	; (8000764 <I2C_Init+0x1c8>)
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f0:	6153      	str	r3, [r2, #20]
 		GPIOA->MODER |= (2 << 18) ;// PA9 10: Alternate function mode
 80005f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000600:	6013      	str	r3, [r2, #0]
 		GPIOA->MODER |= (2 << 20) ;//PA10 10: Alternate function mode
 8000602:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000610:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER |= (1 << 9 ) ;//PA9  GPIO port output type register 1: Output open-drain
 8000612:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800061c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000620:	6053      	str	r3, [r2, #4]
 		GPIOA->OTYPER |= (1 << 10) ;//PA10 Oepn Drain
 8000622:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800062c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000630:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 18) | (3 << 20) ; //PA9,PA10  GPIO port output speed register 11: High speed
 8000632:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800063c:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8000640:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR  |= (1<<18) | (1<<20) ;//PA9 ,PA10 GPIO port pull-up/pull-down register 01: Pull-up
 8000642:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800064c:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8000650:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1] |= ( 4 << 4 );   //select GPIO alternate function high register  PA9  0100: AF4
 8000652:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000658:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800065c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000660:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOA->AFR[1] |= (4 << 8);   //select GPIO alternate function high register  PA10   0100: AF4
 8000662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000668:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800066c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000670:	6253      	str	r3, [r2, #36]	; 0x24

 		RCC->APB1ENR |=RCC_APB1ENR_I2C2EN ; //i2c clock enable
 8000672:	4b3c      	ldr	r3, [pc, #240]	; (8000764 <I2C_Init+0x1c8>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a3b      	ldr	r2, [pc, #236]	; (8000764 <I2C_Init+0x1c8>)
 8000678:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	e05b      	b.n	8000738 <I2C_Init+0x19c>
 	 }
 	 else if( i2c == I2C3 )
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a3b      	ldr	r2, [pc, #236]	; (8000770 <I2C_Init+0x1d4>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d157      	bne.n	8000738 <I2C_Init+0x19c>
 	 {
 		//PA8 I2C3_SCL , PB5 I2C3_SDA
 		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000688:	4b36      	ldr	r3, [pc, #216]	; (8000764 <I2C_Init+0x1c8>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4a35      	ldr	r2, [pc, #212]	; (8000764 <I2C_Init+0x1c8>)
 800068e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000692:	6153      	str	r3, [r2, #20]
 		RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000694:	4b33      	ldr	r3, [pc, #204]	; (8000764 <I2C_Init+0x1c8>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a32      	ldr	r2, [pc, #200]	; (8000764 <I2C_Init+0x1c8>)
 800069a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069e:	6153      	str	r3, [r2, #20]

 		GPIOA->MODER   |= (2 << 16) ;// PA8 ALF
 80006a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ae:	6013      	str	r3, [r2, #0]
 		GPIOB->MODER   |= (2 << 10) ;//PB5 ALF
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <I2C_Init+0x1cc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a2c      	ldr	r2, [pc, #176]	; (8000768 <I2C_Init+0x1cc>)
 80006b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006ba:	6013      	str	r3, [r2, #0]
 		GPIOA->OTYPER  |= (1 << 8 ) ;//PA8 Open Drain
 80006bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ca:	6053      	str	r3, [r2, #4]
 		GPIOB->OTYPER  |= (1 << 5 ) ;//PB5 Oepn Drain
 80006cc:	4b26      	ldr	r3, [pc, #152]	; (8000768 <I2C_Init+0x1cc>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4a25      	ldr	r2, [pc, #148]	; (8000768 <I2C_Init+0x1cc>)
 80006d2:	f043 0320 	orr.w	r3, r3, #32
 80006d6:	6053      	str	r3, [r2, #4]
 		GPIOA->OSPEEDR |= (3 << 16) ;//PA8 High Speed
 80006d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006e2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80006e6:	6093      	str	r3, [r2, #8]
 		GPIOB->OSPEEDR |= (3 << 10) ; //PB5 High Speed
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <I2C_Init+0x1cc>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <I2C_Init+0x1cc>)
 80006ee:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80006f2:	6093      	str	r3, [r2, #8]
 		GPIOA->PUPDR   |= (1 << 16) ;//PA8 PULL up
 80006f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000702:	60d3      	str	r3, [r2, #12]
 		GPIOB->PUPDR   |= (1 << 10) ;//PB5 PULL up
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <I2C_Init+0x1cc>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	4a17      	ldr	r2, [pc, #92]	; (8000768 <I2C_Init+0x1cc>)
 800070a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800070e:	60d3      	str	r3, [r2, #12]
 		GPIOA->AFR[1]  |= ( 3 << 0 );//select Alf PA8    0011: AF3
 8000710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800071a:	f043 0303 	orr.w	r3, r3, #3
 800071e:	6253      	str	r3, [r2, #36]	; 0x24
 		GPIOB->AFR[0]  |= (8 << 20) ;//select Alf PB5     1000: AF8
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <I2C_Init+0x1cc>)
 8000722:	6a1b      	ldr	r3, [r3, #32]
 8000724:	4a10      	ldr	r2, [pc, #64]	; (8000768 <I2C_Init+0x1cc>)
 8000726:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800072a:	6213      	str	r3, [r2, #32]

 		RCC->APB1ENR |=RCC_APB1ENR_I2C3EN ; //i2c clock enable
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <I2C_Init+0x1c8>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <I2C_Init+0x1c8>)
 8000732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000736:	61d3      	str	r3, [r2, #28]
	 * Enabling and disabling the peripheral
	 * The I2C peripheral clock must be configured and enabled in the clock controller.
	 * Then the I2C can be enabled by setting the PE bit in the I2C_CR1 register.
	 * When the I2C is disabled (PE=0), the I2C performs a software reset.
	 */
	 i2c->CR1 &= ~I2C_CR1_PE;                // disable the i2c peripheral clock  (clear PE bit in I2C_CR1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f023 0201 	bic.w	r2, r3, #1
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	601a      	str	r2, [r3, #0]
	/*
	 * I2C timings
	 * The timings must be configured in order to guarantee a correct data hold and setup time,
	 * used in master and slave modes. This is done by programming the PRESC,SCLDEL and SDADEL bits in the I2C_TIMINGR register.
	 */
	 i2c->TIMINGR = (1 << I2C_TIMINGR_PRESC_Pos) | // Standard mode 100 kHz @ 8 MHz (page 849/1141)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <I2C_Init+0x1d8>)
 8000748:	611a      	str	r2, [r3, #16]
	             (0x13 << I2C_TIMINGR_SCLL_Pos)  |
	             (0xF << I2C_TIMINGR_SCLH_Pos)   |
	             (0x2 << I2C_TIMINGR_SDADEL_Pos) |
	             (0x4 << I2C_TIMINGR_SCLDEL_Pos);

	 i2c->CR1 |= I2C_CR1_PE;// enable the i2c peripheral clock (set PE bit inI2C_CR1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f043 0201 	orr.w	r2, r3, #1
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]

}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40005400 	.word	0x40005400
 8000764:	40021000 	.word	0x40021000
 8000768:	48000400 	.word	0x48000400
 800076c:	40005800 	.word	0x40005800
 8000770:	40007800 	.word	0x40007800
 8000774:	10420f13 	.word	0x10420f13

08000778 <I2C_Write>:
	return -1 ;
}


int I2C_Write(I2C_TypeDef * i2c , uint8_t address , uint8_t * data , int len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	460b      	mov	r3, r1
 8000786:	72fb      	strb	r3, [r7, #11]
	 uint32_t start_time = 0 ;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
	 //int ret = 0 ;
	 // Send start + slave address
	 i2c->CR2  = ((address << 1) << I2C_CR2_SADD_Pos) ;  // set the slave address
 800078c:	7afb      	ldrb	r3, [r7, #11]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	461a      	mov	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	605a      	str	r2, [r3, #4]
	 i2c->CR2 |=   (len << I2C_CR2_NBYTES_Pos);		   // set the number of bytes to transmitted
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	0412      	lsls	r2, r2, #16
 800079e:	431a      	orrs	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	605a      	str	r2, [r3, #4]
	 i2c->CR2 |= I2C_CR2_START; 					   // generate the start condition
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	605a      	str	r2, [r3, #4]
	 while ((i2c->ISR & I2C_ISR_TXIS) == 0)  // wait for ASK
 80007b0:	e012      	b.n	80007d8 <I2C_Write+0x60>
	 {
		  if (i2c->ISR & I2C_ISR_NACKF)	      // No ASK is received (error)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <I2C_Write+0x4c>
			  return ERROR_ADDRESS_NOT_FOUND ;//while(1) ;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e064      	b.n	800088e <I2C_Write+0x116>
		  if( get_mtick() - start_time > I2C_TIMOUT)
 80007c4:	f7ff fdd8 	bl	8000378 <get_mtick>
 80007c8:	4602      	mov	r2, r0
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	2b0a      	cmp	r3, #10
 80007d0:	d902      	bls.n	80007d8 <I2C_Write+0x60>
		 {
			 return ERROR_TIMEOUT ;
 80007d2:	f06f 0301 	mvn.w	r3, #1
 80007d6:	e05a      	b.n	800088e <I2C_Write+0x116>
	 while ((i2c->ISR & I2C_ISR_TXIS) == 0)  // wait for ASK
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0302 	and.w	r3, r3, #2
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0e6      	beq.n	80007b2 <I2C_Write+0x3a>
		 }
	 }



	 for(int i = 0 ;i<len  ;i++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	e046      	b.n	8000878 <I2C_Write+0x100>
	 {
		 i2c->TXDR = *data;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	461a      	mov	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
		 data++ ;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3301      	adds	r3, #1
 80007f8:	607b      	str	r3, [r7, #4]

		 if(i == len -1)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	429a      	cmp	r2, r3
 8000802:	d130      	bne.n	8000866 <I2C_Write+0xee>
		 {
			 start_time = get_mtick() ;
 8000804:	f7ff fdb8 	bl	8000378 <get_mtick>
 8000808:	6178      	str	r0, [r7, #20]

			 while ((i2c->ISR & I2C_ISR_TC) == 0)
 800080a:	e012      	b.n	8000832 <I2C_Write+0xba>
			 {
				 if (i2c->ISR & I2C_ISR_NACKF)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <I2C_Write+0xa6>
					 return ERROR_NANK_RECEIVED ;//while(1) ;
 8000818:	f06f 0302 	mvn.w	r3, #2
 800081c:	e037      	b.n	800088e <I2C_Write+0x116>
				 if( get_mtick() - start_time > I2C_TIMOUT)
 800081e:	f7ff fdab 	bl	8000378 <get_mtick>
 8000822:	4602      	mov	r2, r0
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	2b0a      	cmp	r3, #10
 800082a:	d902      	bls.n	8000832 <I2C_Write+0xba>
				 {
					 return ERROR_TIMEOUT ;
 800082c:	f06f 0301 	mvn.w	r3, #1
 8000830:	e02d      	b.n	800088e <I2C_Write+0x116>
			 while ((i2c->ISR & I2C_ISR_TC) == 0)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0e6      	beq.n	800080c <I2C_Write+0x94>
 800083e:	e018      	b.n	8000872 <I2C_Write+0xfa>
			 }
		 }
		 else{
			 while ((i2c->ISR & I2C_ISR_TXIS) == 0)
			 {
				 if (i2c->ISR & I2C_ISR_NACKF)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0310 	and.w	r3, r3, #16
 8000848:	2b00      	cmp	r3, #0
 800084a:	d002      	beq.n	8000852 <I2C_Write+0xda>
					 return ERROR_NANK_RECEIVED ;//while(1) ;
 800084c:	f06f 0302 	mvn.w	r3, #2
 8000850:	e01d      	b.n	800088e <I2C_Write+0x116>
				 if( get_mtick() - start_time > I2C_TIMOUT)
 8000852:	f7ff fd91 	bl	8000378 <get_mtick>
 8000856:	4602      	mov	r2, r0
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2b0a      	cmp	r3, #10
 800085e:	d902      	bls.n	8000866 <I2C_Write+0xee>
				 {
					 return ERROR_TIMEOUT ;
 8000860:	f06f 0301 	mvn.w	r3, #1
 8000864:	e013      	b.n	800088e <I2C_Write+0x116>
			 while ((i2c->ISR & I2C_ISR_TXIS) == 0)
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0e6      	beq.n	8000840 <I2C_Write+0xc8>
	 for(int i = 0 ;i<len  ;i++)
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	3301      	adds	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	dbb4      	blt.n	80007ea <I2C_Write+0x72>
			 }
		 }
	 }


	 i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	605a      	str	r2, [r3, #4]

	 return ERROR_OK ;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <I2C_Read>:


void I2C_Read(I2C_TypeDef * i2c ,uint8_t address , uint8_t * buffer , int len)
{
 8000896:	b480      	push	{r7}
 8000898:	b087      	sub	sp, #28
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	460b      	mov	r3, r1
 80008a4:	72fb      	strb	r3, [r7, #11]

	i2c->CR2  = (((address << 1)) << I2C_CR2_SADD_Pos) ;  // set the slave address
 80008a6:	7afb      	ldrb	r3, [r7, #11]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	605a      	str	r2, [r3, #4]
	i2c->CR2 |=   (len << I2C_CR2_NBYTES_Pos);		   // set the number of bytes to be transmitted
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	0412      	lsls	r2, r2, #16
 80008b8:	431a      	orrs	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= (1<<10);                            	 // i2c read
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	605a      	str	r2, [r3, #4]
	i2c->CR2 |= I2C_CR2_START; 					   	// generate the start condition
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	605a      	str	r2, [r3, #4]

	 for( int i = 0 ;i<len ;i++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	e01d      	b.n	8000918 <I2C_Read+0x82>
	 {
		 while((i2c->ISR & I2C_ISR_RXNE) == 0) ; //wait for rx data
 80008dc:	bf00      	nop
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0f9      	beq.n	80008de <I2C_Read+0x48>

		 *buffer = i2c->RXDR ;     //read rx
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	701a      	strb	r2, [r3, #0]

		 buffer++ ;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3301      	adds	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]

		 if(i == len - 1)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	429a      	cmp	r2, r3
 8000902:	d106      	bne.n	8000912 <I2C_Read+0x7c>
		 {
			 while((i2c->ISR & I2C_ISR_TC) == 0) ; //wait for TC Flag
 8000904:	bf00      	nop
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0f9      	beq.n	8000906 <I2C_Read+0x70>
	 for( int i = 0 ;i<len ;i++)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbdd      	blt.n	80008dc <I2C_Read+0x46>
		 else{
			 //nope
		 }
	 }

	 i2c->CR2 |= (1<<I2C_CR2_STOP_Pos); //Generate Stop condition
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	605a      	str	r2, [r3, #4]
}
 800092c:	bf00      	nop
 800092e:	371c      	adds	r7, #28
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
	...

08000938 <keypad_init>:

/**
 * config keypad pins
 */
void keypad_init(GPIO_TypeDef * port , int s_pin)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	keypad_port = port   ;
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <keypad_init+0x2c>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6013      	str	r3, [r2, #0]
	start_pin   = s_pin  ;
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <keypad_init+0x30>)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	6013      	str	r3, [r2, #0]
	gpio_clock_enable(port) ;
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fd44 	bl	80003dc <gpio_clock_enable>
	keypad_config_key_direction(port , s_pin) ;
 8000954:	6839      	ldr	r1, [r7, #0]
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f868 	bl	8000a2c <keypad_config_key_direction>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000034 	.word	0x20000034
 8000968:	20000038 	.word	0x20000038

0800096c <keypad_inverse_pin_direction>:

static void keypad_inverse_pin_direction( GPIO_TypeDef * port , int s_pin)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af02      	add	r7, sp, #8
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fda0 	bl	80004bc <reset_io>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R1
 800097c:	6839      	ldr	r1, [r7, #0]
 800097e:	1c4b      	adds	r3, r1, #1
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	2300      	movs	r3, #0
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	2302      	movs	r3, #2
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2300      	movs	r3, #0
 800098c:	2200      	movs	r2, #0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fda9 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R2
 8000994:	6839      	ldr	r1, [r7, #0]
 8000996:	1c4b      	adds	r3, r1, #1
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	2300      	movs	r3, #0
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	2302      	movs	r3, #2
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2200      	movs	r2, #0
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fd9d 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R3
 80009ac:	6839      	ldr	r1, [r7, #0]
 80009ae:	1c4b      	adds	r3, r1, #1
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	2302      	movs	r3, #2
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2300      	movs	r3, #0
 80009bc:	2200      	movs	r2, #0
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fd91 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_DOWN,GPIO_PUSHPULL) ;//R4
 80009c4:	6839      	ldr	r1, [r7, #0]
 80009c6:	1c4b      	adds	r3, r1, #1
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	2300      	movs	r3, #0
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	2302      	movs	r3, #2
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2300      	movs	r3, #0
 80009d4:	2200      	movs	r2, #0
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fd85 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C1
 80009dc:	6839      	ldr	r1, [r7, #0]
 80009de:	1c4b      	adds	r3, r1, #1
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	2300      	movs	r3, #0
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2300      	movs	r3, #0
 80009ec:	2201      	movs	r2, #1
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fd79 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C2
 80009f4:	6839      	ldr	r1, [r7, #0]
 80009f6:	1c4b      	adds	r3, r1, #1
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	2300      	movs	r3, #0
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	2300      	movs	r3, #0
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2300      	movs	r3, #0
 8000a04:	2201      	movs	r2, #1
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff fd6d 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;  //C3
 8000a0c:	6839      	ldr	r1, [r7, #0]
 8000a0e:	1c4b      	adds	r3, r1, #1
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	2300      	movs	r3, #0
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fd61 	bl	80004e6 <gpio_config_pin>

}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <keypad_config_key_direction>:

static void keypad_config_key_direction( GPIO_TypeDef * port , int s_pin)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	reset_io(port) ;
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fd40 	bl	80004bc <reset_io>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//R1  0
 8000a3c:	6839      	ldr	r1, [r7, #0]
 8000a3e:	1c4b      	adds	r3, r1, #1
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	2300      	movs	r3, #0
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	2300      	movs	r3, #0
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff fd49 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//R2  0
 8000a54:	6839      	ldr	r1, [r7, #0]
 8000a56:	1c4b      	adds	r3, r1, #1
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2300      	movs	r3, #0
 8000a64:	2201      	movs	r2, #1
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fd3d 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++  ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//R3  0
 8000a6c:	6839      	ldr	r1, [r7, #0]
 8000a6e:	1c4b      	adds	r3, r1, #1
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	2300      	movs	r3, #0
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	2300      	movs	r3, #0
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fd31 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_OUT , GPIO_SPEED_LOW , GPIO_NO_PULL,GPIO_PUSHPULL) ;//R4   0
 8000a84:	6839      	ldr	r1, [r7, #0]
 8000a86:	1c4b      	adds	r3, r1, #1
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	9301      	str	r3, [sp, #4]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	2300      	movs	r3, #0
 8000a94:	2201      	movs	r2, #1
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff fd25 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C1  1
 8000a9c:	6839      	ldr	r1, [r7, #0]
 8000a9e:	1c4b      	adds	r3, r1, #1
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2200      	movs	r2, #0
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fd19 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C2  1
 8000ab4:	6839      	ldr	r1, [r7, #0]
 8000ab6:	1c4b      	adds	r3, r1, #1
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fd0d 	bl	80004e6 <gpio_config_pin>
	gpio_config_pin(port ,s_pin++ ,GPIO_IN , GPIO_SPEED_LOW , GPIO_PULL_UP,GPIO_PUSHPULL) ;  //C3  1
 8000acc:	6839      	ldr	r1, [r7, #0]
 8000ace:	1c4b      	adds	r3, r1, #1
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2300      	movs	r3, #0
 8000adc:	2200      	movs	r2, #0
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fd01 	bl	80004e6 <gpio_config_pin>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <keypad_get_pressedkey>:

/**
 * return the pressedkey other wise 0
 */
char keypad_get_pressedkey()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0

	uint16_t porte = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	817b      	strh	r3, [r7, #10]
	uint8_t  eidr  = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	727b      	strb	r3, [r7, #9]
	uint8_t  ch    = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	723b      	strb	r3, [r7, #8]
	char ret = 0 ;
 8000afe:	2300      	movs	r3, #0
 8000b00:	75fb      	strb	r3, [r7, #23]

	porte = GPIOC->IDR ;
 8000b02:	4b51      	ldr	r3, [pc, #324]	; (8000c48 <keypad_get_pressedkey+0x15c>)
 8000b04:	691b      	ldr	r3, [r3, #16]
 8000b06:	817b      	strh	r3, [r7, #10]

	switch(state)
 8000b08:	4b50      	ldr	r3, [pc, #320]	; (8000c4c <keypad_get_pressedkey+0x160>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	f000 808c 	beq.w	8000c2a <keypad_get_pressedkey+0x13e>
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	f300 808d 	bgt.w	8000c32 <keypad_get_pressedkey+0x146>
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <keypad_get_pressedkey+0x36>
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d077      	beq.n	8000c10 <keypad_get_pressedkey+0x124>

				state = State_free ;
				break ;
			}
		default :
			break ;
 8000b20:	e087      	b.n	8000c32 <keypad_get_pressedkey+0x146>
				eidr = (porte >> start_pin) & 0x7f ;
 8000b22:	897a      	ldrh	r2, [r7, #10]
 8000b24:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <keypad_get_pressedkey+0x164>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	fa42 f303 	asr.w	r3, r2, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b32:	727b      	strb	r3, [r7, #9]
				if(eidr != DEFAULT_KEYPAD_PORT_INP)
 8000b34:	7a7b      	ldrb	r3, [r7, #9]
 8000b36:	2b70      	cmp	r3, #112	; 0x70
 8000b38:	d07d      	beq.n	8000c36 <keypad_get_pressedkey+0x14a>
					ch = ~eidr;
 8000b3a:	7a7b      	ldrb	r3, [r7, #9]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	723b      	strb	r3, [r7, #8]
					ch = ch & DEFAULT_KEYPAD_PORT_INP;  //the bit that changed
 8000b40:	7a3b      	ldrb	r3, [r7, #8]
 8000b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000b46:	723b      	strb	r3, [r7, #8]
					keypad_inverse_pin_direction(keypad_port ,start_pin ) ;
 8000b48:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <keypad_get_pressedkey+0x168>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a40      	ldr	r2, [pc, #256]	; (8000c50 <keypad_get_pressedkey+0x164>)
 8000b4e:	6812      	ldr	r2, [r2, #0]
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff0a 	bl	800096c <keypad_inverse_pin_direction>
					uint16_t out = (ch << start_pin) ;
 8000b58:	7a3a      	ldrb	r2, [r7, #8]
 8000b5a:	4b3d      	ldr	r3, [pc, #244]	; (8000c50 <keypad_get_pressedkey+0x164>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	80fb      	strh	r3, [r7, #6]
					keypad_port->ODR = out ;
 8000b64:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <keypad_get_pressedkey+0x168>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	88fa      	ldrh	r2, [r7, #6]
 8000b6a:	615a      	str	r2, [r3, #20]
					delay_ms(1) ;
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff fbed 	bl	800034c <delay_ms>
					porte = keypad_port->IDR ;
 8000b72:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <keypad_get_pressedkey+0x168>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	817b      	strh	r3, [r7, #10]
					eidr = (porte >> start_pin) & 0xff ;
 8000b7a:	897a      	ldrh	r2, [r7, #10]
 8000b7c:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <keypad_get_pressedkey+0x164>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	fa42 f303 	asr.w	r3, r2, r3
 8000b84:	727b      	strb	r3, [r7, #9]
					int col = 0 ;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
					for(col = 0 ; col <3 ; col++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	e00d      	b.n	8000bac <keypad_get_pressedkey+0xc0>
						if(   (((eidr & 0x70) >> 4) &  (1<<col)) != 0 )
 8000b90:	7a7b      	ldrb	r3, [r7, #9]
 8000b92:	111b      	asrs	r3, r3, #4
 8000b94:	f003 0207 	and.w	r2, r3, #7
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	fa42 f303 	asr.w	r3, r2, r3
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d106      	bne.n	8000bb4 <keypad_get_pressedkey+0xc8>
					for(col = 0 ; col <3 ; col++)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	ddee      	ble.n	8000b90 <keypad_get_pressedkey+0xa4>
 8000bb2:	e000      	b.n	8000bb6 <keypad_get_pressedkey+0xca>
							break ;
 8000bb4:	bf00      	nop
					int row = 0 ;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
					for(row = 0 ; row <4 ; row++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e00c      	b.n	8000bda <keypad_get_pressedkey+0xee>
						if( ((eidr & 0x0f) & (1<<row)) != 0)
 8000bc0:	7a7b      	ldrb	r3, [r7, #9]
 8000bc2:	f003 020f 	and.w	r2, r3, #15
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	fa42 f303 	asr.w	r3, r2, r3
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d106      	bne.n	8000be2 <keypad_get_pressedkey+0xf6>
					for(row = 0 ; row <4 ; row++)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	ddef      	ble.n	8000bc0 <keypad_get_pressedkey+0xd4>
 8000be0:	e000      	b.n	8000be4 <keypad_get_pressedkey+0xf8>
							break ;
 8000be2:	bf00      	nop
					keypad_config_key_direction(keypad_port ,start_pin ) ;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <keypad_get_pressedkey+0x168>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <keypad_get_pressedkey+0x164>)
 8000bea:	6812      	ldr	r2, [r2, #0]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff1c 	bl	8000a2c <keypad_config_key_direction>
					ret = keys[row][col] ;
 8000bf4:	4918      	ldr	r1, [pc, #96]	; (8000c58 <keypad_get_pressedkey+0x16c>)
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	18ca      	adds	r2, r1, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4413      	add	r3, r2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	75fb      	strb	r3, [r7, #23]
					state = State_key_pressed ;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <keypad_get_pressedkey+0x160>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
				break ;
 8000c0e:	e012      	b.n	8000c36 <keypad_get_pressedkey+0x14a>
				eidr = (porte >> start_pin) & 0xff ;
 8000c10:	897a      	ldrh	r2, [r7, #10]
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <keypad_get_pressedkey+0x164>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	fa42 f303 	asr.w	r3, r2, r3
 8000c1a:	727b      	strb	r3, [r7, #9]
				if(eidr == DEFAULT_KEYPAD_PORT_INP)
 8000c1c:	7a7b      	ldrb	r3, [r7, #9]
 8000c1e:	2b70      	cmp	r3, #112	; 0x70
 8000c20:	d10b      	bne.n	8000c3a <keypad_get_pressedkey+0x14e>
					state = State_key_released ;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <keypad_get_pressedkey+0x160>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	701a      	strb	r2, [r3, #0]
				break ;
 8000c28:	e007      	b.n	8000c3a <keypad_get_pressedkey+0x14e>
				state = State_free ;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <keypad_get_pressedkey+0x160>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
				break ;
 8000c30:	e004      	b.n	8000c3c <keypad_get_pressedkey+0x150>
			break ;
 8000c32:	bf00      	nop
 8000c34:	e002      	b.n	8000c3c <keypad_get_pressedkey+0x150>
				break ;
 8000c36:	bf00      	nop
 8000c38:	e000      	b.n	8000c3c <keypad_get_pressedkey+0x150>
				break ;
 8000c3a:	bf00      	nop

	}


	return ret ;
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	2000003c 	.word	0x2000003c
 8000c50:	20000038 	.word	0x20000038
 8000c54:	20000034 	.word	0x20000034
 8000c58:	20000004 	.word	0x20000004

08000c5c <__libc_init_array>:
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	4d0d      	ldr	r5, [pc, #52]	; (8000c94 <__libc_init_array+0x38>)
 8000c60:	4c0d      	ldr	r4, [pc, #52]	; (8000c98 <__libc_init_array+0x3c>)
 8000c62:	1b64      	subs	r4, r4, r5
 8000c64:	10a4      	asrs	r4, r4, #2
 8000c66:	2600      	movs	r6, #0
 8000c68:	42a6      	cmp	r6, r4
 8000c6a:	d109      	bne.n	8000c80 <__libc_init_array+0x24>
 8000c6c:	4d0b      	ldr	r5, [pc, #44]	; (8000c9c <__libc_init_array+0x40>)
 8000c6e:	4c0c      	ldr	r4, [pc, #48]	; (8000ca0 <__libc_init_array+0x44>)
 8000c70:	f000 f818 	bl	8000ca4 <_init>
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	10a4      	asrs	r4, r4, #2
 8000c78:	2600      	movs	r6, #0
 8000c7a:	42a6      	cmp	r6, r4
 8000c7c:	d105      	bne.n	8000c8a <__libc_init_array+0x2e>
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}
 8000c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c84:	4798      	blx	r3
 8000c86:	3601      	adds	r6, #1
 8000c88:	e7ee      	b.n	8000c68 <__libc_init_array+0xc>
 8000c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c8e:	4798      	blx	r3
 8000c90:	3601      	adds	r6, #1
 8000c92:	e7f2      	b.n	8000c7a <__libc_init_array+0x1e>
 8000c94:	08000cbc 	.word	0x08000cbc
 8000c98:	08000cbc 	.word	0x08000cbc
 8000c9c:	08000cbc 	.word	0x08000cbc
 8000ca0:	08000cc0 	.word	0x08000cc0

08000ca4 <_init>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr

08000cb0 <_fini>:
 8000cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb2:	bf00      	nop
 8000cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb6:	bc08      	pop	{r3}
 8000cb8:	469e      	mov	lr, r3
 8000cba:	4770      	bx	lr
